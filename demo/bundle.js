/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(setImmediate, global) {;(function() {\n\"use strict\"\nfunction Vnode(tag, key, attrs0, children, text, dom) {\n\treturn {tag: tag, key: key, attrs: attrs0, children: children, text: text, dom: dom, domSize: undefined, state: undefined, _state: undefined, events: undefined, instance: undefined, skip: false}\n}\nVnode.normalize = function(node) {\n\tif (Array.isArray(node)) return Vnode(\"[\", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)\n\tif (node != null && typeof node !== \"object\") return Vnode(\"#\", undefined, undefined, node === false ? \"\" : node, undefined, undefined)\n\treturn node\n}\nVnode.normalizeChildren = function normalizeChildren(children) {\n\tfor (var i = 0; i < children.length; i++) {\n\t\tchildren[i] = Vnode.normalize(children[i])\n\t}\n\treturn children\n}\nvar selectorParser = /(?:(^|#|\\.)([^#\\.\\[\\]]+))|(\\[(.+?)(?:\\s*=\\s*(\"|'|)((?:\\\\[\"'\\]]|.)*?)\\5)?\\])/g\nvar selectorCache = {}\nvar hasOwn = {}.hasOwnProperty\nfunction isEmpty(object) {\n\tfor (var key in object) if (hasOwn.call(object, key)) return false\n\treturn true\n}\nfunction compileSelector(selector) {\n\tvar match, tag = \"div\", classes = [], attrs = {}\n\twhile (match = selectorParser.exec(selector)) {\n\t\tvar type = match[1], value = match[2]\n\t\tif (type === \"\" && value !== \"\") tag = value\n\t\telse if (type === \"#\") attrs.id = value\n\t\telse if (type === \".\") classes.push(value)\n\t\telse if (match[3][0] === \"[\") {\n\t\t\tvar attrValue = match[6]\n\t\t\tif (attrValue) attrValue = attrValue.replace(/\\\\([\"'])/g, \"$1\").replace(/\\\\\\\\/g, \"\\\\\")\n\t\t\tif (match[4] === \"class\") classes.push(attrValue)\n\t\t\telse attrs[match[4]] = attrValue === \"\" ? attrValue : attrValue || true\n\t\t}\n\t}\n\tif (classes.length > 0) attrs.className = classes.join(\" \")\n\treturn selectorCache[selector] = {tag: tag, attrs: attrs}\n}\nfunction execSelector(state, attrs, children) {\n\tvar hasAttrs = false, childList, text\n\tvar className = attrs.className || attrs.class\n\tif (!isEmpty(state.attrs) && !isEmpty(attrs)) {\n\t\tvar newAttrs = {}\n\t\tfor(var key in attrs) {\n\t\t\tif (hasOwn.call(attrs, key)) {\n\t\t\t\tnewAttrs[key] = attrs[key]\n\t\t\t}\n\t\t}\n\t\tattrs = newAttrs\n\t}\n\tfor (var key in state.attrs) {\n\t\tif (hasOwn.call(state.attrs, key)) {\n\t\t\tattrs[key] = state.attrs[key]\n\t\t}\n\t}\n\tif (className !== undefined) {\n\t\tif (attrs.class !== undefined) {\n\t\t\tattrs.class = undefined\n\t\t\tattrs.className = className\n\t\t}\n\t\tif (state.attrs.className != null) {\n\t\t\tattrs.className = state.attrs.className + \" \" + className\n\t\t}\n\t}\n\tfor (var key in attrs) {\n\t\tif (hasOwn.call(attrs, key) && key !== \"key\") {\n\t\t\thasAttrs = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif (Array.isArray(children) && children.length === 1 && children[0] != null && children[0].tag === \"#\") {\n\t\ttext = children[0].children\n\t} else {\n\t\tchildList = children\n\t}\n\treturn Vnode(state.tag, attrs.key, hasAttrs ? attrs : undefined, childList, text)\n}\nfunction hyperscript(selector) {\n\t// Because sloppy mode sucks\n\tvar attrs = arguments[1], start = 2, children\n\tif (selector == null || typeof selector !== \"string\" && typeof selector !== \"function\" && typeof selector.view !== \"function\") {\n\t\tthrow Error(\"The selector must be either a string or a component.\");\n\t}\n\tif (typeof selector === \"string\") {\n\t\tvar cached = selectorCache[selector] || compileSelector(selector)\n\t}\n\tif (attrs == null) {\n\t\tattrs = {}\n\t} else if (typeof attrs !== \"object\" || attrs.tag != null || Array.isArray(attrs)) {\n\t\tattrs = {}\n\t\tstart = 1\n\t}\n\tif (arguments.length === start + 1) {\n\t\tchildren = arguments[start]\n\t\tif (!Array.isArray(children)) children = [children]\n\t} else {\n\t\tchildren = []\n\t\twhile (start < arguments.length) children.push(arguments[start++])\n\t}\n\tvar normalized = Vnode.normalizeChildren(children)\n\tif (typeof selector === \"string\") {\n\t\treturn execSelector(cached, attrs, normalized)\n\t} else {\n\t\treturn Vnode(selector, attrs.key, attrs, normalized)\n\t}\n}\nhyperscript.trust = function(html) {\n\tif (html == null) html = \"\"\n\treturn Vnode(\"<\", undefined, undefined, html, undefined, undefined)\n}\nhyperscript.fragment = function(attrs1, children) {\n\treturn Vnode(\"[\", attrs1.key, attrs1, Vnode.normalizeChildren(children), undefined, undefined)\n}\nvar m = hyperscript\n/** @constructor */\nvar PromisePolyfill = function(executor) {\n\tif (!(this instanceof PromisePolyfill)) throw new Error(\"Promise must be called with `new`\")\n\tif (typeof executor !== \"function\") throw new TypeError(\"executor must be a function\")\n\tvar self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false)\n\tvar instance = self._instance = {resolvers: resolvers, rejectors: rejectors}\n\tvar callAsync = typeof setImmediate === \"function\" ? setImmediate : setTimeout\n\tfunction handler(list, shouldAbsorb) {\n\t\treturn function execute(value) {\n\t\t\tvar then\n\t\t\ttry {\n\t\t\t\tif (shouldAbsorb && value != null && (typeof value === \"object\" || typeof value === \"function\") && typeof (then = value.then) === \"function\") {\n\t\t\t\t\tif (value === self) throw new TypeError(\"Promise can't be resolved w/ itself\")\n\t\t\t\t\texecuteOnce(then.bind(value))\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallAsync(function() {\n\t\t\t\t\t\tif (!shouldAbsorb && list.length === 0) console.error(\"Possible unhandled promise rejection:\", value)\n\t\t\t\t\t\tfor (var i = 0; i < list.length; i++) list[i](value)\n\t\t\t\t\t\tresolvers.length = 0, rejectors.length = 0\n\t\t\t\t\t\tinstance.state = shouldAbsorb\n\t\t\t\t\t\tinstance.retry = function() {execute(value)}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\trejectCurrent(e)\n\t\t\t}\n\t\t}\n\t}\n\tfunction executeOnce(then) {\n\t\tvar runs = 0\n\t\tfunction run(fn) {\n\t\t\treturn function(value) {\n\t\t\t\tif (runs++ > 0) return\n\t\t\t\tfn(value)\n\t\t\t}\n\t\t}\n\t\tvar onerror = run(rejectCurrent)\n\t\ttry {then(run(resolveCurrent), onerror)} catch (e) {onerror(e)}\n\t}\n\texecuteOnce(executor)\n}\nPromisePolyfill.prototype.then = function(onFulfilled, onRejection) {\n\tvar self = this, instance = self._instance\n\tfunction handle(callback, list, next, state) {\n\t\tlist.push(function(value) {\n\t\t\tif (typeof callback !== \"function\") next(value)\n\t\t\telse try {resolveNext(callback(value))} catch (e) {if (rejectNext) rejectNext(e)}\n\t\t})\n\t\tif (typeof instance.retry === \"function\" && state === instance.state) instance.retry()\n\t}\n\tvar resolveNext, rejectNext\n\tvar promise = new PromisePolyfill(function(resolve, reject) {resolveNext = resolve, rejectNext = reject})\n\thandle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false)\n\treturn promise\n}\nPromisePolyfill.prototype.catch = function(onRejection) {\n\treturn this.then(null, onRejection)\n}\nPromisePolyfill.resolve = function(value) {\n\tif (value instanceof PromisePolyfill) return value\n\treturn new PromisePolyfill(function(resolve) {resolve(value)})\n}\nPromisePolyfill.reject = function(value) {\n\treturn new PromisePolyfill(function(resolve, reject) {reject(value)})\n}\nPromisePolyfill.all = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tvar total = list.length, count = 0, values = []\n\t\tif (list.length === 0) resolve([])\n\t\telse for (var i = 0; i < list.length; i++) {\n\t\t\t(function(i) {\n\t\t\t\tfunction consume(value) {\n\t\t\t\t\tcount++\n\t\t\t\t\tvalues[i] = value\n\t\t\t\t\tif (count === total) resolve(values)\n\t\t\t\t}\n\t\t\t\tif (list[i] != null && (typeof list[i] === \"object\" || typeof list[i] === \"function\") && typeof list[i].then === \"function\") {\n\t\t\t\t\tlist[i].then(consume, reject)\n\t\t\t\t}\n\t\t\t\telse consume(list[i])\n\t\t\t})(i)\n\t\t}\n\t})\n}\nPromisePolyfill.race = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tlist[i].then(resolve, reject)\n\t\t}\n\t})\n}\nif (typeof window !== \"undefined\") {\n\tif (typeof window.Promise === \"undefined\") window.Promise = PromisePolyfill\n\tvar PromisePolyfill = window.Promise\n} else if (typeof global !== \"undefined\") {\n\tif (typeof global.Promise === \"undefined\") global.Promise = PromisePolyfill\n\tvar PromisePolyfill = global.Promise\n} else {\n}\nvar buildQueryString = function(object) {\n\tif (Object.prototype.toString.call(object) !== \"[object Object]\") return \"\"\n\tvar args = []\n\tfor (var key0 in object) {\n\t\tdestructure(key0, object[key0])\n\t}\n\treturn args.join(\"&\")\n\tfunction destructure(key0, value) {\n\t\tif (Array.isArray(value)) {\n\t\t\tfor (var i = 0; i < value.length; i++) {\n\t\t\t\tdestructure(key0 + \"[\" + i + \"]\", value[i])\n\t\t\t}\n\t\t}\n\t\telse if (Object.prototype.toString.call(value) === \"[object Object]\") {\n\t\t\tfor (var i in value) {\n\t\t\t\tdestructure(key0 + \"[\" + i + \"]\", value[i])\n\t\t\t}\n\t\t}\n\t\telse args.push(encodeURIComponent(key0) + (value != null && value !== \"\" ? \"=\" + encodeURIComponent(value) : \"\"))\n\t}\n}\nvar FILE_PROTOCOL_REGEX = new RegExp(\"^file://\", \"i\")\nvar _8 = function($window, Promise) {\n\tvar callbackCount = 0\n\tvar oncompletion\n\tfunction setCompletionCallback(callback) {oncompletion = callback}\n\tfunction finalizer() {\n\t\tvar count = 0\n\t\tfunction complete() {if (--count === 0 && typeof oncompletion === \"function\") oncompletion()}\n\t\treturn function finalize(promise0) {\n\t\t\tvar then0 = promise0.then\n\t\t\tpromise0.then = function() {\n\t\t\t\tcount++\n\t\t\t\tvar next = then0.apply(promise0, arguments)\n\t\t\t\tnext.then(complete, function(e) {\n\t\t\t\t\tcomplete()\n\t\t\t\t\tif (count === 0) throw e\n\t\t\t\t})\n\t\t\t\treturn finalize(next)\n\t\t\t}\n\t\t\treturn promise0\n\t\t}\n\t}\n\tfunction normalize(args, extra) {\n\t\tif (typeof args === \"string\") {\n\t\t\tvar url = args\n\t\t\targs = extra || {}\n\t\t\tif (args.url == null) args.url = url\n\t\t}\n\t\treturn args\n\t}\n\tfunction request(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tif (args.method == null) args.method = \"GET\"\n\t\t\targs.method = args.method.toUpperCase()\n\t\t\tvar useBody = (args.method === \"GET\" || args.method === \"TRACE\") ? false : (typeof args.useBody === \"boolean\" ? args.useBody : true)\n\t\t\tif (typeof args.serialize !== \"function\") args.serialize = typeof FormData !== \"undefined\" && args.data instanceof FormData ? function(value) {return value} : JSON.stringify\n\t\t\tif (typeof args.deserialize !== \"function\") args.deserialize = deserialize\n\t\t\tif (typeof args.extract !== \"function\") args.extract = extract\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\tif (useBody) args.data = args.serialize(args.data)\n\t\t\telse args.url = assemble(args.url, args.data)\n\t\t\tvar xhr = new $window.XMLHttpRequest(),\n\t\t\t\taborted = false,\n\t\t\t\t_abort = xhr.abort\n\t\t\txhr.abort = function abort() {\n\t\t\t\taborted = true\n\t\t\t\t_abort.call(xhr)\n\t\t\t}\n\t\t\txhr.open(args.method, args.url, typeof args.async === \"boolean\" ? args.async : true, typeof args.user === \"string\" ? args.user : undefined, typeof args.password === \"string\" ? args.password : undefined)\n\t\t\tif (args.serialize === JSON.stringify && useBody && !(args.headers && args.headers.hasOwnProperty(\"Content-Type\"))) {\n\t\t\t\txhr.setRequestHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n\t\t\t}\n\t\t\tif (args.deserialize === deserialize && !(args.headers && args.headers.hasOwnProperty(\"Accept\"))) {\n\t\t\t\txhr.setRequestHeader(\"Accept\", \"application/json, text/*\")\n\t\t\t}\n\t\t\tif (args.withCredentials) xhr.withCredentials = args.withCredentials\n\t\t\tfor (var key in args.headers) if ({}.hasOwnProperty.call(args.headers, key)) {\n\t\t\t\txhr.setRequestHeader(key, args.headers[key])\n\t\t\t}\n\t\t\tif (typeof args.config === \"function\") xhr = args.config(xhr, args) || xhr\n\t\t\txhr.onreadystatechange = function() {\n\t\t\t\t// Don't throw errors on xhr.abort().\n\t\t\t\tif(aborted) return\n\t\t\t\tif (xhr.readyState === 4) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar response = (args.extract !== extract) ? args.extract(xhr, args) : args.deserialize(args.extract(xhr, args))\n\t\t\t\t\t\tif ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304 || FILE_PROTOCOL_REGEX.test(args.url)) {\n\t\t\t\t\t\t\tresolve(cast(args.type, response))\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar error = new Error(xhr.responseText)\n\t\t\t\t\t\t\tfor (var key in response) error[key] = response[key]\n\t\t\t\t\t\t\treject(error)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\treject(e)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (useBody && (args.data != null)) xhr.send(args.data)\n\t\t\telse xhr.send()\n\t\t})\n\t\treturn args.background === true ? promise0 : finalize(promise0)\n\t}\n\tfunction jsonp(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tvar callbackName = args.callbackName || \"_mithril_\" + Math.round(Math.random() * 1e16) + \"_\" + callbackCount++\n\t\t\tvar script = $window.document.createElement(\"script\")\n\t\t\t$window[callbackName] = function(data) {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\tresolve(cast(args.type, data))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tscript.onerror = function() {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\treject(new Error(\"JSONP request failed\"))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tif (args.data == null) args.data = {}\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\targs.data[args.callbackKey || \"callback\"] = callbackName\n\t\t\tscript.src = assemble(args.url, args.data)\n\t\t\t$window.document.documentElement.appendChild(script)\n\t\t})\n\t\treturn args.background === true? promise0 : finalize(promise0)\n\t}\n\tfunction interpolate(url, data) {\n\t\tif (data == null) return url\n\t\tvar tokens = url.match(/:[^\\/]+/gi) || []\n\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\tvar key = tokens[i].slice(1)\n\t\t\tif (data[key] != null) {\n\t\t\t\turl = url.replace(tokens[i], data[key])\n\t\t\t}\n\t\t}\n\t\treturn url\n\t}\n\tfunction assemble(url, data) {\n\t\tvar querystring = buildQueryString(data)\n\t\tif (querystring !== \"\") {\n\t\t\tvar prefix = url.indexOf(\"?\") < 0 ? \"?\" : \"&\"\n\t\t\turl += prefix + querystring\n\t\t}\n\t\treturn url\n\t}\n\tfunction deserialize(data) {\n\t\ttry {return data !== \"\" ? JSON.parse(data) : null}\n\t\tcatch (e) {throw new Error(data)}\n\t}\n\tfunction extract(xhr) {return xhr.responseText}\n\tfunction cast(type0, data) {\n\t\tif (typeof type0 === \"function\") {\n\t\t\tif (Array.isArray(data)) {\n\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\tdata[i] = new type0(data[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\telse return new type0(data)\n\t\t}\n\t\treturn data\n\t}\n\treturn {request: request, jsonp: jsonp, setCompletionCallback: setCompletionCallback}\n}\nvar requestService = _8(window, PromisePolyfill)\nvar coreRenderer = function($window) {\n\tvar $doc = $window.document\n\tvar $emptyFragment = $doc.createDocumentFragment()\n\tvar nameSpace = {\n\t\tsvg: \"http://www.w3.org/2000/svg\",\n\t\tmath: \"http://www.w3.org/1998/Math/MathML\"\n\t}\n\tvar onevent\n\tfunction setEventCallback(callback) {return onevent = callback}\n\tfunction getNameSpace(vnode) {\n\t\treturn vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag]\n\t}\n\t//create\n\tfunction createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t}\n\tfunction createNode(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tif (typeof tag === \"string\") {\n\t\t\tvnode.state = {}\n\t\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tswitch (tag) {\n\t\t\t\tcase \"#\": return createText(parent, vnode, nextSibling)\n\t\t\t\tcase \"<\": return createHTML(parent, vnode, nextSibling)\n\t\t\t\tcase \"[\": return createFragment(parent, vnode, hooks, ns, nextSibling)\n\t\t\t\tdefault: return createElement(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t\telse return createComponent(parent, vnode, hooks, ns, nextSibling)\n\t}\n\tfunction createText(parent, vnode, nextSibling) {\n\t\tvnode.dom = $doc.createTextNode(vnode.children)\n\t\tinsertNode(parent, vnode.dom, nextSibling)\n\t\treturn vnode.dom\n\t}\n\tfunction createHTML(parent, vnode, nextSibling) {\n\t\tvar match1 = vnode.children.match(/^\\s*?<(\\w+)/im) || []\n\t\tvar parent1 = {caption: \"table\", thead: \"table\", tbody: \"table\", tfoot: \"table\", tr: \"tbody\", th: \"tr\", td: \"tr\", colgroup: \"table\", col: \"colgroup\"}[match1[1]] || \"div\"\n\t\tvar temp = $doc.createElement(parent1)\n\t\ttemp.innerHTML = vnode.children\n\t\tvnode.dom = temp.firstChild\n\t\tvnode.domSize = temp.childNodes.length\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tvar child\n\t\twhile (child = temp.firstChild) {\n\t\t\tfragment.appendChild(child)\n\t\t}\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createFragment(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tif (vnode.children != null) {\n\t\t\tvar children = vnode.children\n\t\t\tcreateNodes(fragment, children, 0, children.length, hooks, null, ns)\n\t\t}\n\t\tvnode.dom = fragment.firstChild\n\t\tvnode.domSize = fragment.childNodes.length\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createElement(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tvar attrs2 = vnode.attrs\n\t\tvar is = attrs2 && attrs2.is\n\t\tns = getNameSpace(vnode) || ns\n\t\tvar element = ns ?\n\t\t\tis ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :\n\t\t\tis ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)\n\t\tvnode.dom = element\n\t\tif (attrs2 != null) {\n\t\t\tsetAttrs(vnode, attrs2, ns)\n\t\t}\n\t\tinsertNode(parent, element, nextSibling)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse {\n\t\t\tif (vnode.text != null) {\n\t\t\t\tif (vnode.text !== \"\") element.textContent = vnode.text\n\t\t\t\telse vnode.children = [Vnode(\"#\", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\t}\n\t\t\tif (vnode.children != null) {\n\t\t\t\tvar children = vnode.children\n\t\t\t\tcreateNodes(element, children, 0, children.length, hooks, null, ns)\n\t\t\t\tsetLateAttrs(vnode)\n\t\t\t}\n\t\t}\n\t\treturn element\n\t}\n\tfunction initComponent(vnode, hooks) {\n\t\tvar sentinel\n\t\tif (typeof vnode.tag.view === \"function\") {\n\t\t\tvnode.state = Object.create(vnode.tag)\n\t\t\tsentinel = vnode.state.view\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t} else {\n\t\t\tvnode.state = void 0\n\t\t\tsentinel = vnode.tag\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t\tvnode.state = (vnode.tag.prototype != null && typeof vnode.tag.prototype.view === \"function\") ? new vnode.tag(vnode) : vnode.tag(vnode)\n\t\t}\n\t\tvnode._state = vnode.state\n\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\tinitLifecycle(vnode._state, vnode, hooks)\n\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\tif (vnode.instance === vnode) throw Error(\"A view cannot return the vnode it received as argument\")\n\t\tsentinel.$$reentrantLock$$ = null\n\t}\n\tfunction createComponent(parent, vnode, hooks, ns, nextSibling) {\n\t\tinitComponent(vnode, hooks)\n\t\tif (vnode.instance != null) {\n\t\t\tvar element = createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0\n\t\t\tinsertNode(parent, element, nextSibling)\n\t\t\treturn element\n\t\t}\n\t\telse {\n\t\t\tvnode.domSize = 0\n\t\t\treturn $emptyFragment\n\t\t}\n\t}\n\t//update\n\tfunction updateNodes(parent, old, vnodes, recycling, hooks, nextSibling, ns) {\n\t\tif (old === vnodes || old == null && vnodes == null) return\n\t\telse if (old == null) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns)\n\t\telse if (vnodes == null) removeNodes(old, 0, old.length, vnodes)\n\t\telse {\n\t\t\tif (old.length === vnodes.length) {\n\t\t\t\tvar isUnkeyed = false\n\t\t\t\tfor (var i = 0; i < vnodes.length; i++) {\n\t\t\t\t\tif (vnodes[i] != null && old[i] != null) {\n\t\t\t\t\t\tisUnkeyed = vnodes[i].key == null && old[i].key == null\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isUnkeyed) {\n\t\t\t\t\tfor (var i = 0; i < old.length; i++) {\n\t\t\t\t\t\tif (old[i] === vnodes[i]) continue\n\t\t\t\t\t\telse if (old[i] == null && vnodes[i] != null) createNode(parent, vnodes[i], hooks, ns, getNextSibling(old, i + 1, nextSibling))\n\t\t\t\t\t\telse if (vnodes[i] == null) removeNodes(old, i, i + 1, vnodes)\n\t\t\t\t\t\telse updateNode(parent, old[i], vnodes[i], hooks, getNextSibling(old, i + 1, nextSibling), recycling, ns)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\trecycling = recycling || isRecyclable(old, vnodes)\n\t\t\tif (recycling) {\n\t\t\t\tvar pool = old.pool\n\t\t\t\told = old.concat(old.pool)\n\t\t\t}\n\t\t\tvar oldStart = 0, start = 0, oldEnd = old.length - 1, end = vnodes.length - 1, map\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldStart], v = vnodes[start]\n\t\t\t\tif (o === v && !recycling) oldStart++, start++\n\t\t\t\telse if (o == null) oldStart++\n\t\t\t\telse if (v == null) start++\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldStart >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\toldStart++, start++\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar o = old[oldEnd]\n\t\t\t\t\tif (o === v && !recycling) oldEnd--, start++\n\t\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\t\telse if (v == null) start++\n\t\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\t\tif (recycling || start < end) insertNode(parent, toFragment(o), getNextSibling(old, oldStart, nextSibling))\n\t\t\t\t\t\toldEnd--, start++\n\t\t\t\t\t}\n\t\t\t\t\telse break\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldEnd], v = vnodes[end]\n\t\t\t\tif (o === v && !recycling) oldEnd--, end--\n\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\telse if (v == null) end--\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t\tif (o.dom != null) nextSibling = o.dom\n\t\t\t\t\toldEnd--, end--\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!map) map = getKeyMap(old, oldEnd)\n\t\t\t\t\tif (v != null) {\n\t\t\t\t\t\tvar oldIndex = map[v.key]\n\t\t\t\t\t\tif (oldIndex != null) {\n\t\t\t\t\t\t\tvar movable = old[oldIndex]\n\t\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldIndex >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\t\tupdateNode(parent, movable, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)\n\t\t\t\t\t\t\tinsertNode(parent, toFragment(movable), nextSibling)\n\t\t\t\t\t\t\told[oldIndex].skip = true\n\t\t\t\t\t\t\tif (movable.dom != null) nextSibling = movable.dom\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar dom = createNode(parent, v, hooks, ns, nextSibling)\n\t\t\t\t\t\t\tnextSibling = dom\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tend--\n\t\t\t\t}\n\t\t\t\tif (end < start) break\n\t\t\t}\n\t\t\tcreateNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)\n\t\t\tremoveNodes(old, oldStart, oldEnd + 1, vnodes)\n\t\t}\n\t}\n\tfunction updateNode(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tvar oldTag = old.tag, tag = vnode.tag\n\t\tif (oldTag === tag) {\n\t\t\tvnode.state = old.state\n\t\t\tvnode._state = old._state\n\t\t\tvnode.events = old.events\n\t\t\tif (!recycling && shouldNotUpdate(vnode, old)) return\n\t\t\tif (typeof oldTag === \"string\") {\n\t\t\t\tif (vnode.attrs != null) {\n\t\t\t\t\tif (recycling) {\n\t\t\t\t\t\tvnode.state = {}\n\t\t\t\t\t\tinitLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t\t}\n\t\t\t\t\telse updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t}\n\t\t\t\tswitch (oldTag) {\n\t\t\t\t\tcase \"#\": updateText(old, vnode); break\n\t\t\t\t\tcase \"<\": updateHTML(parent, old, vnode, nextSibling); break\n\t\t\t\t\tcase \"[\": updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns); break\n\t\t\t\t\tdefault: updateElement(old, vnode, recycling, hooks, ns)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns)\n\t\t}\n\t\telse {\n\t\t\tremoveNode(old, null)\n\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t}\n\t}\n\tfunction updateText(old, vnode) {\n\t\tif (old.children.toString() !== vnode.children.toString()) {\n\t\t\told.dom.nodeValue = vnode.children\n\t\t}\n\t\tvnode.dom = old.dom\n\t}\n\tfunction updateHTML(parent, old, vnode, nextSibling) {\n\t\tif (old.children !== vnode.children) {\n\t\t\ttoFragment(old)\n\t\t\tcreateHTML(parent, vnode, nextSibling)\n\t\t}\n\t\telse vnode.dom = old.dom, vnode.domSize = old.domSize\n\t}\n\tfunction updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns) {\n\t\tupdateNodes(parent, old.children, vnode.children, recycling, hooks, nextSibling, ns)\n\t\tvar domSize = 0, children = vnode.children\n\t\tvnode.dom = null\n\t\tif (children != null) {\n\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\tvar child = children[i]\n\t\t\t\tif (child != null && child.dom != null) {\n\t\t\t\t\tif (vnode.dom == null) vnode.dom = child.dom\n\t\t\t\t\tdomSize += child.domSize || 1\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (domSize !== 1) vnode.domSize = domSize\n\t\t}\n\t}\n\tfunction updateElement(old, vnode, recycling, hooks, ns) {\n\t\tvar element = vnode.dom = old.dom\n\t\tns = getNameSpace(vnode) || ns\n\t\tif (vnode.tag === \"textarea\") {\n\t\t\tif (vnode.attrs == null) vnode.attrs = {}\n\t\t\tif (vnode.text != null) {\n\t\t\t\tvnode.attrs.value = vnode.text //FIXME handle0 multiple children\n\t\t\t\tvnode.text = undefined\n\t\t\t}\n\t\t}\n\t\tupdateAttrs(vnode, old.attrs, vnode.attrs, ns)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse if (old.text != null && vnode.text != null && vnode.text !== \"\") {\n\t\t\tif (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text\n\t\t}\n\t\telse {\n\t\t\tif (old.text != null) old.children = [Vnode(\"#\", undefined, undefined, old.text, undefined, old.dom.firstChild)]\n\t\t\tif (vnode.text != null) vnode.children = [Vnode(\"#\", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\tupdateNodes(element, old.children, vnode.children, recycling, hooks, null, ns)\n\t\t}\n\t}\n\tfunction updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tif (recycling) {\n\t\t\tinitComponent(vnode, hooks)\n\t\t} else {\n\t\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\t\tif (vnode.instance === vnode) throw Error(\"A view cannot return the vnode it received as argument\")\n\t\t\tif (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tupdateLifecycle(vnode._state, vnode, hooks)\n\t\t}\n\t\tif (vnode.instance != null) {\n\t\t\tif (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\telse updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, recycling, ns)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.instance.domSize\n\t\t}\n\t\telse if (old.instance != null) {\n\t\t\tremoveNode(old.instance, null)\n\t\t\tvnode.dom = undefined\n\t\t\tvnode.domSize = 0\n\t\t}\n\t\telse {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t}\n\t}\n\tfunction isRecyclable(old, vnodes) {\n\t\tif (old.pool != null && Math.abs(old.pool.length - vnodes.length) <= Math.abs(old.length - vnodes.length)) {\n\t\t\tvar oldChildrenLength = old[0] && old[0].children && old[0].children.length || 0\n\t\t\tvar poolChildrenLength = old.pool[0] && old.pool[0].children && old.pool[0].children.length || 0\n\t\t\tvar vnodesChildrenLength = vnodes[0] && vnodes[0].children && vnodes[0].children.length || 0\n\t\t\tif (Math.abs(poolChildrenLength - vnodesChildrenLength) <= Math.abs(oldChildrenLength - vnodesChildrenLength)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\tfunction getKeyMap(vnodes, end) {\n\t\tvar map = {}, i = 0\n\t\tfor (var i = 0; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tvar key2 = vnode.key\n\t\t\t\tif (key2 != null) map[key2] = i\n\t\t\t}\n\t\t}\n\t\treturn map\n\t}\n\tfunction toFragment(vnode) {\n\t\tvar count0 = vnode.domSize\n\t\tif (count0 != null || vnode.dom == null) {\n\t\t\tvar fragment = $doc.createDocumentFragment()\n\t\t\tif (count0 > 0) {\n\t\t\t\tvar dom = vnode.dom\n\t\t\t\twhile (--count0) fragment.appendChild(dom.nextSibling)\n\t\t\t\tfragment.insertBefore(dom, fragment.firstChild)\n\t\t\t}\n\t\t\treturn fragment\n\t\t}\n\t\telse return vnode.dom\n\t}\n\tfunction getNextSibling(vnodes, i, nextSibling) {\n\t\tfor (; i < vnodes.length; i++) {\n\t\t\tif (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom\n\t\t}\n\t\treturn nextSibling\n\t}\n\tfunction insertNode(parent, dom, nextSibling) {\n\t\tif (nextSibling && nextSibling.parentNode) parent.insertBefore(dom, nextSibling)\n\t\telse parent.appendChild(dom)\n\t}\n\tfunction setContentEditable(vnode) {\n\t\tvar children = vnode.children\n\t\tif (children != null && children.length === 1 && children[0].tag === \"<\") {\n\t\t\tvar content = children[0].children\n\t\t\tif (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content\n\t\t}\n\t\telse if (vnode.text != null || children != null && children.length !== 0) throw new Error(\"Child node of a contenteditable must be trusted\")\n\t}\n\t//remove\n\tfunction removeNodes(vnodes, start, end, context) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tif (vnode.skip) vnode.skip = false\n\t\t\t\telse removeNode(vnode, context)\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNode(vnode, context) {\n\t\tvar expected = 1, called = 0\n\t\tif (vnode.attrs && typeof vnode.attrs.onbeforeremove === \"function\") {\n\t\t\tvar result = vnode.attrs.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === \"function\") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tif (typeof vnode.tag !== \"string\" && typeof vnode._state.onbeforeremove === \"function\") {\n\t\t\tvar result = vnode._state.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === \"function\") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tcontinuation()\n\t\tfunction continuation() {\n\t\t\tif (++called === expected) {\n\t\t\t\tonremove(vnode)\n\t\t\t\tif (vnode.dom) {\n\t\t\t\t\tvar count0 = vnode.domSize || 1\n\t\t\t\t\tif (count0 > 1) {\n\t\t\t\t\t\tvar dom = vnode.dom\n\t\t\t\t\t\twhile (--count0) {\n\t\t\t\t\t\t\tremoveNodeFromDOM(dom.nextSibling)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tremoveNodeFromDOM(vnode.dom)\n\t\t\t\t\tif (context != null && vnode.domSize == null && !hasIntegrationMethods(vnode.attrs) && typeof vnode.tag === \"string\") { //TODO test custom elements\n\t\t\t\t\t\tif (!context.pool) context.pool = [vnode]\n\t\t\t\t\t\telse context.pool.push(vnode)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNodeFromDOM(node) {\n\t\tvar parent = node.parentNode\n\t\tif (parent != null) parent.removeChild(node)\n\t}\n\tfunction onremove(vnode) {\n\t\tif (vnode.attrs && typeof vnode.attrs.onremove === \"function\") vnode.attrs.onremove.call(vnode.state, vnode)\n\t\tif (typeof vnode.tag !== \"string\") {\n\t\t\tif (typeof vnode._state.onremove === \"function\") vnode._state.onremove.call(vnode.state, vnode)\n\t\t\tif (vnode.instance != null) onremove(vnode.instance)\n\t\t} else {\n\t\t\tvar children = vnode.children\n\t\t\tif (Array.isArray(children)) {\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tvar child = children[i]\n\t\t\t\t\tif (child != null) onremove(child)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//attrs2\n\tfunction setAttrs(vnode, attrs2, ns) {\n\t\tfor (var key2 in attrs2) {\n\t\t\tsetAttr(vnode, key2, null, attrs2[key2], ns)\n\t\t}\n\t}\n\tfunction setAttr(vnode, key2, old, value, ns) {\n\t\tvar element = vnode.dom\n\t\tif (key2 === \"key\" || key2 === \"is\" || (old === value && !isFormAttribute(vnode, key2)) && typeof value !== \"object\" || typeof value === \"undefined\" || isLifecycleMethod(key2)) return\n\t\tvar nsLastIndex = key2.indexOf(\":\")\n\t\tif (nsLastIndex > -1 && key2.substr(0, nsLastIndex) === \"xlink\") {\n\t\t\telement.setAttributeNS(\"http://www.w3.org/1999/xlink\", key2.slice(nsLastIndex + 1), value)\n\t\t}\n\t\telse if (key2[0] === \"o\" && key2[1] === \"n\" && typeof value === \"function\") updateEvent(vnode, key2, value)\n\t\telse if (key2 === \"style\") updateStyle(element, old, value)\n\t\telse if (key2 in element && !isAttribute(key2) && ns === undefined && !isCustomElement(vnode)) {\n\t\t\tif (key2 === \"value\") {\n\t\t\t\tvar normalized0 = \"\" + value // eslint-disable-line no-implicit-coercion\n\t\t\t\t//setting input[value] to same value by typing on focused element moves cursor to end in Chrome\n\t\t\t\tif ((vnode.tag === \"input\" || vnode.tag === \"textarea\") && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return\n\t\t\t\t//setting select[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === \"select\") {\n\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\tif (vnode.dom.selectedIndex === -1 && vnode.dom === $doc.activeElement) return\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (old !== null && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//setting option[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === \"option\" && old != null && vnode.dom.value === normalized0) return\n\t\t\t}\n\t\t\t// If you assign an input type1 that is not supported by IE 11 with an assignment expression, an error0 will occur.\n\t\t\tif (vnode.tag === \"input\" && key2 === \"type\") {\n\t\t\t\telement.setAttribute(key2, value)\n\t\t\t\treturn\n\t\t\t}\n\t\t\telement[key2] = value\n\t\t}\n\t\telse {\n\t\t\tif (typeof value === \"boolean\") {\n\t\t\t\tif (value) element.setAttribute(key2, \"\")\n\t\t\t\telse element.removeAttribute(key2)\n\t\t\t}\n\t\t\telse element.setAttribute(key2 === \"className\" ? \"class\" : key2, value)\n\t\t}\n\t}\n\tfunction setLateAttrs(vnode) {\n\t\tvar attrs2 = vnode.attrs\n\t\tif (vnode.tag === \"select\" && attrs2 != null) {\n\t\t\tif (\"value\" in attrs2) setAttr(vnode, \"value\", null, attrs2.value, undefined)\n\t\t\tif (\"selectedIndex\" in attrs2) setAttr(vnode, \"selectedIndex\", null, attrs2.selectedIndex, undefined)\n\t\t}\n\t}\n\tfunction updateAttrs(vnode, old, attrs2, ns) {\n\t\tif (attrs2 != null) {\n\t\t\tfor (var key2 in attrs2) {\n\t\t\t\tsetAttr(vnode, key2, old && old[key2], attrs2[key2], ns)\n\t\t\t}\n\t\t}\n\t\tif (old != null) {\n\t\t\tfor (var key2 in old) {\n\t\t\t\tif (attrs2 == null || !(key2 in attrs2)) {\n\t\t\t\t\tif (key2 === \"className\") key2 = \"class\"\n\t\t\t\t\tif (key2[0] === \"o\" && key2[1] === \"n\" && !isLifecycleMethod(key2)) updateEvent(vnode, key2, undefined)\n\t\t\t\t\telse if (key2 !== \"key\") vnode.dom.removeAttribute(key2)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction isFormAttribute(vnode, attr) {\n\t\treturn attr === \"value\" || attr === \"checked\" || attr === \"selectedIndex\" || attr === \"selected\" && vnode.dom === $doc.activeElement\n\t}\n\tfunction isLifecycleMethod(attr) {\n\t\treturn attr === \"oninit\" || attr === \"oncreate\" || attr === \"onupdate\" || attr === \"onremove\" || attr === \"onbeforeremove\" || attr === \"onbeforeupdate\"\n\t}\n\tfunction isAttribute(attr) {\n\t\treturn attr === \"href\" || attr === \"list\" || attr === \"form\" || attr === \"width\" || attr === \"height\"// || attr === \"type\"\n\t}\n\tfunction isCustomElement(vnode){\n\t\treturn vnode.attrs.is || vnode.tag.indexOf(\"-\") > -1\n\t}\n\tfunction hasIntegrationMethods(source) {\n\t\treturn source != null && (source.oncreate || source.onupdate || source.onbeforeremove || source.onremove)\n\t}\n\t//style\n\tfunction updateStyle(element, old, style) {\n\t\tif (old === style) element.style.cssText = \"\", old = null\n\t\tif (style == null) element.style.cssText = \"\"\n\t\telse if (typeof style === \"string\") element.style.cssText = style\n\t\telse {\n\t\t\tif (typeof old === \"string\") element.style.cssText = \"\"\n\t\t\tfor (var key2 in style) {\n\t\t\t\telement.style[key2] = style[key2]\n\t\t\t}\n\t\t\tif (old != null && typeof old !== \"string\") {\n\t\t\t\tfor (var key2 in old) {\n\t\t\t\t\tif (!(key2 in style)) element.style[key2] = \"\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//event\n\tfunction updateEvent(vnode, key2, value) {\n\t\tvar element = vnode.dom\n\t\tvar callback = typeof onevent !== \"function\" ? value : function(e) {\n\t\t\tvar result = value.call(element, e)\n\t\t\tonevent.call(element, e)\n\t\t\treturn result\n\t\t}\n\t\tif (key2 in element) element[key2] = typeof value === \"function\" ? callback : null\n\t\telse {\n\t\t\tvar eventName = key2.slice(2)\n\t\t\tif (vnode.events === undefined) vnode.events = {}\n\t\t\tif (vnode.events[key2] === callback) return\n\t\t\tif (vnode.events[key2] != null) element.removeEventListener(eventName, vnode.events[key2], false)\n\t\t\tif (typeof value === \"function\") {\n\t\t\t\tvnode.events[key2] = callback\n\t\t\t\telement.addEventListener(eventName, vnode.events[key2], false)\n\t\t\t}\n\t\t}\n\t}\n\t//lifecycle\n\tfunction initLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.oninit === \"function\") source.oninit.call(vnode.state, vnode)\n\t\tif (typeof source.oncreate === \"function\") hooks.push(source.oncreate.bind(vnode.state, vnode))\n\t}\n\tfunction updateLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.onupdate === \"function\") hooks.push(source.onupdate.bind(vnode.state, vnode))\n\t}\n\tfunction shouldNotUpdate(vnode, old) {\n\t\tvar forceVnodeUpdate, forceComponentUpdate\n\t\tif (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === \"function\") forceVnodeUpdate = vnode.attrs.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (typeof vnode.tag !== \"string\" && typeof vnode._state.onbeforeupdate === \"function\") forceComponentUpdate = vnode._state.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (!(forceVnodeUpdate === undefined && forceComponentUpdate === undefined) && !forceVnodeUpdate && !forceComponentUpdate) {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t\tvnode.instance = old.instance\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\tfunction render(dom, vnodes) {\n\t\tif (!dom) throw new Error(\"Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.\")\n\t\tvar hooks = []\n\t\tvar active = $doc.activeElement\n\t\tvar namespace = dom.namespaceURI\n\t\t// First time0 rendering into a node clears it out\n\t\tif (dom.vnodes == null) dom.textContent = \"\"\n\t\tif (!Array.isArray(vnodes)) vnodes = [vnodes]\n\t\tupdateNodes(dom, dom.vnodes, Vnode.normalizeChildren(vnodes), false, hooks, null, namespace === \"http://www.w3.org/1999/xhtml\" ? undefined : namespace)\n\t\tdom.vnodes = vnodes\n\t\t// document.activeElement can return null in IE https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement\n\t\tif (active != null && $doc.activeElement !== active) active.focus()\n\t\tfor (var i = 0; i < hooks.length; i++) hooks[i]()\n\t}\n\treturn {render: render, setEventCallback: setEventCallback}\n}\nfunction throttle(callback) {\n\t//60fps translates to 16.6ms, round it down since setTimeout requires int\n\tvar time = 16\n\tvar last = 0, pending = null\n\tvar timeout = typeof requestAnimationFrame === \"function\" ? requestAnimationFrame : setTimeout\n\treturn function() {\n\t\tvar now = Date.now()\n\t\tif (last === 0 || now - last >= time) {\n\t\t\tlast = now\n\t\t\tcallback()\n\t\t}\n\t\telse if (pending === null) {\n\t\t\tpending = timeout(function() {\n\t\t\t\tpending = null\n\t\t\t\tcallback()\n\t\t\t\tlast = Date.now()\n\t\t\t}, time - (now - last))\n\t\t}\n\t}\n}\nvar _11 = function($window) {\n\tvar renderService = coreRenderer($window)\n\trenderService.setEventCallback(function(e) {\n\t\tif (e.redraw === false) e.redraw = undefined\n\t\telse redraw()\n\t})\n\tvar callbacks = []\n\tfunction subscribe(key1, callback) {\n\t\tunsubscribe(key1)\n\t\tcallbacks.push(key1, throttle(callback))\n\t}\n\tfunction unsubscribe(key1) {\n\t\tvar index = callbacks.indexOf(key1)\n\t\tif (index > -1) callbacks.splice(index, 2)\n\t}\n\tfunction redraw() {\n\t\tfor (var i = 1; i < callbacks.length; i += 2) {\n\t\t\tcallbacks[i]()\n\t\t}\n\t}\n\treturn {subscribe: subscribe, unsubscribe: unsubscribe, redraw: redraw, render: renderService.render}\n}\nvar redrawService = _11(window)\nrequestService.setCompletionCallback(redrawService.redraw)\nvar _16 = function(redrawService0) {\n\treturn function(root, component) {\n\t\tif (component === null) {\n\t\t\tredrawService0.render(root, [])\n\t\t\tredrawService0.unsubscribe(root)\n\t\t\treturn\n\t\t}\n\t\t\n\t\tif (component.view == null && typeof component !== \"function\") throw new Error(\"m.mount(element, component) expects a component, not a vnode\")\n\t\t\n\t\tvar run0 = function() {\n\t\t\tredrawService0.render(root, Vnode(component))\n\t\t}\n\t\tredrawService0.subscribe(root, run0)\n\t\tredrawService0.redraw()\n\t}\n}\nm.mount = _16(redrawService)\nvar Promise = PromisePolyfill\nvar parseQueryString = function(string) {\n\tif (string === \"\" || string == null) return {}\n\tif (string.charAt(0) === \"?\") string = string.slice(1)\n\tvar entries = string.split(\"&\"), data0 = {}, counters = {}\n\tfor (var i = 0; i < entries.length; i++) {\n\t\tvar entry = entries[i].split(\"=\")\n\t\tvar key5 = decodeURIComponent(entry[0])\n\t\tvar value = entry.length === 2 ? decodeURIComponent(entry[1]) : \"\"\n\t\tif (value === \"true\") value = true\n\t\telse if (value === \"false\") value = false\n\t\tvar levels = key5.split(/\\]\\[?|\\[/)\n\t\tvar cursor = data0\n\t\tif (key5.indexOf(\"[\") > -1) levels.pop()\n\t\tfor (var j = 0; j < levels.length; j++) {\n\t\t\tvar level = levels[j], nextLevel = levels[j + 1]\n\t\t\tvar isNumber = nextLevel == \"\" || !isNaN(parseInt(nextLevel, 10))\n\t\t\tvar isValue = j === levels.length - 1\n\t\t\tif (level === \"\") {\n\t\t\t\tvar key5 = levels.slice(0, j).join()\n\t\t\t\tif (counters[key5] == null) counters[key5] = 0\n\t\t\t\tlevel = counters[key5]++\n\t\t\t}\n\t\t\tif (cursor[level] == null) {\n\t\t\t\tcursor[level] = isValue ? value : isNumber ? [] : {}\n\t\t\t}\n\t\t\tcursor = cursor[level]\n\t\t}\n\t}\n\treturn data0\n}\nvar coreRouter = function($window) {\n\tvar supportsPushState = typeof $window.history.pushState === \"function\"\n\tvar callAsync0 = typeof setImmediate === \"function\" ? setImmediate : setTimeout\n\tfunction normalize1(fragment0) {\n\t\tvar data = $window.location[fragment0].replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent)\n\t\tif (fragment0 === \"pathname\" && data[0] !== \"/\") data = \"/\" + data\n\t\treturn data\n\t}\n\tvar asyncId\n\tfunction debounceAsync(callback0) {\n\t\treturn function() {\n\t\t\tif (asyncId != null) return\n\t\t\tasyncId = callAsync0(function() {\n\t\t\t\tasyncId = null\n\t\t\t\tcallback0()\n\t\t\t})\n\t\t}\n\t}\n\tfunction parsePath(path, queryData, hashData) {\n\t\tvar queryIndex = path.indexOf(\"?\")\n\t\tvar hashIndex = path.indexOf(\"#\")\n\t\tvar pathEnd = queryIndex > -1 ? queryIndex : hashIndex > -1 ? hashIndex : path.length\n\t\tif (queryIndex > -1) {\n\t\t\tvar queryEnd = hashIndex > -1 ? hashIndex : path.length\n\t\t\tvar queryParams = parseQueryString(path.slice(queryIndex + 1, queryEnd))\n\t\t\tfor (var key4 in queryParams) queryData[key4] = queryParams[key4]\n\t\t}\n\t\tif (hashIndex > -1) {\n\t\t\tvar hashParams = parseQueryString(path.slice(hashIndex + 1))\n\t\t\tfor (var key4 in hashParams) hashData[key4] = hashParams[key4]\n\t\t}\n\t\treturn path.slice(0, pathEnd)\n\t}\n\tvar router = {prefix: \"#!\"}\n\trouter.getPath = function() {\n\t\tvar type2 = router.prefix.charAt(0)\n\t\tswitch (type2) {\n\t\t\tcase \"#\": return normalize1(\"hash\").slice(router.prefix.length)\n\t\t\tcase \"?\": return normalize1(\"search\").slice(router.prefix.length) + normalize1(\"hash\")\n\t\t\tdefault: return normalize1(\"pathname\").slice(router.prefix.length) + normalize1(\"search\") + normalize1(\"hash\")\n\t\t}\n\t}\n\trouter.setPath = function(path, data, options) {\n\t\tvar queryData = {}, hashData = {}\n\t\tpath = parsePath(path, queryData, hashData)\n\t\tif (data != null) {\n\t\t\tfor (var key4 in data) queryData[key4] = data[key4]\n\t\t\tpath = path.replace(/:([^\\/]+)/g, function(match2, token) {\n\t\t\t\tdelete queryData[token]\n\t\t\t\treturn data[token]\n\t\t\t})\n\t\t}\n\t\tvar query = buildQueryString(queryData)\n\t\tif (query) path += \"?\" + query\n\t\tvar hash = buildQueryString(hashData)\n\t\tif (hash) path += \"#\" + hash\n\t\tif (supportsPushState) {\n\t\t\tvar state = options ? options.state : null\n\t\t\tvar title = options ? options.title : null\n\t\t\t$window.onpopstate()\n\t\t\tif (options && options.replace) $window.history.replaceState(state, title, router.prefix + path)\n\t\t\telse $window.history.pushState(state, title, router.prefix + path)\n\t\t}\n\t\telse $window.location.href = router.prefix + path\n\t}\n\trouter.defineRoutes = function(routes, resolve, reject) {\n\t\tfunction resolveRoute() {\n\t\t\tvar path = router.getPath()\n\t\t\tvar params = {}\n\t\t\tvar pathname = parsePath(path, params, params)\n\t\t\tvar state = $window.history.state\n\t\t\tif (state != null) {\n\t\t\t\tfor (var k in state) params[k] = state[k]\n\t\t\t}\n\t\t\tfor (var route0 in routes) {\n\t\t\t\tvar matcher = new RegExp(\"^\" + route0.replace(/:[^\\/]+?\\.{3}/g, \"(.*?)\").replace(/:[^\\/]+/g, \"([^\\\\/]+)\") + \"\\/?$\")\n\t\t\t\tif (matcher.test(pathname)) {\n\t\t\t\t\tpathname.replace(matcher, function() {\n\t\t\t\t\t\tvar keys = route0.match(/:[^\\/]+/g) || []\n\t\t\t\t\t\tvar values = [].slice.call(arguments, 1, -2)\n\t\t\t\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\t\t\t\tparams[keys[i].replace(/:|\\./g, \"\")] = decodeURIComponent(values[i])\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(routes[route0], params, path, route0)\n\t\t\t\t\t})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\treject(path, params)\n\t\t}\n\t\tif (supportsPushState) $window.onpopstate = debounceAsync(resolveRoute)\n\t\telse if (router.prefix.charAt(0) === \"#\") $window.onhashchange = resolveRoute\n\t\tresolveRoute()\n\t}\n\treturn router\n}\nvar _20 = function($window, redrawService0) {\n\tvar routeService = coreRouter($window)\n\tvar identity = function(v) {return v}\n\tvar render1, component, attrs3, currentPath, lastUpdate\n\tvar route = function(root, defaultRoute, routes) {\n\t\tif (root == null) throw new Error(\"Ensure the DOM element that was passed to `m.route` is not undefined\")\n\t\tvar run1 = function() {\n\t\t\tif (render1 != null) redrawService0.render(root, render1(Vnode(component, attrs3.key, attrs3)))\n\t\t}\n\t\tvar bail = function(path) {\n\t\t\tif (path !== defaultRoute) routeService.setPath(defaultRoute, null, {replace: true})\n\t\t\telse throw new Error(\"Could not resolve default route \" + defaultRoute)\n\t\t}\n\t\trouteService.defineRoutes(routes, function(payload, params, path) {\n\t\t\tvar update = lastUpdate = function(routeResolver, comp) {\n\t\t\t\tif (update !== lastUpdate) return\n\t\t\t\tcomponent = comp != null && (typeof comp.view === \"function\" || typeof comp === \"function\")? comp : \"div\"\n\t\t\t\tattrs3 = params, currentPath = path, lastUpdate = null\n\t\t\t\trender1 = (routeResolver.render || identity).bind(routeResolver)\n\t\t\t\trun1()\n\t\t\t}\n\t\t\tif (payload.view || typeof payload === \"function\") update({}, payload)\n\t\t\telse {\n\t\t\t\tif (payload.onmatch) {\n\t\t\t\t\tPromise.resolve(payload.onmatch(params, path)).then(function(resolved) {\n\t\t\t\t\t\tupdate(payload, resolved)\n\t\t\t\t\t}, bail)\n\t\t\t\t}\n\t\t\t\telse update(payload, \"div\")\n\t\t\t}\n\t\t}, bail)\n\t\tredrawService0.subscribe(root, run1)\n\t}\n\troute.set = function(path, data, options) {\n\t\tif (lastUpdate != null) {\n\t\t\toptions = options || {}\n\t\t\toptions.replace = true\n\t\t}\n\t\tlastUpdate = null\n\t\trouteService.setPath(path, data, options)\n\t}\n\troute.get = function() {return currentPath}\n\troute.prefix = function(prefix0) {routeService.prefix = prefix0}\n\troute.link = function(vnode1) {\n\t\tvnode1.dom.setAttribute(\"href\", routeService.prefix + vnode1.attrs.href)\n\t\tvnode1.dom.onclick = function(e) {\n\t\t\tif (e.ctrlKey || e.metaKey || e.shiftKey || e.which === 2) return\n\t\t\te.preventDefault()\n\t\t\te.redraw = false\n\t\t\tvar href = this.getAttribute(\"href\")\n\t\t\tif (href.indexOf(routeService.prefix) === 0) href = href.slice(routeService.prefix.length)\n\t\t\troute.set(href, undefined, undefined)\n\t\t}\n\t}\n\troute.param = function(key3) {\n\t\tif(typeof attrs3 !== \"undefined\" && typeof key3 !== \"undefined\") return attrs3[key3]\n\t\treturn attrs3\n\t}\n\treturn route\n}\nm.route = _20(window, redrawService)\nm.withAttr = function(attrName, callback1, context) {\n\treturn function(e) {\n\t\tcallback1.call(context || this, attrName in e.currentTarget ? e.currentTarget[attrName] : e.currentTarget.getAttribute(attrName))\n\t}\n}\nvar _28 = coreRenderer(window)\nm.render = _28.render\nm.redraw = redrawService.redraw\nm.request = requestService.request\nm.jsonp = requestService.jsonp\nm.parseQueryString = parseQueryString\nm.buildQueryString = buildQueryString\nm.version = \"1.1.6\"\nm.vnode = Vnode\nif (true) module[\"exports\"] = m\nelse window.m = m\n}());\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4).setImmediate, __webpack_require__(2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = __webpack_require__(7)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9zdHJlYW0uanM/YTYyYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCJcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9zdHJlYW0vc3RyZWFtXCIpXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9taXRocmlsL3N0cmVhbS5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\n} catch(e) {\n\t// This works if the window reference is available\n\tif(typeof window === \"object\")\n\t\tg = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2goZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxuXHRcdGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar m = __webpack_require__(0);\nvar Stream = __webpack_require__(1);\n\nvar style = __webpack_require__(8);\n\nvar audioMixer = __webpack_require__(9);\n\nvar CreateTrack = __webpack_require__(11);\nvar TrackList = __webpack_require__(13);\n\nvar Interface = {\n  view: view, oninit: oninit\n};\n\nvar mix = new audioMixer.default.Mixer();\nwindow.mix = mix;\n\n// dummyTracks()\n\n// DUMMY\nfunction dummyTracks() {\n  mix.tracks = function () {\n    return [{\n      options: { id: 'test a' },\n      paused: function paused() {\n        return true;\n      },\n      play: function play() {\n        return true;\n      },\n      on: function on() {\n        return true;\n      },\n      gain: function gain() {\n        return 1;\n      }\n    }, {\n      options: { id: 'test b' },\n      paused: function paused() {\n        return true;\n      },\n      play: function play() {\n        return true;\n      },\n      on: function on() {\n        return true;\n      },\n      gain: function gain() {\n        return 1;\n      }\n    }];\n  };\n}\n\nm.mount(document.querySelector('.container'), Interface);\n\nfunction oninit(vnode) {\n  var state = this;\n\n  state.tracks = Stream([]);\n\n  state.processFile = function (src) {\n    console.log(src);\n  };\n}\n\nfunction view(vnode) {\n  var state = this;\n\n  return [m('h3', ['Audio Mixer Demo']), m('section.create', [m('.row', [m('header', 'Create Track')]), m(CreateTrack, { mix: mix })]),\n\n  // m('section.mix', [\n  //   m('header', 'Mix Controls'),\n  //   m(MixControls, { mix: mix })\n  // ]),\n\n  m('section.tracks', [m('.row', [m('header', 'Tracks')]), m(TrackList, { mix: mix })])];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL2pzL2RlbW8uanM/Njk3NSJdLCJuYW1lcyI6WyJtIiwicmVxdWlyZSIsIlN0cmVhbSIsInN0eWxlIiwiYXVkaW9NaXhlciIsIkNyZWF0ZVRyYWNrIiwiVHJhY2tMaXN0IiwiSW50ZXJmYWNlIiwidmlldyIsIm9uaW5pdCIsIm1peCIsImRlZmF1bHQiLCJNaXhlciIsIndpbmRvdyIsImR1bW15VHJhY2tzIiwidHJhY2tzIiwib3B0aW9ucyIsImlkIiwicGF1c2VkIiwicGxheSIsIm9uIiwiZ2FpbiIsIm1vdW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidm5vZGUiLCJzdGF0ZSIsInByb2Nlc3NGaWxlIiwic3JjIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxJQUFJLG1CQUFBQyxDQUFRLENBQVIsQ0FBVjtBQUNBLElBQU1DLFNBQVMsbUJBQUFELENBQVEsQ0FBUixDQUFmOztBQUVBLElBQU1FLFFBQVEsbUJBQUFGLENBQVEsQ0FBUixDQUFkOztBQUVBLElBQU1HLGFBQWEsbUJBQUFILENBQVEsQ0FBUixDQUFuQjs7QUFFQSxJQUFNSSxjQUFjLG1CQUFBSixDQUFRLEVBQVIsQ0FBcEI7QUFDQSxJQUFNSyxZQUFZLG1CQUFBTCxDQUFRLEVBQVIsQ0FBbEI7O0FBRUEsSUFBSU0sWUFBWTtBQUNkQyxZQURjLEVBQ1JDO0FBRFEsQ0FBaEI7O0FBSUEsSUFBSUMsTUFBTSxJQUFJTixXQUFXTyxPQUFYLENBQW1CQyxLQUF2QixFQUFWO0FBQ0FDLE9BQU9ILEdBQVAsR0FBYUEsR0FBYjs7QUFFQTs7QUFFQTtBQUNBLFNBQVNJLFdBQVQsR0FBc0I7QUFDcEJKLE1BQUlLLE1BQUosR0FBYSxZQUFVO0FBQ3JCLFdBQU8sQ0FDTDtBQUNFQyxlQUFTLEVBQUVDLElBQUksUUFBTixFQURYO0FBRUVDLGNBQVE7QUFBQSxlQUFNLElBQU47QUFBQSxPQUZWO0FBR0VDLFlBQU07QUFBQSxlQUFNLElBQU47QUFBQSxPQUhSO0FBSUVDLFVBQUk7QUFBQSxlQUFNLElBQU47QUFBQSxPQUpOO0FBS0VDLFlBQU07QUFBQSxlQUFNLENBQU47QUFBQTtBQUxSLEtBREssRUFRTDtBQUNFTCxlQUFTLEVBQUVDLElBQUksUUFBTixFQURYO0FBRUVDLGNBQVE7QUFBQSxlQUFNLElBQU47QUFBQSxPQUZWO0FBR0VDLFlBQU07QUFBQSxlQUFNLElBQU47QUFBQSxPQUhSO0FBSUVDLFVBQUk7QUFBQSxlQUFNLElBQU47QUFBQSxPQUpOO0FBS0VDLFlBQU07QUFBQSxlQUFNLENBQU47QUFBQTtBQUxSLEtBUkssQ0FBUDtBQWdCRCxHQWpCRDtBQWtCRDs7QUFHRHJCLEVBQUVzQixLQUFGLENBQVFDLFNBQVNDLGFBQVQsQ0FBdUIsWUFBdkIsQ0FBUixFQUE4Q2pCLFNBQTlDOztBQUdBLFNBQVNFLE1BQVQsQ0FBZ0JnQixLQUFoQixFQUFzQjtBQUNwQixNQUFJQyxRQUFRLElBQVo7O0FBRUFBLFFBQU1YLE1BQU4sR0FBZWIsT0FBTyxFQUFQLENBQWY7O0FBRUF3QixRQUFNQyxXQUFOLEdBQW9CLFVBQVNDLEdBQVQsRUFBYTtBQUMvQkMsWUFBUUMsR0FBUixDQUFZRixHQUFaO0FBQ0QsR0FGRDtBQUdEOztBQUVELFNBQVNwQixJQUFULENBQWNpQixLQUFkLEVBQW9CO0FBQ2xCLE1BQUlDLFFBQVEsSUFBWjs7QUFFQSxTQUFPLENBRUwxQixFQUFFLElBQUYsRUFBUSxDQUFFLGtCQUFGLENBQVIsQ0FGSyxFQUlMQSxFQUFFLGdCQUFGLEVBQW9CLENBQ2xCQSxFQUFFLE1BQUYsRUFBVSxDQUNSQSxFQUFFLFFBQUYsRUFBWSxjQUFaLENBRFEsQ0FBVixDQURrQixFQUlsQkEsRUFBRUssV0FBRixFQUFlLEVBQUVLLFFBQUYsRUFBZixDQUprQixDQUFwQixDQUpLOztBQVdMO0FBQ0E7QUFDQTtBQUNBOztBQUVBVixJQUFFLGdCQUFGLEVBQW9CLENBRWxCQSxFQUFFLE1BQUYsRUFBVSxDQUNSQSxFQUFFLFFBQUYsRUFBWSxRQUFaLENBRFEsQ0FBVixDQUZrQixFQU1sQkEsRUFBRU0sU0FBRixFQUFhLEVBQUVJLFFBQUYsRUFBYixDQU5rQixDQUFwQixDQWhCSyxDQUFQO0FBMkJEIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtID0gcmVxdWlyZSgnbWl0aHJpbCcpXG5jb25zdCBTdHJlYW0gPSByZXF1aXJlKCdtaXRocmlsL3N0cmVhbScpXG5cbmNvbnN0IHN0eWxlID0gcmVxdWlyZSgnLi4vc3R5bGUuc2FzcycpXG5cbmNvbnN0IGF1ZGlvTWl4ZXIgPSByZXF1aXJlKCcuLi8uLi9hdWRpb01peGVyJylcblxuY29uc3QgQ3JlYXRlVHJhY2sgPSByZXF1aXJlKCdtb2R1bGVzL2NyZWF0ZVRyYWNrJylcbmNvbnN0IFRyYWNrTGlzdCA9IHJlcXVpcmUoJ21vZHVsZXMvdHJhY2tMaXN0JylcblxubGV0IEludGVyZmFjZSA9IHtcbiAgdmlldywgb25pbml0XG59XG5cbnZhciBtaXggPSBuZXcgYXVkaW9NaXhlci5kZWZhdWx0Lk1peGVyKClcbndpbmRvdy5taXggPSBtaXhcblxuLy8gZHVtbXlUcmFja3MoKVxuXG4vLyBEVU1NWVxuZnVuY3Rpb24gZHVtbXlUcmFja3MoKXtcbiAgbWl4LnRyYWNrcyA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIFtcbiAgICAgIHtcbiAgICAgICAgb3B0aW9uczogeyBpZDogJ3Rlc3QgYScgfSxcbiAgICAgICAgcGF1c2VkOiAoKSA9PiB0cnVlLFxuICAgICAgICBwbGF5OiAoKSA9PiB0cnVlLFxuICAgICAgICBvbjogKCkgPT4gdHJ1ZSxcbiAgICAgICAgZ2FpbjogKCkgPT4gMSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG9wdGlvbnM6IHsgaWQ6ICd0ZXN0IGInIH0sXG4gICAgICAgIHBhdXNlZDogKCkgPT4gdHJ1ZSxcbiAgICAgICAgcGxheTogKCkgPT4gdHJ1ZSxcbiAgICAgICAgb246ICgpID0+IHRydWUsXG4gICAgICAgIGdhaW46ICgpID0+IDEsXG4gICAgICB9XG4gICAgXVxuICB9XG59XG5cblxubS5tb3VudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGFpbmVyJyksIEludGVyZmFjZSlcblxuXG5mdW5jdGlvbiBvbmluaXQodm5vZGUpe1xuICBsZXQgc3RhdGUgPSB0aGlzXG5cbiAgc3RhdGUudHJhY2tzID0gU3RyZWFtKFtdKVxuXG4gIHN0YXRlLnByb2Nlc3NGaWxlID0gZnVuY3Rpb24oc3JjKXtcbiAgICBjb25zb2xlLmxvZyhzcmMpXG4gIH1cbn1cblxuZnVuY3Rpb24gdmlldyh2bm9kZSl7XG4gIGxldCBzdGF0ZSA9IHRoaXNcblxuICByZXR1cm4gW1xuXG4gICAgbSgnaDMnLCBbICdBdWRpbyBNaXhlciBEZW1vJyBdKSxcblxuICAgIG0oJ3NlY3Rpb24uY3JlYXRlJywgW1xuICAgICAgbSgnLnJvdycsIFtcbiAgICAgICAgbSgnaGVhZGVyJywgJ0NyZWF0ZSBUcmFjaycpLFxuICAgICAgXSksXG4gICAgICBtKENyZWF0ZVRyYWNrLCB7IG1peCB9KVxuICAgIF0pLFxuXG4gICAgLy8gbSgnc2VjdGlvbi5taXgnLCBbXG4gICAgLy8gICBtKCdoZWFkZXInLCAnTWl4IENvbnRyb2xzJyksXG4gICAgLy8gICBtKE1peENvbnRyb2xzLCB7IG1peDogbWl4IH0pXG4gICAgLy8gXSksXG5cbiAgICBtKCdzZWN0aW9uLnRyYWNrcycsIFtcblxuICAgICAgbSgnLnJvdycsIFtcbiAgICAgICAgbSgnaGVhZGVyJywgJ1RyYWNrcycpLFxuICAgICAgXSksXG5cbiAgICAgIG0oVHJhY2tMaXN0LCB7IG1peCB9KSxcblxuICAgIF0pLFxuICBdXG5cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9kZW1vL2pzL2RlbW8uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(5);\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz9kN2FkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(6)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable */\n;(function() {\n\"use strict\"\n/* eslint-enable */\n\nvar guid = 0, HALT = {}\nfunction createStream() {\n\tfunction stream() {\n\t\tif (arguments.length > 0 && arguments[0] !== HALT) updateStream(stream, arguments[0])\n\t\treturn stream._state.value\n\t}\n\tinitStream(stream)\n\n\tif (arguments.length > 0 && arguments[0] !== HALT) updateStream(stream, arguments[0])\n\n\treturn stream\n}\nfunction initStream(stream) {\n\tstream.constructor = createStream\n\tstream._state = {id: guid++, value: undefined, state: 0, derive: undefined, recover: undefined, deps: {}, parents: [], endStream: undefined, unregister: undefined}\n\tstream.map = stream[\"fantasy-land/map\"] = map, stream[\"fantasy-land/ap\"] = ap, stream[\"fantasy-land/of\"] = createStream\n\tstream.valueOf = valueOf, stream.toJSON = toJSON, stream.toString = valueOf\n\n\tObject.defineProperties(stream, {\n\t\tend: {get: function() {\n\t\t\tif (!stream._state.endStream) {\n\t\t\t\tvar endStream = createStream()\n\t\t\t\tendStream.map(function(value) {\n\t\t\t\t\tif (value === true) {\n\t\t\t\t\t\tunregisterStream(stream)\n\t\t\t\t\t\tendStream._state.unregister = function(){unregisterStream(endStream)}\n\t\t\t\t\t}\n\t\t\t\t\treturn value\n\t\t\t\t})\n\t\t\t\tstream._state.endStream = endStream\n\t\t\t}\n\t\t\treturn stream._state.endStream\n\t\t}}\n\t})\n}\nfunction updateStream(stream, value) {\n\tupdateState(stream, value)\n\tfor (var id in stream._state.deps) updateDependency(stream._state.deps[id], false)\n\tif (stream._state.unregister != null) stream._state.unregister()\n\tfinalize(stream)\n}\nfunction updateState(stream, value) {\n\tstream._state.value = value\n\tstream._state.changed = true\n\tif (stream._state.state !== 2) stream._state.state = 1\n}\nfunction updateDependency(stream, mustSync) {\n\tvar state = stream._state, parents = state.parents\n\tif (parents.length > 0 && parents.every(active) && (mustSync || parents.some(changed))) {\n\t\tvar value = stream._state.derive()\n\t\tif (value === HALT) return false\n\t\tupdateState(stream, value)\n\t}\n}\nfunction finalize(stream) {\n\tstream._state.changed = false\n\tfor (var id in stream._state.deps) stream._state.deps[id]._state.changed = false\n}\n\nfunction combine(fn, streams) {\n\tif (!streams.every(valid)) throw new Error(\"Ensure that each item passed to stream.combine/stream.merge is a stream\")\n\treturn initDependency(createStream(), streams, function() {\n\t\treturn fn.apply(this, streams.concat([streams.filter(changed)]))\n\t})\n}\n\nfunction initDependency(dep, streams, derive) {\n\tvar state = dep._state\n\tstate.derive = derive\n\tstate.parents = streams.filter(notEnded)\n\n\tregisterDependency(dep, state.parents)\n\tupdateDependency(dep, true)\n\n\treturn dep\n}\nfunction registerDependency(stream, parents) {\n\tfor (var i = 0; i < parents.length; i++) {\n\t\tparents[i]._state.deps[stream._state.id] = stream\n\t\tregisterDependency(stream, parents[i]._state.parents)\n\t}\n}\nfunction unregisterStream(stream) {\n\tfor (var i = 0; i < stream._state.parents.length; i++) {\n\t\tvar parent = stream._state.parents[i]\n\t\tdelete parent._state.deps[stream._state.id]\n\t}\n\tfor (var id in stream._state.deps) {\n\t\tvar dependent = stream._state.deps[id]\n\t\tvar index = dependent._state.parents.indexOf(stream)\n\t\tif (index > -1) dependent._state.parents.splice(index, 1)\n\t}\n\tstream._state.state = 2 //ended\n\tstream._state.deps = {}\n}\n\nfunction map(fn) {return combine(function(stream) {return fn(stream())}, [this])}\nfunction ap(stream) {return combine(function(s1, s2) {return s1()(s2())}, [stream, this])}\nfunction valueOf() {return this._state.value}\nfunction toJSON() {return this._state.value != null && typeof this._state.value.toJSON === \"function\" ? this._state.value.toJSON() : this._state.value}\n\nfunction valid(stream) {return stream._state }\nfunction active(stream) {return stream._state.state === 1}\nfunction changed(stream) {return stream._state.changed}\nfunction notEnded(stream) {return stream._state.state !== 2}\n\nfunction merge(streams) {\n\treturn combine(function() {\n\t\treturn streams.map(function(s) {return s()})\n\t}, streams)\n}\n\nfunction scan(reducer, seed, stream) {\n\tvar newStream = combine(function (s) {\n\t\treturn seed = reducer(seed, s._state.value)\n\t}, [stream])\n\n\tif (newStream._state.state === 0) newStream(seed)\n\n\treturn newStream\n}\n\nfunction scanMerge(tuples, seed) {\n\tvar streams = tuples.map(function(tuple) {\n\t\tvar stream = tuple[0]\n\t\tif (stream._state.state === 0) stream(undefined)\n\t\treturn stream\n\t})\n\n\tvar newStream = combine(function() {\n\t\tvar changed = arguments[arguments.length - 1]\n\n\t\tstreams.forEach(function(stream, idx) {\n\t\t\tif (changed.indexOf(stream) > -1) {\n\t\t\t\tseed = tuples[idx][1](seed, stream._state.value)\n\t\t\t}\n\t\t})\n\n\t\treturn seed\n\t}, streams)\n\n\treturn newStream\n}\n\ncreateStream[\"fantasy-land/of\"] = createStream\ncreateStream.merge = merge\ncreateStream.combine = combine\ncreateStream.scan = scan\ncreateStream.scanMerge = scanMerge\ncreateStream.HALT = HALT\n\nif (true) module[\"exports\"] = createStream\nelse if (typeof window.m === \"function\" && !(\"stream\" in window.m)) window.m.stream = createStream\nelse window.m = {stream : createStream}\n\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

eval("// removed by extract-text-webpack-plugin\n    if(false) {\n      // 1517867068613\n      var cssReload = require(\"../node_modules/css-hot-loader/hotModuleReplacement.js\")(module.id, {\"fileMap\":\"{fileName}\"});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL3N0eWxlLnNhc3M/ZDcxNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQSxvR0FBb0csWUFBWSxTQUFTLEVBQUU7QUFDM0g7QUFDQTtBQUNBIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1MTc4NjcwNjg2MTNcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1ob3QtbG9hZGVyL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wiZmlsZU1hcFwiOlwie2ZpbGVOYW1lfVwifSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTtcbiAgICB9XG4gIFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vZGVtby9zdHlsZS5zYXNzXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif (( false ? 'undefined' : _typeof(exports)) === 'object' && ( false ? 'undefined' : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') exports[\"audioMixer\"] = factory();else root[\"audioMixer\"] = factory();\n})(undefined, function () {\n\treturn (/******/function (modules) {\n\t\t\t// webpackBootstrap\n\t\t\t/******/ // The module cache\n\t\t\t/******/var installedModules = {};\n\t\t\t/******/\n\t\t\t/******/ // The require function\n\t\t\t/******/function __webpack_require__(moduleId) {\n\t\t\t\t/******/\n\t\t\t\t/******/ // Check if module is in cache\n\t\t\t\t/******/if (installedModules[moduleId]) {\n\t\t\t\t\t/******/return installedModules[moduleId].exports;\n\t\t\t\t\t/******/\n\t\t\t\t}\n\t\t\t\t/******/ // Create a new module (and put it into the cache)\n\t\t\t\t/******/var module = installedModules[moduleId] = {\n\t\t\t\t\t/******/i: moduleId,\n\t\t\t\t\t/******/l: false,\n\t\t\t\t\t/******/exports: {}\n\t\t\t\t\t/******/ };\n\t\t\t\t/******/\n\t\t\t\t/******/ // Execute the module function\n\t\t\t\t/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\t\t\t/******/\n\t\t\t\t/******/ // Flag the module as loaded\n\t\t\t\t/******/module.l = true;\n\t\t\t\t/******/\n\t\t\t\t/******/ // Return the exports of the module\n\t\t\t\t/******/return module.exports;\n\t\t\t\t/******/\n\t\t\t}\n\t\t\t/******/\n\t\t\t/******/\n\t\t\t/******/ // expose the modules object (__webpack_modules__)\n\t\t\t/******/__webpack_require__.m = modules;\n\t\t\t/******/\n\t\t\t/******/ // expose the module cache\n\t\t\t/******/__webpack_require__.c = installedModules;\n\t\t\t/******/\n\t\t\t/******/ // define getter function for harmony exports\n\t\t\t/******/__webpack_require__.d = function (exports, name, getter) {\n\t\t\t\t/******/if (!__webpack_require__.o(exports, name)) {\n\t\t\t\t\t/******/Object.defineProperty(exports, name, {\n\t\t\t\t\t\t/******/configurable: false,\n\t\t\t\t\t\t/******/enumerable: true,\n\t\t\t\t\t\t/******/get: getter\n\t\t\t\t\t\t/******/ });\n\t\t\t\t\t/******/\n\t\t\t\t}\n\t\t\t\t/******/\n\t\t\t};\n\t\t\t/******/\n\t\t\t/******/ // getDefaultExport function for compatibility with non-harmony modules\n\t\t\t/******/__webpack_require__.n = function (module) {\n\t\t\t\t/******/var getter = module && module.__esModule ?\n\t\t\t\t/******/function getDefault() {\n\t\t\t\t\treturn module['default'];\n\t\t\t\t} :\n\t\t\t\t/******/function getModuleExports() {\n\t\t\t\t\treturn module;\n\t\t\t\t};\n\t\t\t\t/******/__webpack_require__.d(getter, 'a', getter);\n\t\t\t\t/******/return getter;\n\t\t\t\t/******/\n\t\t\t};\n\t\t\t/******/\n\t\t\t/******/ // Object.prototype.hasOwnProperty.call\n\t\t\t/******/__webpack_require__.o = function (object, property) {\n\t\t\t\treturn Object.prototype.hasOwnProperty.call(object, property);\n\t\t\t};\n\t\t\t/******/\n\t\t\t/******/ // __webpack_public_path__\n\t\t\t/******/__webpack_require__.p = \"\";\n\t\t\t/******/\n\t\t\t/******/ // Load entry module and return exports\n\t\t\t/******/return __webpack_require__(__webpack_require__.s = 5);\n\t\t\t/******/\n\t\t}(\n\t\t/************************************************************************/\n\t\t/******/[\n\t\t/* 0 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nfunction normalize(value) {\\n  if (value > 1) return 1;\\n  if (value < 0) return 0;\\n  return value;\\n}\\n\\nfunction timeFormat(seconds) {\\n  var m = Math.floor(seconds / 60) < 10 ? '0' + Math.floor(seconds / 60) : Math.floor(seconds / 60);\\n  var s = Math.floor(seconds - m * 60) < 10 ? '0' + Math.floor(seconds - m * 60) : Math.floor(seconds - m * 60);\\n  return m + ':' + s;\\n}\\n\\nfunction lerp(start, end, now) {\\n  return (1 - now) * start + now * end;\\n}\\n\\nmodule.exports = { normalize: normalize, timeFormat: timeFormat, lerp: lerp };//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy91dGlscy5qcz9lYTU4Il0sIm5hbWVzIjpbIm5vcm1hbGl6ZSIsInZhbHVlIiwidGltZUZvcm1hdCIsInNlY29uZHMiLCJtIiwiTWF0aCIsImZsb29yIiwicyIsImxlcnAiLCJzdGFydCIsImVuZCIsIm5vdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQ0EsU0FBU0EsU0FBVCxDQUFtQkMsS0FBbkIsRUFBeUI7QUFDdkIsTUFBR0EsUUFBUSxDQUFYLEVBQWMsT0FBTyxDQUFQO0FBQ2QsTUFBR0EsUUFBUSxDQUFYLEVBQWMsT0FBTyxDQUFQO0FBQ2QsU0FBT0EsS0FBUDtBQUNEOztBQUVELFNBQVNDLFVBQVQsQ0FBb0JDLE9BQXBCLEVBQTZCO0FBQzNCLE1BQUlDLElBQUlDLEtBQUtDLEtBQUwsQ0FBV0gsVUFBVSxFQUFyQixJQUEyQixFQUEzQixHQUFnQyxNQUFNRSxLQUFLQyxLQUFMLENBQVdILFVBQVUsRUFBckIsQ0FBdEMsR0FBaUVFLEtBQUtDLEtBQUwsQ0FBV0gsVUFBVSxFQUFyQixDQUF6RTtBQUNBLE1BQUlJLElBQUlGLEtBQUtDLEtBQUwsQ0FBV0gsVUFBV0MsSUFBSSxFQUExQixJQUFpQyxFQUFqQyxHQUFzQyxNQUFNQyxLQUFLQyxLQUFMLENBQVdILFVBQVdDLElBQUksRUFBMUIsQ0FBNUMsR0FBNkVDLEtBQUtDLEtBQUwsQ0FBV0gsVUFBV0MsSUFBSSxFQUExQixDQUFyRjtBQUNBLFNBQU9BLElBQUksR0FBSixHQUFVRyxDQUFqQjtBQUNEOztBQUVELFNBQVNDLElBQVQsQ0FBY0MsS0FBZCxFQUFxQkMsR0FBckIsRUFBMEJDLEdBQTFCLEVBQStCO0FBQzdCLFNBQU8sQ0FBQyxJQUFJQSxHQUFMLElBQVlGLEtBQVosR0FBb0JFLE1BQU1ELEdBQWpDO0FBQ0Q7O0FBRURFLE9BQU9DLE9BQVAsR0FBaUIsRUFBRWIsb0JBQUYsRUFBYUUsc0JBQWIsRUFBeUJNLFVBQXpCLEVBQWpCIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWx1ZSl7XG4gIGlmKHZhbHVlID4gMSkgcmV0dXJuIDFcbiAgaWYodmFsdWUgPCAwKSByZXR1cm4gMFxuICByZXR1cm4gdmFsdWVcbn1cblxuZnVuY3Rpb24gdGltZUZvcm1hdChzZWNvbmRzKSB7XG4gIHZhciBtID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gNjApIDwgMTAgPyAnMCcgKyBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCkgOiBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCk7XG4gIHZhciBzID0gTWF0aC5mbG9vcihzZWNvbmRzIC0gKG0gKiA2MCkpIDwgMTAgPyAnMCcgKyBNYXRoLmZsb29yKHNlY29uZHMgLSAobSAqIDYwKSkgOiBNYXRoLmZsb29yKHNlY29uZHMgLSAobSAqIDYwKSk7XG4gIHJldHVybiBtICsgJzonICsgcztcbn1cblxuZnVuY3Rpb24gbGVycChzdGFydCwgZW5kLCBub3cpIHtcbiAgcmV0dXJuICgxIC0gbm93KSAqIHN0YXJ0ICsgbm93ICogZW5kO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgbm9ybWFsaXplLCB0aW1lRm9ybWF0LCBsZXJwIH1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL3V0aWxzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///0\\n\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 1 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _GainNode = __webpack_require__(9);\\n\\nvar _GainNode2 = _interopRequireDefault(_GainNode);\\n\\nvar _PannerNode2D = __webpack_require__(10);\\n\\nvar _PannerNode2D2 = _interopRequireDefault(_PannerNode2D);\\n\\nvar _PannerNode = __webpack_require__(11);\\n\\nvar _PannerNode2 = _interopRequireDefault(_PannerNode);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nexports.default = { GainNode: _GainNode2.default, PannerNode2D: _PannerNode2D2.default, PannerNode: _PannerNode2.default }; /*\\n                                                                                                                            \\n                                                                                                                              Gather all nodes in a single export.\\n                                                                                                                            \\n                                                                                                                              All nodes must implement this API:\\n                                                                                                                            \\n                                                                                                                                let n = new Node({\\n                                                                                                                                  lastNode: Node,\\n                                                                                                                                  context:  WebAudioContext,\\n                                                                                                                                })\\n                                                                                                                                n.connect(lastNode)\\n                                                                                                                            \\n                                                                                                                            \\n                                                                                                                              ie\\n                                                                                                                            \\n                                                                                                                              class MyNode {\\n                                                                                                                                constructor(params){\\n                                                                                                                                  let ctx = params.context\\n                                                                                                                                  this.myNode = ctx.createNodeType ? ctx.createNodeType() : ctx.createType()\\n                                                                                                                            \\n                                                                                                                                  // additional setup here\\n                                                                                                                                }\\n                                                                                                                            \\n                                                                                                                                connect(previousNode){\\n                                                                                                                                  previousNode.connect(this.myNode)\\n                                                                                                                                  return this.myNode\\n                                                                                                                                }\\n                                                                                                                              }\\n                                                                                                                            \\n                                                                                                                            *///# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9ub2Rlcy9hbGxOb2Rlcy5qcz8wNDZmIl0sIm5hbWVzIjpbIkdhaW5Ob2RlIiwiUGFubmVyTm9kZTJEIiwiUGFubmVyTm9kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBOEJBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O2tCQUVlLEVBQUVBLDRCQUFGLEVBQVlDLG9DQUFaLEVBQTBCQyxnQ0FBMUIsRSxFQWxDZiIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblxuICBHYXRoZXIgYWxsIG5vZGVzIGluIGEgc2luZ2xlIGV4cG9ydC5cblxuICBBbGwgbm9kZXMgbXVzdCBpbXBsZW1lbnQgdGhpcyBBUEk6XG5cbiAgICBsZXQgbiA9IG5ldyBOb2RlKHtcbiAgICAgIGxhc3ROb2RlOiBOb2RlLFxuICAgICAgY29udGV4dDogIFdlYkF1ZGlvQ29udGV4dCxcbiAgICB9KVxuICAgIG4uY29ubmVjdChsYXN0Tm9kZSlcblxuXG4gIGllXG5cbiAgY2xhc3MgTXlOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpe1xuICAgICAgbGV0IGN0eCA9IHBhcmFtcy5jb250ZXh0XG4gICAgICB0aGlzLm15Tm9kZSA9IGN0eC5jcmVhdGVOb2RlVHlwZSA/IGN0eC5jcmVhdGVOb2RlVHlwZSgpIDogY3R4LmNyZWF0ZVR5cGUoKVxuXG4gICAgICAvLyBhZGRpdGlvbmFsIHNldHVwIGhlcmVcbiAgICB9XG5cbiAgICBjb25uZWN0KHByZXZpb3VzTm9kZSl7XG4gICAgICBwcmV2aW91c05vZGUuY29ubmVjdCh0aGlzLm15Tm9kZSlcbiAgICAgIHJldHVybiB0aGlzLm15Tm9kZVxuICAgIH1cbiAgfVxuXG4qL1xuaW1wb3J0IEdhaW5Ob2RlIGZyb20gJy4vR2Fpbk5vZGUnXG5pbXBvcnQgUGFubmVyTm9kZTJEIGZyb20gJy4vUGFubmVyTm9kZTJEJ1xuaW1wb3J0IFBhbm5lck5vZGUgZnJvbSAnLi9QYW5uZXJOb2RlJ1xuXG5leHBvcnQgZGVmYXVsdCB7IEdhaW5Ob2RlLCBQYW5uZXJOb2RlMkQsIFBhbm5lck5vZGUgfVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL25vZGVzL2FsbE5vZGVzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///1\\n\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 2 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\\\"value\\\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } }; /*\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \\naudio> element track\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\\n\\n\\nvar _BaseTrack2 = __webpack_require__(3);\\n\\nvar _BaseTrack3 = _interopRequireDefault(_BaseTrack2);\\n\\nvar _utils = __webpack_require__(0);\\n\\nvar _utils2 = _interopRequireDefault(_utils);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar Html5Track = function (_BaseTrack) {\\n  _inherits(Html5Track, _BaseTrack);\\n\\n  function Html5Track(params) {\\n    _classCallCheck(this, Html5Track);\\n\\n    var _this = _possibleConstructorReturn(this, (Html5Track.__proto__ || Object.getPrototypeOf(Html5Track)).call(this, params));\\n    // call the parent class’s constructor\\n\\n\\n    var track = _this;\\n\\n    var defaults = {\\n      id: '',\\n      src: '',\\n      volume: 1,\\n      muted: false,\\n      start: 0,\\n      loop: false,\\n      autoplay: false\\n    };\\n\\n    track.options = Object.assign(defaults, params);\\n\\n    // set up our HTML5 <audio> element\\n    if (!track.options.src) {\\n      throw new Error('Can’t create an Html5Track without a src parameter');\\n    }\\n\\n    track.el = document.createElement('audio');\\n\\n    track.el.volume = track.options.volume;\\n    track.el.muted = track.options.muted;\\n    track.el.loop = track.options.loop;\\n    track.el.autoplay = track.options.autoplay;\\n\\n    track.el.src = track.options.src;\\n\\n    var eventNames = ['loadstart', 'loadedmetadata', 'canplay', 'canplaythrough', 'play', 'pause', 'ended', 'timeupdate', 'seeking', 'seeked', 'error'];\\n\\n    eventNames.forEach(function (eventName) {\\n      track.el.addEventListener(eventName, _get(Html5Track.prototype.__proto__ || Object.getPrototypeOf(Html5Track.prototype), 'trigger', _this).bind(track, eventName, false));\\n    });\\n\\n    return _this;\\n  }\\n\\n  // ********************************************************\\n\\n  _createClass(Html5Track, [{\\n    key: 'play',\\n    value: function play() {\\n      this.el.play();\\n      return this;\\n    }\\n  }, {\\n    key: 'pause',\\n    value: function pause() {\\n      this.el.pause();\\n      return this;\\n    }\\n  }, {\\n    key: 'stop',\\n    value: function stop() {\\n      this.el.pause();\\n      this.el.currentTime = 0;\\n      return this;\\n    }\\n  }, {\\n    key: 'currentTime',\\n    value: function currentTime(setTo) {\\n      var track = this;\\n      if (typeof setTo === 'number') {\\n        track.el.currentTime = setTo;\\n        return track;\\n      } else {\\n        return track.el.currentTime;\\n      }\\n    }\\n  }, {\\n    key: 'duration',\\n    value: function duration() {\\n      return track.el.duration;\\n    }\\n  }, {\\n    key: 'formattedTime',\\n    value: function formattedTime(includeDuration) {\\n      var track = this;\\n      if (includeDuration) return _utils2.default.timeFormat(track.currentTime()) + '/' + _utils2.default.timeFormat(track.duration());else return _utils2.default.timeFormat(track.currentTime());\\n    }\\n  }, {\\n    key: 'volume',\\n    value: function volume(setTo) {\\n      var track = this;\\n      if (typeof setTo === 'number') {\\n        track.el.volume = _utils2.default.normalize(setTo);\\n        return track;\\n      } else {\\n        return track.el.volume;\\n      }\\n    }\\n  }, {\\n    key: 'tweenVolume',\\n    value: function tweenVolume(setTo, duration) {\\n      var track = this;\\n\\n      // replace existing volume tween\\n      if (track.volumeTween) {\\n        window.cancelAnimationFrame(track.volumeTween);\\n      }\\n\\n      return new Promise(function (resolve, reject) {\\n\\n        var fps = 60; // requestAnimationFrame\\n        var durationInFrames = Math.round(duration * fps);\\n        var frameCount = Math.round(duration * fps);\\n        var startVolume = track.volume();\\n        var endVolume = _utils2.default.normalize(setTo);\\n\\n        tick();\\n\\n        function tick() {\\n          if (frameCount <= 0) {\\n            track.volume(endVolume);\\n            resolve(track);\\n          } else {\\n            track.volumeTween = window.requestAnimationFrame(tick);\\n          }\\n\\n          frameCount -= 1;\\n          var progress = 1 - frameCount / durationInFrames;\\n          var v = _utils2.default.lerp(startVolume, endVolume, progress);\\n          track.volume(v);\\n        }\\n      });\\n    }\\n  }, {\\n    key: 'muted',\\n    value: function muted(setTo) {\\n      var track = this;\\n      if (typeof setTo === 'boolean') {\\n        track.el.muted = setTo;\\n      }\\n      return track.el.muted;\\n    }\\n  }, {\\n    key: 'paused',\\n    value: function paused() {\\n      var track = this;\\n      return track.el.paused;\\n    }\\n  }]);\\n\\n  return Html5Track;\\n}(_BaseTrack3.default);\\n\\nmodule.exports = Html5Track;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///2\\n\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 3 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n/*\\n\\n  base Track class, with event functionality\\n\\n*/\\n\\nvar BaseTrack = function () {\\n  function BaseTrack(options) {\\n    _classCallCheck(this, BaseTrack);\\n\\n    this.id = options.id;\\n    this.events = {};\\n  }\\n\\n  _createClass(BaseTrack, [{\\n    key: 'on',\\n    value: function on(eventName, callback) {\\n      var track = this;\\n\\n      if (typeof eventName !== 'string') {\\n        throw new Error('Event name must be a string.');\\n      } else if (!callback) {\\n        throw new Error('Can’t register an event without a callback.');\\n      } else {\\n        if (track.events[eventName]) {\\n          track.events[eventName].push(callback);\\n        } else {\\n          track.events[eventName] = [callback];\\n        }\\n      }\\n\\n      return track;\\n    }\\n  }, {\\n    key: 'off',\\n    value: function off(eventName, callback) {\\n      var track = this;\\n\\n      if (callback) {\\n        // remove specific callback\\n        if (track.events[eventName]) {\\n          var index = track.events[eventName].indexOf(callback);\\n          track.events[eventName].splice(index, 1);\\n        }\\n      } else {\\n        // remove all callbacks for a given event name\\n        if (track.events[eventName]) {\\n          track.events[eventName] = [];\\n        }\\n      }\\n\\n      return track;\\n    }\\n  }, {\\n    key: 'one',\\n    value: function one(eventName, callback) {\\n      var track = this;\\n\\n      var wrappedCallback = function wrappedCallback() {\\n        track.off(eventName, wrappedCallback);\\n        callback();\\n      };\\n\\n      track.on(eventName, wrappedCallback);\\n\\n      return track;\\n    }\\n  }, {\\n    key: 'trigger',\\n    value: function trigger(eventName) {\\n      var track = this;\\n\\n      if (track.events[eventName]) {\\n        var args = Array.prototype.slice.call(arguments, 1);\\n        track.events[eventName].forEach(function (fn) {\\n          return fn.apply(track, args);\\n        });\\n      }\\n\\n      return track;\\n    }\\n  }, {\\n    key: 'destroy',\\n    value: function destroy() {}\\n  }]);\\n\\n  return BaseTrack;\\n}();\\n\\nmodule.exports = BaseTrack;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9CYXNlVHJhY2suanM/MDBjYyJdLCJuYW1lcyI6WyJCYXNlVHJhY2siLCJvcHRpb25zIiwiaWQiLCJldmVudHMiLCJldmVudE5hbWUiLCJjYWxsYmFjayIsInRyYWNrIiwiRXJyb3IiLCJwdXNoIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwid3JhcHBlZENhbGxiYWNrIiwib2ZmIiwib24iLCJhcmdzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJhcmd1bWVudHMiLCJmb3JFYWNoIiwiZm4iLCJhcHBseSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7Ozs7SUFPTUEsUztBQUNKLHFCQUFZQyxPQUFaLEVBQW9CO0FBQUE7O0FBQ2xCLFNBQUtDLEVBQUwsR0FBVUQsUUFBUUMsRUFBbEI7QUFDQSxTQUFLQyxNQUFMLEdBQWMsRUFBZDtBQUNEOzs7O3VCQUVFQyxTLEVBQVdDLFEsRUFBUztBQUNyQixVQUFJQyxRQUFRLElBQVo7O0FBRUEsVUFBRyxPQUFPRixTQUFQLEtBQXFCLFFBQXhCLEVBQWlDO0FBQy9CLGNBQU0sSUFBSUcsS0FBSixDQUFVLDhCQUFWLENBQU47QUFDRCxPQUZELE1BRU8sSUFBRyxDQUFDRixRQUFKLEVBQWM7QUFDbkIsY0FBTSxJQUFJRSxLQUFKLENBQVUsNkNBQVYsQ0FBTjtBQUNELE9BRk0sTUFFQTtBQUNMLFlBQUdELE1BQU1ILE1BQU4sQ0FBYUMsU0FBYixDQUFILEVBQTJCO0FBQ3pCRSxnQkFBTUgsTUFBTixDQUFhQyxTQUFiLEVBQXdCSSxJQUF4QixDQUE2QkgsUUFBN0I7QUFDRCxTQUZELE1BRU87QUFDTEMsZ0JBQU1ILE1BQU4sQ0FBYUMsU0FBYixJQUEwQixDQUFDQyxRQUFELENBQTFCO0FBQ0Q7QUFDRjs7QUFFRCxhQUFPQyxLQUFQO0FBQ0Q7Ozt3QkFFR0YsUyxFQUFXQyxRLEVBQVM7QUFDdEIsVUFBSUMsUUFBUSxJQUFaOztBQUVBLFVBQUdELFFBQUgsRUFBWTtBQUNWO0FBQ0EsWUFBR0MsTUFBTUgsTUFBTixDQUFhQyxTQUFiLENBQUgsRUFBMkI7QUFDekIsY0FBSUssUUFBUUgsTUFBTUgsTUFBTixDQUFhQyxTQUFiLEVBQXdCTSxPQUF4QixDQUFnQ0wsUUFBaEMsQ0FBWjtBQUNBQyxnQkFBTUgsTUFBTixDQUFhQyxTQUFiLEVBQXdCTyxNQUF4QixDQUErQkYsS0FBL0IsRUFBcUMsQ0FBckM7QUFDRDtBQUNGLE9BTkQsTUFNTztBQUNMO0FBQ0EsWUFBR0gsTUFBTUgsTUFBTixDQUFhQyxTQUFiLENBQUgsRUFBMkI7QUFDekJFLGdCQUFNSCxNQUFOLENBQWFDLFNBQWIsSUFBMEIsRUFBMUI7QUFDRDtBQUNGOztBQUVELGFBQU9FLEtBQVA7QUFDRDs7O3dCQUVHRixTLEVBQVdDLFEsRUFBUztBQUN0QixVQUFJQyxRQUFRLElBQVo7O0FBRUEsVUFBSU0sa0JBQWtCLFNBQWxCQSxlQUFrQixHQUFVO0FBQzlCTixjQUFNTyxHQUFOLENBQVVULFNBQVYsRUFBcUJRLGVBQXJCO0FBQ0FQO0FBQ0QsT0FIRDs7QUFLQUMsWUFBTVEsRUFBTixDQUFTVixTQUFULEVBQW9CUSxlQUFwQjs7QUFFQSxhQUFPTixLQUFQO0FBQ0Q7Ozs0QkFFT0YsUyxFQUFVO0FBQ2hCLFVBQUlFLFFBQVEsSUFBWjs7QUFFQSxVQUFHQSxNQUFNSCxNQUFOLENBQWFDLFNBQWIsQ0FBSCxFQUEyQjtBQUN6QixZQUFJVyxPQUFPQyxNQUFNQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkJDLFNBQTNCLEVBQXNDLENBQXRDLENBQVg7QUFDQWQsY0FBTUgsTUFBTixDQUFhQyxTQUFiLEVBQXdCaUIsT0FBeEIsQ0FBZ0M7QUFBQSxpQkFBTUMsR0FBR0MsS0FBSCxDQUFTakIsS0FBVCxFQUFnQlMsSUFBaEIsQ0FBTjtBQUFBLFNBQWhDO0FBQ0Q7O0FBRUQsYUFBT1QsS0FBUDtBQUNEOzs7OEJBRVEsQ0FBRTs7Ozs7O0FBR2JrQixPQUFPQyxPQUFQLEdBQWlCekIsU0FBakIiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5cbiAgYmFzZSBUcmFjayBjbGFzcywgd2l0aCBldmVudCBmdW5jdGlvbmFsaXR5XG5cbiovXG5cblxuY2xhc3MgQmFzZVRyYWNrIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyl7XG4gICAgdGhpcy5pZCA9IG9wdGlvbnMuaWRcbiAgICB0aGlzLmV2ZW50cyA9IHt9XG4gIH1cblxuICBvbihldmVudE5hbWUsIGNhbGxiYWNrKXtcbiAgICBsZXQgdHJhY2sgPSB0aGlzXG5cbiAgICBpZih0eXBlb2YgZXZlbnROYW1lICE9PSAnc3RyaW5nJyl7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V2ZW50IG5hbWUgbXVzdCBiZSBhIHN0cmluZy4nKVxuICAgIH0gZWxzZSBpZighY2FsbGJhY2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fu4oCZdCByZWdpc3RlciBhbiBldmVudCB3aXRob3V0IGEgY2FsbGJhY2suJylcbiAgICB9IGVsc2Uge1xuICAgICAgaWYodHJhY2suZXZlbnRzW2V2ZW50TmFtZV0pe1xuICAgICAgICB0cmFjay5ldmVudHNbZXZlbnROYW1lXS5wdXNoKGNhbGxiYWNrKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhY2suZXZlbnRzW2V2ZW50TmFtZV0gPSBbY2FsbGJhY2tdXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYWNrXG4gIH1cblxuICBvZmYoZXZlbnROYW1lLCBjYWxsYmFjayl7XG4gICAgbGV0IHRyYWNrID0gdGhpc1xuXG4gICAgaWYoY2FsbGJhY2spe1xuICAgICAgLy8gcmVtb3ZlIHNwZWNpZmljIGNhbGxiYWNrXG4gICAgICBpZih0cmFjay5ldmVudHNbZXZlbnROYW1lXSl7XG4gICAgICAgIGxldCBpbmRleCA9IHRyYWNrLmV2ZW50c1tldmVudE5hbWVdLmluZGV4T2YoY2FsbGJhY2spXG4gICAgICAgIHRyYWNrLmV2ZW50c1tldmVudE5hbWVdLnNwbGljZShpbmRleCwxKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZW1vdmUgYWxsIGNhbGxiYWNrcyBmb3IgYSBnaXZlbiBldmVudCBuYW1lXG4gICAgICBpZih0cmFjay5ldmVudHNbZXZlbnROYW1lXSl7XG4gICAgICAgIHRyYWNrLmV2ZW50c1tldmVudE5hbWVdID0gW11cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJhY2tcbiAgfVxuXG4gIG9uZShldmVudE5hbWUsIGNhbGxiYWNrKXtcbiAgICBsZXQgdHJhY2sgPSB0aGlzXG5cbiAgICBsZXQgd3JhcHBlZENhbGxiYWNrID0gZnVuY3Rpb24oKXtcbiAgICAgIHRyYWNrLm9mZihldmVudE5hbWUsIHdyYXBwZWRDYWxsYmFjaylcbiAgICAgIGNhbGxiYWNrKClcbiAgICB9XG5cbiAgICB0cmFjay5vbihldmVudE5hbWUsIHdyYXBwZWRDYWxsYmFjaylcblxuICAgIHJldHVybiB0cmFja1xuICB9XG5cbiAgdHJpZ2dlcihldmVudE5hbWUpe1xuICAgIGxldCB0cmFjayA9IHRoaXNcblxuICAgIGlmKHRyYWNrLmV2ZW50c1tldmVudE5hbWVdKXtcbiAgICAgIGxldCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxuICAgICAgdHJhY2suZXZlbnRzW2V2ZW50TmFtZV0uZm9yRWFjaChmbiA9PiBmbi5hcHBseSh0cmFjaywgYXJncykpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYWNrXG4gIH1cblxuICBkZXN0cm95KCl7fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJhc2VUcmFja1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvQmFzZVRyYWNrLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///3\\n\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 4 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _BaseTrack2 = __webpack_require__(3);\\n\\nvar _BaseTrack3 = _interopRequireDefault(_BaseTrack2);\\n\\nvar _utils = __webpack_require__(0);\\n\\nvar _utils2 = _interopRequireDefault(_utils);\\n\\nvar _allNodes = __webpack_require__(1);\\n\\nvar _allNodes2 = _interopRequireDefault(_allNodes);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Web Audio API track - to be extended\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   adds node functionality to base track\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */\\n\\n\\nvar WebAudioTrack = function (_BaseTrack) {\\n  _inherits(WebAudioTrack, _BaseTrack);\\n\\n  function WebAudioTrack(params) {\\n    _classCallCheck(this, WebAudioTrack);\\n\\n    var _this = _possibleConstructorReturn(this, (WebAudioTrack.__proto__ || Object.getPrototypeOf(WebAudioTrack)).call(this, params));\\n\\n    var track = _this;\\n\\n    var defaults = {\\n      src: '',\\n      context: false,\\n      nodes: []\\n    };\\n    track.options = Object.assign(defaults, params);\\n\\n    track.data = {};\\n\\n    // reference nodes by ???\\n    track.allNodes = [];\\n    track.nodeLookup = {};\\n    return _this;\\n  }\\n\\n  /*\\n     input is an array\\n   */\\n\\n\\n  _createClass(WebAudioTrack, [{\\n    key: 'createNodes',\\n    value: function createNodes(nodes, source) {\\n      var track = this;\\n\\n      if (!source) {\\n        throw new Error('Can’t create nodes without a valid source.');\\n      } else if (!source.connect) {\\n        throw new Error('Can’t create nodes without a valid source.');\\n      }\\n\\n      var previousNode = source;\\n      nodes.forEach(function (n) {\\n\\n        var baseParams = {\\n          context: track.options.context\\n\\n          // determine node type by duck typing\\n        };if (typeof n === 'string') {\\n          // predefined node with all defaults, no options\\n\\n          if (_allNodes2.default[n]) {\\n\\n            var newNode = new _allNodes2.default[n](baseParams);\\n            track.allNodes.push(newNode);\\n            track.nodeLookup[n] = newNode;\\n\\n            previousNode.connect(newNode.node);\\n            previousNode = newNode.node;\\n          } else {\\n            throw new Error('Node type ' + n + ' does not exist.');\\n          }\\n        } else if ((typeof n === 'undefined' ? 'undefined' : _typeof(n)) === 'object') {\\n          if (n.type) {\\n            // create predefined node with options\\n            var nodeType = _allNodes2.default[n.type];\\n\\n            if (nodeType) {\\n              var _newNode = new nodeType(Object.assign(baseParams, n.options));\\n\\n              track.allNodes.push(_newNode);\\n              track.nodeLookup[n.type] = _newNode;\\n\\n              previousNode.connect(_newNode.node);\\n              previousNode = _newNode.node;\\n            } else {\\n              throw new Error('Node type ' + n.type + ' does not exist.');\\n            }\\n          } else if (n.connect) {\\n            // create custom node, this is a raw node object\\n\\n            track.allNodes.push(n);\\n\\n            previousNode.connect(n);\\n            previousNode = n;\\n          }\\n        }\\n      });\\n\\n      previousNode.connect(track.options.context.destination);\\n    }\\n  }, {\\n    key: 'nodes',\\n    value: function nodes() {\\n      return this.allNodes;\\n    }\\n  }, {\\n    key: 'node',\\n    value: function node(id) {\\n      return this.nodeLookup[id] || false;\\n    }\\n  }]);\\n\\n  return WebAudioTrack;\\n}(_BaseTrack3.default);\\n\\nmodule.exports = WebAudioTrack;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9XZWJBdWRpb1RyYWNrLmpzPzljNjQiXSwibmFtZXMiOlsiV2ViQXVkaW9UcmFjayIsInBhcmFtcyIsInRyYWNrIiwiZGVmYXVsdHMiLCJzcmMiLCJjb250ZXh0Iiwibm9kZXMiLCJvcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwiZGF0YSIsImFsbE5vZGVzIiwibm9kZUxvb2t1cCIsInNvdXJjZSIsIkVycm9yIiwiY29ubmVjdCIsInByZXZpb3VzTm9kZSIsImZvckVhY2giLCJiYXNlUGFyYW1zIiwibiIsIm5ld05vZGUiLCJwdXNoIiwibm9kZSIsInR5cGUiLCJub2RlVHlwZSIsImRlc3RpbmF0aW9uIiwiaWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFPQTs7OztBQUNBOzs7O0FBRUE7Ozs7Ozs7Ozs7K2VBVkE7Ozs7Ozs7OztJQVlNQSxhOzs7QUFDSix5QkFBWUMsTUFBWixFQUFtQjtBQUFBOztBQUFBLDhIQUNYQSxNQURXOztBQUVqQixRQUFJQyxhQUFKOztBQUVBLFFBQUlDLFdBQVc7QUFDYkMsV0FBVSxFQURHO0FBRWJDLGVBQVUsS0FGRztBQUdiQyxhQUFVO0FBSEcsS0FBZjtBQUtBSixVQUFNSyxPQUFOLEdBQWdCQyxPQUFPQyxNQUFQLENBQWNOLFFBQWQsRUFBd0JGLE1BQXhCLENBQWhCOztBQUVBQyxVQUFNUSxJQUFOLEdBQWEsRUFBYjs7QUFFQTtBQUNBUixVQUFNUyxRQUFOLEdBQW1CLEVBQW5CO0FBQ0FULFVBQU1VLFVBQU4sR0FBbUIsRUFBbkI7QUFmaUI7QUFnQmxCOztBQUdEOzs7Ozs7O2dDQUtZTixLLEVBQU9PLE0sRUFBTztBQUN4QixVQUFJWCxRQUFRLElBQVo7O0FBRUEsVUFBRyxDQUFDVyxNQUFKLEVBQVc7QUFDVCxjQUFNLElBQUlDLEtBQUosQ0FBVSw0Q0FBVixDQUFOO0FBQ0QsT0FGRCxNQUVPLElBQUcsQ0FBQ0QsT0FBT0UsT0FBWCxFQUFtQjtBQUN4QixjQUFNLElBQUlELEtBQUosQ0FBVSw0Q0FBVixDQUFOO0FBQ0Q7O0FBRUQsVUFBSUUsZUFBZUgsTUFBbkI7QUFDQVAsWUFBTVcsT0FBTixDQUFjLGFBQUs7O0FBRWpCLFlBQUlDLGFBQWE7QUFDZmIsbUJBQVNILE1BQU1LLE9BQU4sQ0FBY0Y7O0FBR3pCO0FBSmlCLFNBQWpCLENBS0EsSUFBRyxPQUFPYyxDQUFQLEtBQWEsUUFBaEIsRUFBeUI7QUFDdkI7O0FBRUEsY0FBRyxtQkFBTUEsQ0FBTixDQUFILEVBQVk7O0FBRVYsZ0JBQUlDLFVBQVUsSUFBSSxtQkFBTUQsQ0FBTixDQUFKLENBQWFELFVBQWIsQ0FBZDtBQUNBaEIsa0JBQU1TLFFBQU4sQ0FBZVUsSUFBZixDQUFvQkQsT0FBcEI7QUFDQWxCLGtCQUFNVSxVQUFOLENBQWlCTyxDQUFqQixJQUFzQkMsT0FBdEI7O0FBRUFKLHlCQUFhRCxPQUFiLENBQXFCSyxRQUFRRSxJQUE3QjtBQUNBTiwyQkFBZUksUUFBUUUsSUFBdkI7QUFFRCxXQVRELE1BU087QUFDTCxrQkFBTSxJQUFJUixLQUFKLGdCQUF1QkssQ0FBdkIsc0JBQU47QUFDRDtBQUVGLFNBaEJELE1BZ0JPLElBQUcsUUFBT0EsQ0FBUCx5Q0FBT0EsQ0FBUCxPQUFhLFFBQWhCLEVBQXlCO0FBQzlCLGNBQUlBLEVBQUVJLElBQU4sRUFBWTtBQUNWO0FBQ0EsZ0JBQUlDLFdBQVcsbUJBQU1MLEVBQUVJLElBQVIsQ0FBZjs7QUFFQSxnQkFBR0MsUUFBSCxFQUFZO0FBQ1Ysa0JBQUlKLFdBQVUsSUFBSUksUUFBSixDQUFjaEIsT0FBT0MsTUFBUCxDQUFjUyxVQUFkLEVBQTBCQyxFQUFFWixPQUE1QixDQUFkLENBQWQ7O0FBRUFMLG9CQUFNUyxRQUFOLENBQWVVLElBQWYsQ0FBb0JELFFBQXBCO0FBQ0FsQixvQkFBTVUsVUFBTixDQUFpQk8sRUFBRUksSUFBbkIsSUFBMkJILFFBQTNCOztBQUVBSiwyQkFBYUQsT0FBYixDQUFxQkssU0FBUUUsSUFBN0I7QUFDQU4sNkJBQWVJLFNBQVFFLElBQXZCO0FBRUQsYUFURCxNQVNPO0FBQ0wsb0JBQU0sSUFBSVIsS0FBSixnQkFBdUJLLEVBQUVJLElBQXpCLHNCQUFOO0FBQ0Q7QUFFRixXQWpCRCxNQWlCTyxJQUFHSixFQUFFSixPQUFMLEVBQWM7QUFDbkI7O0FBRUFiLGtCQUFNUyxRQUFOLENBQWVVLElBQWYsQ0FBb0JGLENBQXBCOztBQUVBSCx5QkFBYUQsT0FBYixDQUFxQkksQ0FBckI7QUFDQUgsMkJBQWVHLENBQWY7QUFFRDtBQUNGO0FBRUYsT0FwREQ7O0FBc0RBSCxtQkFBYUQsT0FBYixDQUFxQmIsTUFBTUssT0FBTixDQUFjRixPQUFkLENBQXNCb0IsV0FBM0M7QUFFRDs7OzRCQUVNO0FBQ0wsYUFBTyxLQUFLZCxRQUFaO0FBQ0Q7Ozt5QkFFSWUsRSxFQUFHO0FBQ04sYUFBTyxLQUFLZCxVQUFMLENBQWdCYyxFQUFoQixLQUF1QixLQUE5QjtBQUNEOzs7Ozs7QUFJSEMsT0FBT0MsT0FBUCxHQUFpQjVCLGFBQWpCIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXG4gIFdlYiBBdWRpbyBBUEkgdHJhY2sgLSB0byBiZSBleHRlbmRlZFxuXG4gICAgYWRkcyBub2RlIGZ1bmN0aW9uYWxpdHkgdG8gYmFzZSB0cmFja1xuXG4qL1xuaW1wb3J0IEJhc2VUcmFjayBmcm9tICcuL0Jhc2VUcmFjaydcbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzJ1xuXG5pbXBvcnQgTm9kZXMgZnJvbSAnLi9ub2Rlcy9hbGxOb2RlcydcblxuY2xhc3MgV2ViQXVkaW9UcmFjayBleHRlbmRzIEJhc2VUcmFjayB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcyl7XG4gICAgc3VwZXIocGFyYW1zKVxuICAgIGxldCB0cmFjayA9IHRoaXNcblxuICAgIGxldCBkZWZhdWx0cyA9IHtcbiAgICAgIHNyYzogICAgICAnJyxcbiAgICAgIGNvbnRleHQ6ICBmYWxzZSxcbiAgICAgIG5vZGVzOiAgICBbXSxcbiAgICB9XG4gICAgdHJhY2sub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdHMsIHBhcmFtcylcblxuICAgIHRyYWNrLmRhdGEgPSB7fVxuXG4gICAgLy8gcmVmZXJlbmNlIG5vZGVzIGJ5ID8/P1xuICAgIHRyYWNrLmFsbE5vZGVzICAgPSBbXVxuICAgIHRyYWNrLm5vZGVMb29rdXAgPSB7fVxuICB9XG5cblxuICAvKlxuXG4gICAgaW5wdXQgaXMgYW4gYXJyYXlcblxuICAqL1xuICBjcmVhdGVOb2Rlcyhub2Rlcywgc291cmNlKXtcbiAgICBsZXQgdHJhY2sgPSB0aGlzXG5cbiAgICBpZighc291cmNlKXtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fu4oCZdCBjcmVhdGUgbm9kZXMgd2l0aG91dCBhIHZhbGlkIHNvdXJjZS4nKVxuICAgIH0gZWxzZSBpZighc291cmNlLmNvbm5lY3Qpe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW7igJl0IGNyZWF0ZSBub2RlcyB3aXRob3V0IGEgdmFsaWQgc291cmNlLicpXG4gICAgfVxuXG4gICAgbGV0IHByZXZpb3VzTm9kZSA9IHNvdXJjZVxuICAgIG5vZGVzLmZvckVhY2gobiA9PiB7XG5cbiAgICAgIGxldCBiYXNlUGFyYW1zID0ge1xuICAgICAgICBjb250ZXh0OiB0cmFjay5vcHRpb25zLmNvbnRleHRcbiAgICAgIH1cblxuICAgICAgLy8gZGV0ZXJtaW5lIG5vZGUgdHlwZSBieSBkdWNrIHR5cGluZ1xuICAgICAgaWYodHlwZW9mIG4gPT09ICdzdHJpbmcnKXtcbiAgICAgICAgLy8gcHJlZGVmaW5lZCBub2RlIHdpdGggYWxsIGRlZmF1bHRzLCBubyBvcHRpb25zXG5cbiAgICAgICAgaWYoTm9kZXNbbl0pe1xuXG4gICAgICAgICAgbGV0IG5ld05vZGUgPSBuZXcgTm9kZXNbbl0oYmFzZVBhcmFtcylcbiAgICAgICAgICB0cmFjay5hbGxOb2Rlcy5wdXNoKG5ld05vZGUpXG4gICAgICAgICAgdHJhY2subm9kZUxvb2t1cFtuXSA9IG5ld05vZGVcblxuICAgICAgICAgIHByZXZpb3VzTm9kZS5jb25uZWN0KG5ld05vZGUubm9kZSlcbiAgICAgICAgICBwcmV2aW91c05vZGUgPSBuZXdOb2RlLm5vZGVcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm9kZSB0eXBlICR7bn0gZG9lcyBub3QgZXhpc3QuYClcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2UgaWYodHlwZW9mIG4gPT09ICdvYmplY3QnKXtcbiAgICAgICAgaWYoIG4udHlwZSApe1xuICAgICAgICAgIC8vIGNyZWF0ZSBwcmVkZWZpbmVkIG5vZGUgd2l0aCBvcHRpb25zXG4gICAgICAgICAgbGV0IG5vZGVUeXBlID0gTm9kZXNbbi50eXBlXVxuXG4gICAgICAgICAgaWYobm9kZVR5cGUpe1xuICAgICAgICAgICAgbGV0IG5ld05vZGUgPSBuZXcgbm9kZVR5cGUoIE9iamVjdC5hc3NpZ24oYmFzZVBhcmFtcywgbi5vcHRpb25zKSApXG5cbiAgICAgICAgICAgIHRyYWNrLmFsbE5vZGVzLnB1c2gobmV3Tm9kZSlcbiAgICAgICAgICAgIHRyYWNrLm5vZGVMb29rdXBbbi50eXBlXSA9IG5ld05vZGVcblxuICAgICAgICAgICAgcHJldmlvdXNOb2RlLmNvbm5lY3QobmV3Tm9kZS5ub2RlKVxuICAgICAgICAgICAgcHJldmlvdXNOb2RlID0gbmV3Tm9kZS5ub2RlXG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb2RlIHR5cGUgJHtuLnR5cGV9IGRvZXMgbm90IGV4aXN0LmApXG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZihuLmNvbm5lY3QpIHtcbiAgICAgICAgICAvLyBjcmVhdGUgY3VzdG9tIG5vZGUsIHRoaXMgaXMgYSByYXcgbm9kZSBvYmplY3RcblxuICAgICAgICAgIHRyYWNrLmFsbE5vZGVzLnB1c2gobilcblxuICAgICAgICAgIHByZXZpb3VzTm9kZS5jb25uZWN0KG4pXG4gICAgICAgICAgcHJldmlvdXNOb2RlID0gblxuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH0pXG5cbiAgICBwcmV2aW91c05vZGUuY29ubmVjdCh0cmFjay5vcHRpb25zLmNvbnRleHQuZGVzdGluYXRpb24pXG5cbiAgfVxuXG4gIG5vZGVzKCl7XG4gICAgcmV0dXJuIHRoaXMuYWxsTm9kZXNcbiAgfVxuXG4gIG5vZGUoaWQpe1xuICAgIHJldHVybiB0aGlzLm5vZGVMb29rdXBbaWRdIHx8IGZhbHNlXG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYkF1ZGlvVHJhY2tcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9XZWJBdWRpb1RyYWNrLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///4\\n\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 5 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _Mixer = __webpack_require__(6);\\n\\nvar _Mixer2 = _interopRequireDefault(_Mixer);\\n\\nvar _Html5Track = __webpack_require__(2);\\n\\nvar _Html5Track2 = _interopRequireDefault(_Html5Track);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n/*\\n\\n  Audio Mixer\\n\\n*/\\nexports.default = { Mixer: _Mixer2.default, Html5Track: _Html5Track2.default };//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJNaXhlciIsIkh0bWw1VHJhY2siXSwibWFwcGluZ3MiOiI7Ozs7OztBQUtBOzs7O0FBQ0E7Ozs7OztBQU5BOzs7OztrQkFRZSxFQUFFQSxzQkFBRixFQUFTQyxnQ0FBVCxFIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXG4gIEF1ZGlvIE1peGVyXG5cbiovXG5pbXBvcnQgTWl4ZXIgZnJvbSAnLi9tb2R1bGVzL01peGVyJ1xuaW1wb3J0IEh0bWw1VHJhY2sgZnJvbSAnLi9tb2R1bGVzL0h0bWw1VHJhY2snXG5cbmV4cG9ydCBkZWZhdWx0IHsgTWl4ZXIsIEh0bWw1VHJhY2sgfVxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///5\\n\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 6 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nvar _typeof = typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; };\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\\nnudio Mixer\\nnn\\n\\nvar _trackTypes = __webpack_require__(7);\\n\\nvar _trackTypes2 = _interopRequireDefault(_trackTypes);\\n\\nvar _utils = __webpack_require__(0);\\n\\nvar _utils2 = _interopRequireDefault(_utils);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nvar Mixer = function () {\\n  function Mixer() {\\n    _classCallCheck(this, Mixer);\\n\\n    var mix = this;\\n\\n    mix.allTracks = []; // tracks as numbered array\\n    mix.lookup = {}; // tracks as lookup table: mix.lookup['trackname']\\n\\n    mix.currentVolume = 1;\\n\\n    // create a web audio context:\\n    // FF, Chrome, Edge unprefixed\\n    // Safari prefixed\\n    if (window.AudioContext || window.webkitAudioContext) {\\n      this.context = typeof window.AudioContext === 'function' ? new window.AudioContext() : new window.webkitAudioContext();\\n    }\\n  }\\n\\n  /*\\n     Create a new track, or return an existing track\\n   */\\n\\n\\n  _createClass(Mixer, [{\\n    key: 'track',\\n    value: function track(id, params) {\\n      var mix = this;\\n\\n      if (!id) {\\n        throw new Error('Can’t create a track without a name');\\n        return;\\n      }\\n\\n      // track already exists, return it\\n      if (mix.lookup[id]) {\\n\\n        return mix.lookup[id];\\n      } else if (params) {\\n\\n        // if params are passed, create a track\\n        var defaults = {\\n          id: id,\\n          timeline: [],\\n          mix: mix,\\n          context: mix.context,\\n          type: _trackTypes2.default.Html5Track // default to standard track type\\n        };\\n        var options = Object.assign(defaults, params);\\n\\n        // should be able to pass track type as string\\n        if (typeof options.type === 'string') {\\n          if (_trackTypes2.default[options.type]) options.type = _trackTypes2.default[options.type];\\n        }\\n\\n        var track = new options.type(options);\\n\\n        mix.allTracks.push(track);\\n        mix.lookup[id] = track;\\n\\n        return track;\\n      } else {\\n        // this track doesn't exist, no params received\\n        return false;\\n      }\\n    }\\n  }, {\\n    key: 'tracks',\\n    value: function tracks() {\\n      var mix = this;\\n      return mix.allTracks;\\n    }\\n\\n    /*\\n       Remove an existing track. Can receive an ID or a track object.\\n     */\\n\\n  }, {\\n    key: 'remove',\\n    value: function remove(input) {\\n      var mix = this;\\n\\n      // input can be either a string or a track object,\\n      // but the track object needs to have an id property\\n      var trackId = void 0;\\n      if (typeof input === 'string') trackId = input;else if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' && input.id) trackId = input.id;\\n\\n      var track = mix.lookup[trackId];\\n\\n      for (var i = mix.allTracks.length - 1; i >= 0; i--) {\\n        if (mix.allTracks[i] === track) {\\n          mix.allTracks.splice(i, 1);\\n        }\\n      }\\n\\n      if (track.destroy) track.destroy();\\n      track = null;\\n      delete mix.lookup[trackId];\\n    }\\n\\n    /*\\n       Set the master volume for the entire audio mixer.\\n     */\\n\\n  }, {\\n    key: 'volume',\\n    value: function volume(setTo) {\\n      var mix = this;\\n      if (typeof setTo === 'number') {\\n        mix.currentVolume = _utils2.default.normalize(setTo);\\n\\n        // tracks multiply their volume by the mix’s volume, so\\n        // whenever we change the master volume we need to call\\n        // track.volume() once to get the intended result\\n        mix.allTracks.forEach(function (track) {\\n          return track.volume ? track.volume(track.volume()) : '';\\n        });\\n      }\\n      return mix.currentVolume;\\n    }\\n  }]);\\n\\n  return Mixer;\\n}();\\n\\nmodule.exports = Mixer;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9NaXhlci5qcz9jMDViIl0sIm5hbWVzIjpbIk1peGVyIiwibWl4IiwiYWxsVHJhY2tzIiwibG9va3VwIiwiY3VycmVudFZvbHVtZSIsIndpbmRvdyIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsImNvbnRleHQiLCJpZCIsInBhcmFtcyIsIkVycm9yIiwiZGVmYXVsdHMiLCJ0aW1lbGluZSIsInR5cGUiLCJIdG1sNVRyYWNrIiwib3B0aW9ucyIsIk9iamVjdCIsImFzc2lnbiIsInRyYWNrIiwicHVzaCIsImlucHV0IiwidHJhY2tJZCIsImkiLCJsZW5ndGgiLCJzcGxpY2UiLCJkZXN0cm95Iiwic2V0VG8iLCJub3JtYWxpemUiLCJmb3JFYWNoIiwidm9sdW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztxakJBQUE7Ozs7Ozs7QUFLQTs7OztBQUNBOzs7Ozs7OztJQUVNQSxLO0FBQ0osbUJBQWE7QUFBQTs7QUFDWCxRQUFJQyxNQUFNLElBQVY7O0FBRUFBLFFBQUlDLFNBQUosR0FBZ0IsRUFBaEIsQ0FIVyxDQUdRO0FBQ25CRCxRQUFJRSxNQUFKLEdBQWdCLEVBQWhCLENBSlcsQ0FJUTs7QUFFbkJGLFFBQUlHLGFBQUosR0FBb0IsQ0FBcEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBR0MsT0FBT0MsWUFBUCxJQUF1QkQsT0FBT0Usa0JBQWpDLEVBQW9EO0FBQ2xELFdBQUtDLE9BQUwsR0FBZ0IsT0FBT0gsT0FBT0MsWUFBZCxLQUErQixVQUEvQixHQUE0QyxJQUFJRCxPQUFPQyxZQUFYLEVBQTVDLEdBQXdFLElBQUlELE9BQU9FLGtCQUFYLEVBQXhGO0FBQ0Q7QUFDRjs7QUFHRDs7Ozs7OzswQkFLTUUsRSxFQUFJQyxNLEVBQU87QUFDZixVQUFJVCxNQUFNLElBQVY7O0FBRUEsVUFBRyxDQUFDUSxFQUFKLEVBQU87QUFDTCxjQUFNLElBQUlFLEtBQUosQ0FBVSxxQ0FBVixDQUFOO0FBQ0E7QUFDRDs7QUFFRDtBQUNBLFVBQUdWLElBQUlFLE1BQUosQ0FBV00sRUFBWCxDQUFILEVBQWtCOztBQUVoQixlQUFPUixJQUFJRSxNQUFKLENBQVdNLEVBQVgsQ0FBUDtBQUVELE9BSkQsTUFJTyxJQUFHQyxNQUFILEVBQVU7O0FBRWY7QUFDQSxZQUFJRSxXQUFXO0FBQ2JILGNBQVVBLEVBREc7QUFFYkksb0JBQVUsRUFGRztBQUdiWixlQUFVQSxHQUhHO0FBSWJPLG1CQUFVUCxJQUFJTyxPQUpEO0FBS2JNLGdCQUFVLHFCQUFXQyxVQUxSLENBS29CO0FBTHBCLFNBQWY7QUFPQSxZQUFJQyxVQUFVQyxPQUFPQyxNQUFQLENBQWNOLFFBQWQsRUFBd0JGLE1BQXhCLENBQWQ7O0FBRUE7QUFDQSxZQUFHLE9BQU9NLFFBQVFGLElBQWYsS0FBd0IsUUFBM0IsRUFBb0M7QUFDbEMsY0FBRyxxQkFBV0UsUUFBUUYsSUFBbkIsQ0FBSCxFQUNFRSxRQUFRRixJQUFSLEdBQWUscUJBQVdFLFFBQVFGLElBQW5CLENBQWY7QUFDSDs7QUFFRCxZQUFJSyxRQUFRLElBQUlILFFBQVFGLElBQVosQ0FBaUJFLE9BQWpCLENBQVo7O0FBRUFmLFlBQUlDLFNBQUosQ0FBY2tCLElBQWQsQ0FBbUJELEtBQW5CO0FBQ0FsQixZQUFJRSxNQUFKLENBQVdNLEVBQVgsSUFBaUJVLEtBQWpCOztBQUVBLGVBQU9BLEtBQVA7QUFFRCxPQXpCTSxNQXlCQTtBQUNMO0FBQ0EsZUFBTyxLQUFQO0FBQ0Q7QUFFRjs7OzZCQUVPO0FBQ04sVUFBSWxCLE1BQU0sSUFBVjtBQUNBLGFBQU9BLElBQUlDLFNBQVg7QUFDRDs7QUFFRDs7Ozs7OzJCQUtPbUIsSyxFQUFNO0FBQ1gsVUFBSXBCLE1BQU0sSUFBVjs7QUFFQTtBQUNBO0FBQ0EsVUFBSXFCLGdCQUFKO0FBQ0EsVUFBRyxPQUFPRCxLQUFQLEtBQWlCLFFBQXBCLEVBQ0VDLFVBQVVELEtBQVYsQ0FERixLQUVLLElBQUcsUUFBT0EsS0FBUCx5Q0FBT0EsS0FBUCxPQUFpQixRQUFqQixJQUE2QkEsTUFBTVosRUFBdEMsRUFDSGEsVUFBVUQsTUFBTVosRUFBaEI7O0FBRUYsVUFBSVUsUUFBUWxCLElBQUlFLE1BQUosQ0FBV21CLE9BQVgsQ0FBWjs7QUFFQSxXQUFLLElBQUlDLElBQUl0QixJQUFJQyxTQUFKLENBQWNzQixNQUFkLEdBQXVCLENBQXBDLEVBQXVDRCxLQUFLLENBQTVDLEVBQStDQSxHQUEvQyxFQUFvRDtBQUNsRCxZQUFHdEIsSUFBSUMsU0FBSixDQUFjcUIsQ0FBZCxNQUFxQkosS0FBeEIsRUFBOEI7QUFDNUJsQixjQUFJQyxTQUFKLENBQWN1QixNQUFkLENBQXFCRixDQUFyQixFQUF3QixDQUF4QjtBQUNEO0FBQ0Y7O0FBRUQsVUFBR0osTUFBTU8sT0FBVCxFQUFrQlAsTUFBTU8sT0FBTjtBQUNsQlAsY0FBUSxJQUFSO0FBQ0EsYUFBT2xCLElBQUlFLE1BQUosQ0FBV21CLE9BQVgsQ0FBUDtBQUVEOztBQUdEOzs7Ozs7MkJBS09LLEssRUFBTTtBQUNYLFVBQUkxQixNQUFNLElBQVY7QUFDQSxVQUFHLE9BQU8wQixLQUFQLEtBQWlCLFFBQXBCLEVBQTZCO0FBQzNCMUIsWUFBSUcsYUFBSixHQUFvQixnQkFBTXdCLFNBQU4sQ0FBZ0JELEtBQWhCLENBQXBCOztBQUVBO0FBQ0E7QUFDQTtBQUNBMUIsWUFBSUMsU0FBSixDQUFjMkIsT0FBZCxDQUFzQjtBQUFBLGlCQUFTVixNQUFNVyxNQUFOLEdBQWVYLE1BQU1XLE1BQU4sQ0FBYVgsTUFBTVcsTUFBTixFQUFiLENBQWYsR0FBOEMsRUFBdkQ7QUFBQSxTQUF0QjtBQUNEO0FBQ0QsYUFBTzdCLElBQUlHLGFBQVg7QUFDRDs7Ozs7O0FBSUgyQixPQUFPQyxPQUFQLEdBQWlCaEMsS0FBakIiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5cbiAgQXVkaW8gTWl4ZXJcblxuKi9cbmltcG9ydCB0cmFja1R5cGVzIGZyb20gJy4vdHJhY2tUeXBlcydcbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzJ1xuXG5jbGFzcyBNaXhlciB7XG4gIGNvbnN0cnVjdG9yKCl7XG4gICAgbGV0IG1peCA9IHRoaXNcblxuICAgIG1peC5hbGxUcmFja3MgPSBbXSAvLyB0cmFja3MgYXMgbnVtYmVyZWQgYXJyYXlcbiAgICBtaXgubG9va3VwICAgID0ge30gLy8gdHJhY2tzIGFzIGxvb2t1cCB0YWJsZTogbWl4Lmxvb2t1cFsndHJhY2tuYW1lJ11cblxuICAgIG1peC5jdXJyZW50Vm9sdW1lID0gMVxuXG4gICAgLy8gY3JlYXRlIGEgd2ViIGF1ZGlvIGNvbnRleHQ6XG4gICAgLy8gRkYsIENocm9tZSwgRWRnZSB1bnByZWZpeGVkXG4gICAgLy8gU2FmYXJpIHByZWZpeGVkXG4gICAgaWYod2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0KXtcbiAgICAgIHRoaXMuY29udGV4dCA9ICh0eXBlb2Ygd2luZG93LkF1ZGlvQ29udGV4dCA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyB3aW5kb3cuQXVkaW9Db250ZXh0KCkgOiBuZXcgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCgpIClcbiAgICB9XG4gIH1cblxuXG4gIC8qXG5cbiAgICBDcmVhdGUgYSBuZXcgdHJhY2ssIG9yIHJldHVybiBhbiBleGlzdGluZyB0cmFja1xuXG4gICovXG4gIHRyYWNrKGlkLCBwYXJhbXMpe1xuICAgIGxldCBtaXggPSB0aGlzXG5cbiAgICBpZighaWQpe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW7igJl0IGNyZWF0ZSBhIHRyYWNrIHdpdGhvdXQgYSBuYW1lJylcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHRyYWNrIGFscmVhZHkgZXhpc3RzLCByZXR1cm4gaXRcbiAgICBpZihtaXgubG9va3VwW2lkXSl7XG5cbiAgICAgIHJldHVybiBtaXgubG9va3VwW2lkXVxuXG4gICAgfSBlbHNlIGlmKHBhcmFtcyl7XG5cbiAgICAgIC8vIGlmIHBhcmFtcyBhcmUgcGFzc2VkLCBjcmVhdGUgYSB0cmFja1xuICAgICAgbGV0IGRlZmF1bHRzID0ge1xuICAgICAgICBpZDogICAgICAgaWQsXG4gICAgICAgIHRpbWVsaW5lOiBbXSxcbiAgICAgICAgbWl4OiAgICAgIG1peCxcbiAgICAgICAgY29udGV4dDogIG1peC5jb250ZXh0LFxuICAgICAgICB0eXBlOiAgICAgdHJhY2tUeXBlcy5IdG1sNVRyYWNrLCAvLyBkZWZhdWx0IHRvIHN0YW5kYXJkIHRyYWNrIHR5cGVcbiAgICAgIH1cbiAgICAgIGxldCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0cywgcGFyYW1zKVxuXG4gICAgICAvLyBzaG91bGQgYmUgYWJsZSB0byBwYXNzIHRyYWNrIHR5cGUgYXMgc3RyaW5nXG4gICAgICBpZih0eXBlb2Ygb3B0aW9ucy50eXBlID09PSAnc3RyaW5nJyl7XG4gICAgICAgIGlmKHRyYWNrVHlwZXNbb3B0aW9ucy50eXBlXSlcbiAgICAgICAgICBvcHRpb25zLnR5cGUgPSB0cmFja1R5cGVzW29wdGlvbnMudHlwZV1cbiAgICAgIH1cblxuICAgICAgbGV0IHRyYWNrID0gbmV3IG9wdGlvbnMudHlwZShvcHRpb25zKVxuXG4gICAgICBtaXguYWxsVHJhY2tzLnB1c2godHJhY2spO1xuICAgICAgbWl4Lmxvb2t1cFtpZF0gPSB0cmFjaztcblxuICAgICAgcmV0dXJuIHRyYWNrXG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGhpcyB0cmFjayBkb2Vzbid0IGV4aXN0LCBubyBwYXJhbXMgcmVjZWl2ZWRcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cblxuICB9XG5cbiAgdHJhY2tzKCl7XG4gICAgbGV0IG1peCA9IHRoaXNcbiAgICByZXR1cm4gbWl4LmFsbFRyYWNrc1xuICB9XG5cbiAgLypcblxuICAgIFJlbW92ZSBhbiBleGlzdGluZyB0cmFjay4gQ2FuIHJlY2VpdmUgYW4gSUQgb3IgYSB0cmFjayBvYmplY3QuXG5cbiAgKi9cbiAgcmVtb3ZlKGlucHV0KXtcbiAgICBsZXQgbWl4ID0gdGhpc1xuXG4gICAgLy8gaW5wdXQgY2FuIGJlIGVpdGhlciBhIHN0cmluZyBvciBhIHRyYWNrIG9iamVjdCxcbiAgICAvLyBidXQgdGhlIHRyYWNrIG9iamVjdCBuZWVkcyB0byBoYXZlIGFuIGlkIHByb3BlcnR5XG4gICAgbGV0IHRyYWNrSWRcbiAgICBpZih0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKVxuICAgICAgdHJhY2tJZCA9IGlucHV0XG4gICAgZWxzZSBpZih0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIGlucHV0LmlkKVxuICAgICAgdHJhY2tJZCA9IGlucHV0LmlkXG5cbiAgICBsZXQgdHJhY2sgPSBtaXgubG9va3VwW3RyYWNrSWRdO1xuXG4gICAgZm9yICh2YXIgaSA9IG1peC5hbGxUcmFja3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGlmKG1peC5hbGxUcmFja3NbaV0gPT09IHRyYWNrKXtcbiAgICAgICAgbWl4LmFsbFRyYWNrcy5zcGxpY2UoaSwgMSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0cmFjay5kZXN0cm95KSB0cmFjay5kZXN0cm95KClcbiAgICB0cmFjayA9IG51bGxcbiAgICBkZWxldGUgbWl4Lmxvb2t1cFt0cmFja0lkXVxuXG4gIH1cblxuXG4gIC8qXG5cbiAgICBTZXQgdGhlIG1hc3RlciB2b2x1bWUgZm9yIHRoZSBlbnRpcmUgYXVkaW8gbWl4ZXIuXG5cbiAgKi9cbiAgdm9sdW1lKHNldFRvKXtcbiAgICBsZXQgbWl4ID0gdGhpc1xuICAgIGlmKHR5cGVvZiBzZXRUbyA9PT0gJ251bWJlcicpe1xuICAgICAgbWl4LmN1cnJlbnRWb2x1bWUgPSB1dGlscy5ub3JtYWxpemUoc2V0VG8pXG5cbiAgICAgIC8vIHRyYWNrcyBtdWx0aXBseSB0aGVpciB2b2x1bWUgYnkgdGhlIG1peOKAmXMgdm9sdW1lLCBzb1xuICAgICAgLy8gd2hlbmV2ZXIgd2UgY2hhbmdlIHRoZSBtYXN0ZXIgdm9sdW1lIHdlIG5lZWQgdG8gY2FsbFxuICAgICAgLy8gdHJhY2sudm9sdW1lKCkgb25jZSB0byBnZXQgdGhlIGludGVuZGVkIHJlc3VsdFxuICAgICAgbWl4LmFsbFRyYWNrcy5mb3JFYWNoKHRyYWNrID0+IHRyYWNrLnZvbHVtZSA/IHRyYWNrLnZvbHVtZSh0cmFjay52b2x1bWUoKSkgOiAnJyApXG4gICAgfVxuICAgIHJldHVybiBtaXguY3VycmVudFZvbHVtZVxuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNaXhlclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvTWl4ZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///6\\n\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 7 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _Html5Track = __webpack_require__(2);\\n\\nvar _Html5Track2 = _interopRequireDefault(_Html5Track);\\n\\nvar _BufferSourceTrack = __webpack_require__(8);\\n\\nvar _BufferSourceTrack2 = _interopRequireDefault(_BufferSourceTrack);\\n\\nvar _ElementSourceTrack = __webpack_require__(12);\\n\\nvar _ElementSourceTrack2 = _interopRequireDefault(_ElementSourceTrack);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nexports.default = { Html5Track: _Html5Track2.default, BufferSourceTrack: _BufferSourceTrack2.default, ElementSourceTrack: _ElementSourceTrack2.default }; /*\\n                                                                                                                                                          \\n                                                                                                                                                            Track Types\\n                                                                                                                                                          \\n                                                                                                                                                          *///# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy90cmFja1R5cGVzLmpzP2IxYjUiXSwibmFtZXMiOlsiSHRtbDVUcmFjayIsIkJ1ZmZlclNvdXJjZVRyYWNrIiwiRWxlbWVudFNvdXJjZVRyYWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFNQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztrQkFFZSxFQUFFQSxnQ0FBRixFQUFjQyw4Q0FBZCxFQUFpQ0MsZ0RBQWpDLEUsRUFWZiIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblxuICBUcmFjayBUeXBlc1xuXG4qL1xuXG5pbXBvcnQgSHRtbDVUcmFjayBmcm9tICcuL0h0bWw1VHJhY2snXG5pbXBvcnQgQnVmZmVyU291cmNlVHJhY2sgZnJvbSAnLi9CdWZmZXJTb3VyY2VUcmFjaydcbmltcG9ydCBFbGVtZW50U291cmNlVHJhY2sgZnJvbSAnLi9FbGVtZW50U291cmNlVHJhY2snXG5cbmV4cG9ydCBkZWZhdWx0IHsgSHRtbDVUcmFjaywgQnVmZmVyU291cmNlVHJhY2ssIEVsZW1lbnRTb3VyY2VUcmFjayB9XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvdHJhY2tUeXBlcy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///7\\n\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 8 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\\\"value\\\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\\n\\nvar _WebAudioTrack2 = __webpack_require__(4);\\n\\nvar _WebAudioTrack3 = _interopRequireDefault(_WebAudioTrack2);\\n\\nvar _utils = __webpack_require__(0);\\n\\nvar _utils2 = _interopRequireDefault(_utils);\\n\\nvar _allNodes = __webpack_require__(1);\\n\\nvar _allNodes2 = _interopRequireDefault(_allNodes);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Web Audio API: Buffer Source track\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               \\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               */\\n\\n\\nvar BufferSourceTrack = function (_WebAudioTrack) {\\n  _inherits(BufferSourceTrack, _WebAudioTrack);\\n\\n  function BufferSourceTrack(params) {\\n    _classCallCheck(this, BufferSourceTrack);\\n\\n    var _this = _possibleConstructorReturn(this, (BufferSourceTrack.__proto__ || Object.getPrototypeOf(BufferSourceTrack)).call(this, params));\\n\\n    var track = _this;\\n\\n    var defaults = {\\n      id: '',\\n      src: '',\\n      volume: 1,\\n      start: 0,\\n      loop: false,\\n      autoplay: false,\\n      autoload: true,\\n      context: false,\\n      mix: false,\\n      nodes: []\\n    };\\n\\n    track.options = Object.assign(defaults, params);\\n\\n    track.status = {\\n      ready: false,\\n      shouldPlayOnLoad: false,\\n\\n      playing: false,\\n      muted: track.options.muted || false\\n\\n      // internal flags and data\\n    };track.data = {\\n      gain: track.options.volume,\\n\\n      // manual time tracking\\n      cachedTime: 0,\\n      startTime: 0\\n    };\\n\\n    if (!track.options.context) {\\n      throw new Error('Can’t create a WebAudioTrack without Web Audio API support');\\n    }\\n\\n    if (!track.options.src) {\\n      throw new Error('Can’t create a WebAudioTrack without a src parameter');\\n    }\\n\\n    // limited subset of events available because they're all simulated\\n    var eventNames = ['loadstart', 'loadedmetadata', 'canplay', 'canplaythrough', 'play', 'pause', 'ended', 'error'];\\n\\n    // load the source the right away, even if autoplay isn't set.\\n    if (track.options.autoload || track.options.autoplay) {\\n      track.load();\\n    }\\n\\n    return _this;\\n  }\\n\\n  /*\\n     Playback needs to wait for the track to be loaded.\\n    After this, it's a synchronous function.\\n     You can listen for the 'canplaythrough' event to ensure\\n    synchronous playback of multiple buffer tracks.\\n   */\\n\\n\\n  _createClass(BufferSourceTrack, [{\\n    key: 'play',\\n    value: function play() {\\n      var track = this;\\n\\n      // this logic accomodates calling play() multiple times\\n      // while waiting for the track to be set up\\n\\n      if (track.status.playing) return track;\\n\\n      if (!track.status.ready) {\\n\\n        if (!track.options.autoload && !track.status.shouldPlayOnLoad) {\\n          track.load();\\n        }\\n\\n        track.status.shouldPlayOnLoad = true;\\n\\n        return track;\\n      }\\n\\n      /*\\n         if we got this far we're actually ready to play, let's go!\\n       */\\n\\n      var ctx = track.options.context;\\n\\n      // the buffer needs to be re-created every time we play()\\n      track.data.source = ctx.createBufferSource();\\n      track.data.source.buffer = track.data.decodedBuffer;\\n\\n      // track.data.source.loop = (track.options.loop) ? true : false\\n\\n      // as do the nodes\\n      var gainNode = { type: 'GainNode', options: { gain: track.data.gain } };\\n      _get(BufferSourceTrack.prototype.__proto__ || Object.getPrototypeOf(BufferSourceTrack.prototype), 'createNodes', this).call(this, [gainNode].concat(_toConsumableArray(track.options.nodes)), track.data.source);\\n\\n      track.data.startTime = track.data.source.context.currentTime - track.data.cachedTime;\\n      var startFrom = track.data.cachedTime || 0;\\n\\n      // prefer start() but fall back to older, deprecated noteOn()\\n      if (typeof track.data.source.start === 'function') {\\n        track.data.source.start(0, startFrom);\\n      } else {\\n        track.data.source.noteOn(startFrom);\\n      }\\n\\n      track.setEndTimer();\\n\\n      track.status.playing = true;\\n      _get(BufferSourceTrack.prototype.__proto__ || Object.getPrototypeOf(BufferSourceTrack.prototype), 'trigger', this).call(this, 'play', track);\\n\\n      return track;\\n    }\\n\\n    /*\\n       Buffer source mode requires the source file to be fully loaded\\n      and decoded before it can be play, so here we fetch it as an\\n      array buffer (because it needs to be in raw binary format to be\\n      decoded).\\n       Web Audio API has the same browser support as fetch (no IE,\\n      not even 11), so we can use this delightful method.\\n     */\\n\\n  }, {\\n    key: 'load',\\n    value: function load() {\\n      var _this2 = this;\\n\\n      var track = this;\\n      var ctx = track.options.context;\\n\\n      _get(BufferSourceTrack.prototype.__proto__ || Object.getPrototypeOf(BufferSourceTrack.prototype), 'trigger', this).call(this, 'loadstart');\\n\\n      return window.fetch(track.options.src).then(function (res) {\\n        return res.arrayBuffer();\\n      }).then(function (audioData) {\\n        track.data.audioData = audioData;\\n\\n        // Decode audio data\\n        if (typeof ctx.createGain === 'function') {\\n\\n          // W3C standard implementation - async (Firefox, recent Chrome)\\n          return new Promise(function (resolve, reject) {\\n            ctx.decodeAudioData(audioData, function (decodedBuffer) {\\n              track.data.decodedBuffer = decodedBuffer;\\n              resolve();\\n            });\\n          });\\n        } else if (typeof ctx.createGainNode === 'function') {\\n\\n          // Non-standard Webkit implementation (Safari, old Chrome)\\n          // not async but we fake it for consistency\\n          var decodedBuffer = ctx.createBuffer(audioData, true);\\n          track.data.decodedBuffer = decodedBuffer;\\n          return Promise.resolve();\\n        }\\n      }).then(function () {\\n\\n        track.status.ready = true;\\n\\n        // now that the source is decoded, we know its duration\\n        _get(BufferSourceTrack.prototype.__proto__ || Object.getPrototypeOf(BufferSourceTrack.prototype), 'trigger', _this2).call(_this2, 'loadedmetadata');\\n        _get(BufferSourceTrack.prototype.__proto__ || Object.getPrototypeOf(BufferSourceTrack.prototype), 'trigger', _this2).call(_this2, 'canplay');\\n        _get(BufferSourceTrack.prototype.__proto__ || Object.getPrototypeOf(BufferSourceTrack.prototype), 'trigger', _this2).call(_this2, 'canplaythrough');\\n\\n        if (track.options.autoplay || track.status.shouldPlayOnLoad) {\\n          track.play();\\n        }\\n      });\\n    }\\n\\n    /*\\n       Buffer tracks don't have an ended event so we simulate it using setTimeout\\n     */\\n\\n  }, {\\n    key: 'setEndTimer',\\n    value: function setEndTimer() {\\n      var track = this;\\n      var startFrom = track.data.cachedTime || 0;\\n      track.data.timerDuration = track.data.source.buffer.duration - startFrom;\\n\\n      if (track.data.onendtimer) {\\n        window.clearTimeout(track.data.onendtimer);\\n      }\\n\\n      track.data.onendtimer = window.setTimeout(track.ended.bind(track), track.data.timerDuration * 1000);\\n    }\\n  }, {\\n    key: 'ended',\\n    value: function ended() {\\n      var track = this;\\n      if (track.options.loop) {\\n        _get(BufferSourceTrack.prototype.__proto__ || Object.getPrototypeOf(BufferSourceTrack.prototype), 'trigger', this).call(this, 'loop', track);\\n        track.pause(0);\\n        track.play();\\n      } else {\\n        _get(BufferSourceTrack.prototype.__proto__ || Object.getPrototypeOf(BufferSourceTrack.prototype), 'trigger', this).call(this, 'ended', track);\\n      }\\n    }\\n\\n    // end of play functions\\n    // ********************************************************\\n\\n\\n  }, {\\n    key: 'pause',\\n    value: function pause(pauseAtTime) {\\n      var track = this;\\n\\n      // disable autoplay, if we've paused the track before it's had a chance to load\\n      if (!track.status.playing && track.status.shouldPlayOnLoad) {\\n        track.status.shouldPlayOnLoad = false;\\n        track.options.autoplay = false;\\n        return track;\\n      }\\n\\n      track.data.cachedTime = typeof pauseAtTime === 'number' ? pauseAtTime : track.currentTime();\\n\\n      track.status.playing = false;\\n\\n      if (track.data.onendtimer) window.clearTimeout(track.data.onendtimer);\\n\\n      // prefer stop(), fallback to deprecated noteOff()\\n      if (typeof track.data.source.stop === 'function') track.data.source.stop(0);else if (typeof track.data.source.noteOff === 'function') track.data.source.noteOff(0);\\n\\n      _get(BufferSourceTrack.prototype.__proto__ || Object.getPrototypeOf(BufferSourceTrack.prototype), 'trigger', this).call(this, 'pause', track);\\n\\n      return track;\\n    }\\n  }, {\\n    key: 'currentTime',\\n    value: function currentTime(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === 'number') {\\n\\n        if (track.status.playing) {\\n          // to seek a buffer track, we need to pause and play\\n          pause(setTo).play();\\n        } else {\\n          // if we're paused or not loaded yet, cache the time\\n          track.data.cachedTime = setTo;\\n        }\\n\\n        return track;\\n      }\\n\\n      if (!track.status.ready || !track.status.playing) return track.data.cachedTime || 0;\\n\\n      return track.data.source.context.currentTime - track.data.startTime || 0;\\n    }\\n  }, {\\n    key: 'formattedTime',\\n    value: function formattedTime(includeDuration) {\\n      var track = this;\\n      if (includeDuration) return _utils2.default.timeFormat(track.currentTime()) + '/' + _utils2.default.timeFormat(track.duration());else return _utils2.default.timeFormat(track.currentTime());\\n    }\\n  }, {\\n    key: 'duration',\\n    value: function duration() {\\n      var track = this;\\n\\n      if (!track.status.ready) {\\n        return 0;\\n      }\\n\\n      return track.data.source.buffer.duration || 0;\\n    }\\n\\n    // for a buffer track, volume() is basically an alias for the gain node\\n\\n  }, {\\n    key: 'volume',\\n    value: function volume(setTo) {\\n      var track = this;\\n      var gainNode = track.node('GainNode');\\n\\n      if (typeof setTo === 'number') {\\n        setTo = _utils2.default.normalize(setTo);\\n\\n        if (track.status.muted) {\\n          track.data.gainCache = setTo; // cache the value for when we unmute\\n          track.data.gain = 0;\\n        } else {\\n          track.data.gain = setTo;\\n        }\\n\\n        if (track.status.playing) {\\n          if (gainNode) gainNode.gain(track.options.mix ? track.data.gain * track.options.mix.volume() : track.data.gain);\\n        }\\n\\n        return track;\\n      } else {\\n\\n        // accurately report gain while we’re tweening it\\n        if (track.status.playing) if (gainNode) track.data.gain = gainNode.gain();\\n\\n        return track.data.gain;\\n      }\\n    }\\n  }, {\\n    key: 'tweenVolume',\\n    value: function tweenVolume(setTo, duration) {\\n      var track = this;\\n\\n      // remove existing volume tween\\n      if (track.volumeTween) {\\n        window.cancelAnimationFrame(track.volumeTween);\\n      }\\n\\n      // if we're playing, we can use the native value ramp method\\n      var gainNode = track.node('GainNode');\\n      if (gainNode) {\\n        if (typeof gainNode.gain.exponentialRampToValueAtTime === 'function') {\\n          return new Promise(function (resolve, reject) {\\n            setTo = _utils2.default.normalize(setTo);\\n            if (setTo === 0) setTo = 0.000001; // can't use zero for ramps\\n\\n            gainNode.gain.exponentialRampToValueAtTime(setTo, track.options.context.currentTime + duration);\\n\\n            setTimeout(function () {\\n              return resolve();\\n            }, duration * 1000);\\n          });\\n        }\\n      }\\n\\n      // if we're not playing or haven't loaded yet,\\n      // fall back to requestAnimationFrame\\n      return new Promise(function (resolve, reject) {\\n\\n        var fps = 60; // requestAnimationFrame\\n        var durationInFrames = Math.round(duration * fps);\\n        var frameCount = Math.round(duration * fps);\\n        var startVolume = track.volume();\\n        var endVolume = _utils2.default.normalize(setTo);\\n\\n        tick();\\n\\n        function tick() {\\n          if (frameCount <= 0) {\\n            track.volume(endVolume);\\n            resolve(track);\\n          } else {\\n            track.volumeTween = window.requestAnimationFrame(tick);\\n          }\\n\\n          frameCount -= 1;\\n          var progress = 1 - frameCount / durationInFrames;\\n          var v = _utils2.default.lerp(startVolume, endVolume, progress);\\n          track.volume(v);\\n        }\\n      });\\n    }\\n  }, {\\n    key: 'muted',\\n    value: function muted(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === 'boolean') {\\n        if (setTo === true) {\\n\\n          // mute: cache current gain, then set to 0\\n          track.data.gainCache = track.data.gain;\\n          track.volume(0);\\n          track.status.muted = true;\\n        } else {\\n\\n          // unmute\\n          track.status.muted = false;\\n          track.volume(track.data.gainCache);\\n        }\\n        return track;\\n      }\\n\\n      return track.status.muted;\\n    }\\n  }, {\\n    key: 'paused',\\n    value: function paused() {\\n      var track = this;\\n      return !track.status.playing;\\n    }\\n  }, {\\n    key: 'destroy',\\n    value: function destroy() {\\n      var track = this;\\n\\n      track.pause();\\n    }\\n  }]);\\n\\n  return BufferSourceTrack;\\n}(_WebAudioTrack3.default);\\n\\nmodule.exports = BufferSourceTrack;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///8\\n\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 9 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\\nnain Node\\nnlet g = new GainNode({\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         context: context,\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         gain:    1,\\n})\\nng.node -> the web audio node object\\nng.gain(setTo) -> getter/setter\\ng.muted(setTo) -> getter/setter\\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       g.tweenGain(setTo, duration)\\nnn\\n\\nvar _utils = __webpack_require__(0);\\n\\nvar _utils2 = _interopRequireDefault(_utils);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nvar GainNode = function () {\\n  function GainNode(params) {\\n    _classCallCheck(this, GainNode);\\n\\n    this.ctx = params.context;\\n    this.node = this.ctx.createGainNode ? this.ctx.createGainNode() : this.ctx.createGain();\\n\\n    this.gainValue = 1;\\n    this.gain(typeof params.gain === 'number' ? params.gain : 1);\\n  }\\n\\n  _createClass(GainNode, [{\\n    key: 'connect',\\n    value: function connect(to) {\\n      this.node.connect(to);\\n    }\\n  }, {\\n    key: 'gain',\\n    value: function gain(setTo) {\\n      if (typeof setTo === 'number') {\\n        /*\\n           Apparently, it's bad form to set gain.value directly now, ie\\n          'this.node.gain.value = u.normalize(setTo, 0, 1)'\\n           Recommended behaviour now is ,\\n           - https://www.chromestatus.com/features/5287995770929152\\n          - https://github.com/mrdoob/three.js/pull/11133\\n         */\\n\\n        this.node.gain.value = _utils2.default.normalize(setTo, 0, 1);\\n\\n        // let frame = 60/1000\\n\\n        // // setTargetAtTime( value, start time (clamped to current time), time constant )\\n        // this.node.gain.setTargetAtTime(u.normalize(setTo, 0, 1), 0, 10)\\n\\n        // // this.node.gain.linearRampToValueAtTime(u.normalize(setTo, 0, 1), this.ctx.currentTime + frame) // value, start time\\n      }\\n      return this.node.gain.value;\\n    }\\n\\n    // tweenGain(0, 1, 'linear')\\n\\n  }, {\\n    key: 'tweenGain',\\n    value: function tweenGain(setTo, duration, rampType) {\\n      // rampType should default to exponential, not linear, for more\\n      // even sounding crossfading (no volume dip in the middle)\\n    }\\n  }, {\\n    key: 'muted',\\n    value: function muted(setTo) {}\\n  }]);\\n\\n  return GainNode;\\n}();\\n\\nexports.default = GainNode;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9ub2Rlcy9HYWluTm9kZS5qcz9kY2VmIl0sIm5hbWVzIjpbIkdhaW5Ob2RlIiwicGFyYW1zIiwiY3R4IiwiY29udGV4dCIsIm5vZGUiLCJjcmVhdGVHYWluTm9kZSIsImNyZWF0ZUdhaW4iLCJnYWluVmFsdWUiLCJnYWluIiwidG8iLCJjb25uZWN0Iiwic2V0VG8iLCJ2YWx1ZSIsIm5vcm1hbGl6ZSIsImR1cmF0aW9uIiwicmFtcFR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7OztxakJBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkE7Ozs7Ozs7O0lBRU1BLFE7QUFDSixvQkFBWUMsTUFBWixFQUFtQjtBQUFBOztBQUNqQixTQUFLQyxHQUFMLEdBQVdELE9BQU9FLE9BQWxCO0FBQ0EsU0FBS0MsSUFBTCxHQUFZLEtBQUtGLEdBQUwsQ0FBU0csY0FBVCxHQUEwQixLQUFLSCxHQUFMLENBQVNHLGNBQVQsRUFBMUIsR0FBc0QsS0FBS0gsR0FBTCxDQUFTSSxVQUFULEVBQWxFOztBQUVBLFNBQUtDLFNBQUwsR0FBaUIsQ0FBakI7QUFDQSxTQUFLQyxJQUFMLENBQVcsT0FBT1AsT0FBT08sSUFBZCxLQUF1QixRQUF2QixHQUFrQ1AsT0FBT08sSUFBekMsR0FBZ0QsQ0FBM0Q7QUFDRDs7Ozs0QkFFT0MsRSxFQUFHO0FBQ1QsV0FBS0wsSUFBTCxDQUFVTSxPQUFWLENBQWtCRCxFQUFsQjtBQUNEOzs7eUJBRUlFLEssRUFBTTtBQUNULFVBQUcsT0FBT0EsS0FBUCxLQUFpQixRQUFwQixFQUE2QjtBQUMzQjs7Ozs7Ozs7QUFZQSxhQUFLUCxJQUFMLENBQVVJLElBQVYsQ0FBZUksS0FBZixHQUF1QixnQkFBRUMsU0FBRixDQUFZRixLQUFaLEVBQW1CLENBQW5CLEVBQXNCLENBQXRCLENBQXZCOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFFRDtBQUNELGFBQU8sS0FBS1AsSUFBTCxDQUFVSSxJQUFWLENBQWVJLEtBQXRCO0FBQ0Q7O0FBR0Q7Ozs7OEJBQ1VELEssRUFBT0csUSxFQUFVQyxRLEVBQVM7QUFDbEM7QUFDQTtBQUNEOzs7MEJBRUtKLEssRUFBTSxDQUVYOzs7Ozs7a0JBR1lYLFEiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5cbiAgR2FpbiBOb2RlXG5cbiAgbGV0IGcgPSBuZXcgR2Fpbk5vZGUoe1xuICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgZ2FpbjogICAgMSxcbiAgfSlcblxuICBnLm5vZGUgLT4gdGhlIHdlYiBhdWRpbyBub2RlIG9iamVjdFxuXG4gIGcuZ2FpbihzZXRUbykgLT4gZ2V0dGVyL3NldHRlclxuICBnLm11dGVkKHNldFRvKSAtPiBnZXR0ZXIvc2V0dGVyXG5cbiAgZy50d2VlbkdhaW4oc2V0VG8sIGR1cmF0aW9uKVxuXG4qL1xuaW1wb3J0IHUgZnJvbSAnLi4vdXRpbHMnXG5cbmNsYXNzIEdhaW5Ob2RlIHtcbiAgY29uc3RydWN0b3IocGFyYW1zKXtcbiAgICB0aGlzLmN0eCA9IHBhcmFtcy5jb250ZXh0XG4gICAgdGhpcy5ub2RlID0gdGhpcy5jdHguY3JlYXRlR2Fpbk5vZGUgPyB0aGlzLmN0eC5jcmVhdGVHYWluTm9kZSgpIDogdGhpcy5jdHguY3JlYXRlR2FpbigpXG5cbiAgICB0aGlzLmdhaW5WYWx1ZSA9IDFcbiAgICB0aGlzLmdhaW4oIHR5cGVvZiBwYXJhbXMuZ2FpbiA9PT0gJ251bWJlcicgPyBwYXJhbXMuZ2FpbiA6IDEgKVxuICB9XG5cbiAgY29ubmVjdCh0byl7XG4gICAgdGhpcy5ub2RlLmNvbm5lY3QodG8pXG4gIH1cblxuICBnYWluKHNldFRvKXtcbiAgICBpZih0eXBlb2Ygc2V0VG8gPT09ICdudW1iZXInKXtcbiAgICAgIC8qXG5cbiAgICAgICAgQXBwYXJlbnRseSwgaXQncyBiYWQgZm9ybSB0byBzZXQgZ2Fpbi52YWx1ZSBkaXJlY3RseSBub3csIGllXG4gICAgICAgICd0aGlzLm5vZGUuZ2Fpbi52YWx1ZSA9IHUubm9ybWFsaXplKHNldFRvLCAwLCAxKSdcblxuICAgICAgICBSZWNvbW1lbmRlZCBiZWhhdmlvdXIgbm93IGlzICxcblxuICAgICAgICAtIGh0dHBzOi8vd3d3LmNocm9tZXN0YXR1cy5jb20vZmVhdHVyZXMvNTI4Nzk5NTc3MDkyOTE1MlxuICAgICAgICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvcHVsbC8xMTEzM1xuXG4gICAgICAqL1xuXG4gICAgICB0aGlzLm5vZGUuZ2Fpbi52YWx1ZSA9IHUubm9ybWFsaXplKHNldFRvLCAwLCAxKVxuXG4gICAgICAvLyBsZXQgZnJhbWUgPSA2MC8xMDAwXG5cbiAgICAgIC8vIC8vIHNldFRhcmdldEF0VGltZSggdmFsdWUsIHN0YXJ0IHRpbWUgKGNsYW1wZWQgdG8gY3VycmVudCB0aW1lKSwgdGltZSBjb25zdGFudCApXG4gICAgICAvLyB0aGlzLm5vZGUuZ2Fpbi5zZXRUYXJnZXRBdFRpbWUodS5ub3JtYWxpemUoc2V0VG8sIDAsIDEpLCAwLCAxMClcblxuICAgICAgLy8gLy8gdGhpcy5ub2RlLmdhaW4ubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUodS5ub3JtYWxpemUoc2V0VG8sIDAsIDEpLCB0aGlzLmN0eC5jdXJyZW50VGltZSArIGZyYW1lKSAvLyB2YWx1ZSwgc3RhcnQgdGltZVxuXG4gICAgfVxuICAgIHJldHVybiB0aGlzLm5vZGUuZ2Fpbi52YWx1ZVxuICB9XG5cblxuICAvLyB0d2VlbkdhaW4oMCwgMSwgJ2xpbmVhcicpXG4gIHR3ZWVuR2FpbihzZXRUbywgZHVyYXRpb24sIHJhbXBUeXBlKXtcbiAgICAvLyByYW1wVHlwZSBzaG91bGQgZGVmYXVsdCB0byBleHBvbmVudGlhbCwgbm90IGxpbmVhciwgZm9yIG1vcmVcbiAgICAvLyBldmVuIHNvdW5kaW5nIGNyb3NzZmFkaW5nIChubyB2b2x1bWUgZGlwIGluIHRoZSBtaWRkbGUpXG4gIH1cblxuICBtdXRlZChzZXRUbyl7XG5cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHYWluTm9kZVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9tb2R1bGVzL25vZGVzL0dhaW5Ob2RlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///9\\n\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 10 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n/*\\n\\n  Pan Node (2D - left/right)\\n\\n*/\\n\\nvar PanNode2D = function PanNode2D(params) {\\n  _classCallCheck(this, PanNode2D);\\n\\n  var ctx = params.context;\\n\\n  // the name of this function is the same for\\n  // both prefixed and unprefixed audio contexts\\n  this.node = ctx.createPanner();\\n\\n  // additional setup here\\n};\\n\\nexports.default = PanNode2D;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9ub2Rlcy9QYW5uZXJOb2RlMkQuanM/ZWY5MCJdLCJuYW1lcyI6WyJQYW5Ob2RlMkQiLCJwYXJhbXMiLCJjdHgiLCJjb250ZXh0Iiwibm9kZSIsImNyZWF0ZVBhbm5lciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7O0lBTU1BLFMsR0FDSixtQkFBWUMsTUFBWixFQUFtQjtBQUFBOztBQUNqQixNQUFJQyxNQUFNRCxPQUFPRSxPQUFqQjs7QUFFQTtBQUNBO0FBQ0EsT0FBS0MsSUFBTCxHQUFZRixJQUFJRyxZQUFKLEVBQVo7O0FBRUE7QUFDRCxDOztrQkFHWUwsUyIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5cbiAgUGFuIE5vZGUgKDJEIC0gbGVmdC9yaWdodClcblxuKi9cblxuY2xhc3MgUGFuTm9kZTJEIHtcbiAgY29uc3RydWN0b3IocGFyYW1zKXtcbiAgICBsZXQgY3R4ID0gcGFyYW1zLmNvbnRleHRcblxuICAgIC8vIHRoZSBuYW1lIG9mIHRoaXMgZnVuY3Rpb24gaXMgdGhlIHNhbWUgZm9yXG4gICAgLy8gYm90aCBwcmVmaXhlZCBhbmQgdW5wcmVmaXhlZCBhdWRpbyBjb250ZXh0c1xuICAgIHRoaXMubm9kZSA9IGN0eC5jcmVhdGVQYW5uZXIoKVxuXG4gICAgLy8gYWRkaXRpb25hbCBzZXR1cCBoZXJlXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGFuTm9kZTJEXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21vZHVsZXMvbm9kZXMvUGFubmVyTm9kZTJELmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///10\\n\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 11 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n/*\\n\\n  Pan Node (3D)\\n\\n*/\\n\\nvar PanNode3D = function PanNode3D(params) {\\n  _classCallCheck(this, PanNode3D);\\n\\n  var ctx = params.context;\\n\\n  // the name of this function is the same for\\n  // both prefixed and unprefixed audio contexts\\n  this.node = ctx.createPanner();\\n\\n  // additional setup here\\n};\\n\\nexports.default = PanNode3D;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9kdWxlcy9ub2Rlcy9QYW5uZXJOb2RlLmpzPzEwOGIiXSwibmFtZXMiOlsiUGFuTm9kZTNEIiwicGFyYW1zIiwiY3R4IiwiY29udGV4dCIsIm5vZGUiLCJjcmVhdGVQYW5uZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7OztJQU1NQSxTLEdBQ0osbUJBQVlDLE1BQVosRUFBbUI7QUFBQTs7QUFDakIsTUFBSUMsTUFBTUQsT0FBT0UsT0FBakI7O0FBRUE7QUFDQTtBQUNBLE9BQUtDLElBQUwsR0FBWUYsSUFBSUcsWUFBSixFQUFaOztBQUVBO0FBQ0QsQzs7a0JBSVlMLFMiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXG4gIFBhbiBOb2RlICgzRClcblxuKi9cblxuY2xhc3MgUGFuTm9kZTNEIHtcbiAgY29uc3RydWN0b3IocGFyYW1zKXtcbiAgICBsZXQgY3R4ID0gcGFyYW1zLmNvbnRleHRcblxuICAgIC8vIHRoZSBuYW1lIG9mIHRoaXMgZnVuY3Rpb24gaXMgdGhlIHNhbWUgZm9yXG4gICAgLy8gYm90aCBwcmVmaXhlZCBhbmQgdW5wcmVmaXhlZCBhdWRpbyBjb250ZXh0c1xuICAgIHRoaXMubm9kZSA9IGN0eC5jcmVhdGVQYW5uZXIoKVxuXG4gICAgLy8gYWRkaXRpb25hbCBzZXR1cCBoZXJlXG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBQYW5Ob2RlM0RcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbW9kdWxlcy9ub2Rlcy9QYW5uZXJOb2RlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///11\\n\");\n\n\t\t\t/***/\n\t\t},\n\t\t/* 12 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t\"use strict\";\n\n\t\t\teval(\"\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\\n\\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\\\"value\\\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } }; /*\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              Web Audio API: Element Source track\\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            \\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */\\n\\n\\nvar _WebAudioTrack2 = __webpack_require__(4);\\n\\nvar _WebAudioTrack3 = _interopRequireDefault(_WebAudioTrack2);\\n\\nvar _utils = __webpack_require__(0);\\n\\nvar _utils2 = _interopRequireDefault(_utils);\\n\\nvar _allNodes = __webpack_require__(1);\\n\\nvar _allNodes2 = _interopRequireDefault(_allNodes);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return call && (typeof call === \\\"object\\\" || typeof call === \\\"function\\\") ? call : self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function, not \\\" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\\n\\nvar ElementSourceTrack = function (_WebAudioTrack) {\\n  _inherits(ElementSourceTrack, _WebAudioTrack);\\n\\n  function ElementSourceTrack(params) {\\n    _classCallCheck(this, ElementSourceTrack);\\n\\n    var _this = _possibleConstructorReturn(this, (ElementSourceTrack.__proto__ || Object.getPrototypeOf(ElementSourceTrack)).call(this, params));\\n\\n    var track = _this;\\n\\n    var defaults = {\\n      id: '',\\n      src: '',\\n      volume: 1,\\n      start: 0,\\n      loop: false,\\n      autoplay: false,\\n      context: false,\\n      mix: false,\\n      nodes: []\\n    };\\n\\n    track.options = Object.assign(defaults, params);\\n\\n    if (!track.options.context) {\\n      throw new Error('Can’t create an ElementSourceTrack without Web Audio API support');\\n    }\\n\\n    // set up our HTML5 <audio> element\\n    if (!track.options.src) {\\n      throw new Error('Can’t create an ElementSourceTrack without a src parameter');\\n    }\\n\\n    track.el = document.createElement('audio');\\n\\n    track.el.volume = track.options.volume;\\n    track.el.muted = track.options.muted;\\n    track.el.loop = track.options.loop;\\n    track.el.autoplay = track.options.autoplay;\\n\\n    track.el.src = track.options.src;\\n\\n    var eventNames = ['loadstart', 'loadedmetadata', 'canplay', 'canplaythrough', 'play', 'pause', 'ended', 'timeupdate', 'seeking', 'seeked', 'error'];\\n\\n    eventNames.forEach(function (eventName) {\\n      track.el.addEventListener(eventName, _get(ElementSourceTrack.prototype.__proto__ || Object.getPrototypeOf(ElementSourceTrack.prototype), 'trigger', _this).bind(track, eventName, false));\\n    });\\n\\n    // web audio API setup (only needs to happen once)\\n    track.data.source = track.options.context.createMediaElementSource(track.el);\\n\\n    var gainNode = { type: 'GainNode', options: { gain: track.data.gain } };\\n    _get(ElementSourceTrack.prototype.__proto__ || Object.getPrototypeOf(ElementSourceTrack.prototype), 'createNodes', _this).call(_this, [gainNode].concat(_toConsumableArray(track.options.nodes)), track.data.source);\\n\\n    return _this;\\n  }\\n\\n  _createClass(ElementSourceTrack, [{\\n    key: 'play',\\n    value: function play() {\\n      this.el.play();\\n      return this;\\n    }\\n  }, {\\n    key: 'pause',\\n    value: function pause() {\\n      this.el.pause();\\n      return this;\\n    }\\n  }, {\\n    key: 'stop',\\n    value: function stop() {\\n      this.el.pause();\\n      this.el.currentTime = 0;\\n      return this;\\n    }\\n  }, {\\n    key: 'currentTime',\\n    value: function currentTime(setTo) {\\n      var track = this;\\n      if (typeof setTo === 'number') {\\n        track.el.currentTime = setTo;\\n        return track;\\n      } else {\\n        return track.el.currentTime;\\n      }\\n    }\\n  }, {\\n    key: 'duration',\\n    value: function duration() {\\n      return track.el.duration;\\n    }\\n  }, {\\n    key: 'formattedTime',\\n    value: function formattedTime(includeDuration) {\\n      var track = this;\\n      if (includeDuration) return _utils2.default.timeFormat(track.currentTime()) + '/' + _utils2.default.timeFormat(track.duration());else return _utils2.default.timeFormat(track.currentTime());\\n    }\\n  }, {\\n    key: 'volume',\\n    value: function volume(setTo) {\\n      var track = this;\\n      var gainNode = track.node('GainNode');\\n\\n      if (typeof setTo === 'number') {\\n        setTo = _utils2.default.normalize(setTo);\\n        setTo = track.options.mix ? setTo * track.options.mix.volume() : setTo;\\n\\n        // we don't need to set both the gain node and element volume,\\n        // just the gain node will work, but element volume is a useful place\\n        // to store the current volume value\\n\\n        if (gainNode) gainNode.gain(setTo);\\n        track.el.volume = setTo;\\n\\n        return track;\\n      } else {\\n        return track.el.volume;\\n      }\\n    }\\n  }, {\\n    key: 'tweenVolume',\\n    value: function tweenVolume(setTo, duration) {\\n      var track = this;\\n\\n      // replace existing volume tween\\n      if (track.volumeTween) {\\n        window.cancelAnimationFrame(track.volumeTween);\\n      }\\n\\n      return new Promise(function (resolve, reject) {\\n\\n        var fps = 60; // requestAnimationFrame\\n        var durationInFrames = Math.round(duration * fps);\\n        var frameCount = Math.round(duration * fps);\\n        var startVolume = track.volume();\\n        var endVolume = _utils2.default.normalize(setTo);\\n\\n        tick();\\n\\n        function tick() {\\n          if (frameCount <= 0) {\\n            track.volume(endVolume);\\n            resolve(track);\\n          } else {\\n            track.volumeTween = window.requestAnimationFrame(tick);\\n          }\\n\\n          frameCount -= 1;\\n          var progress = 1 - frameCount / durationInFrames;\\n          var v = _utils2.default.lerp(startVolume, endVolume, progress);\\n          track.volume(v);\\n        }\\n      });\\n    }\\n  }, {\\n    key: 'muted',\\n    value: function muted(setTo) {\\n      var track = this;\\n      if (typeof setTo === 'boolean') {\\n        track.el.muted = setTo;\\n      }\\n      return track.el.muted;\\n    }\\n  }, {\\n    key: 'destroy',\\n    value: function destroy() {\\n      var track = this;\\n      track.pause();\\n    }\\n  }, {\\n    key: 'paused',\\n    value: function paused() {\\n      var track = this;\\n      return track.el.paused;\\n    }\\n  }]);\\n\\n  return ElementSourceTrack;\\n}(_WebAudioTrack3.default);\\n\\nexports.default = ElementSourceTrack;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///12\\n\");\n\n\t\t\t/***/\n\t\t}]\n\t\t/******/)\n\t);\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif(!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif(!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar m = __webpack_require__(0);\nvar Stream = __webpack_require__(1);\n\nvar Dropzone = __webpack_require__(12);\n\nmodule.exports = {\n\n  oninit: function oninit(vnode) {\n    var state = this;\n\n    var mix = vnode.attrs.mix;\n\n    var defaults = {\n      id: '',\n      src: '',\n      type: 'Html5Track',\n      loop: false,\n      autoplay: false,\n      muted: false\n      // timeline: [],\n    };\n\n    state.options = Stream({});\n\n    state.create = create;\n    state.reset = reset;\n    state.set = set;\n    state.get = get;\n    state.remove = remove;\n    state.node = node;\n\n    setup();\n\n    // ********************************************************\n\n    function setup() {\n      reset();\n    }\n\n    function create() {\n      var options = state.options();\n      console.log(options);\n      mix.track(options.id, options);\n      reset();\n    }\n\n    function reset() {\n      state.options(Object.assign({}, defaults));\n      m.redraw();\n    }\n\n    function set(prop, val) {\n      var info = state.options();\n      info[prop] = val;\n      state.options(info);\n      m.redraw();\n    }\n\n    function remove(prop) {\n      var info = state.options();\n      delete info[prop];\n      state.options(info);\n      m.redraw();\n    }\n\n    function get(prop) {\n      var info = state.options();\n      return info[prop];\n    }\n\n    function node(type, setTo) {\n      var options = state.options();\n      if (!options.nodes) return false;\n\n      if (type) {\n        if (typeof setTo === 'boolean') {\n          if (options.nodes.indexOf(type) === -1) {\n            options.nodes.push(type);\n          } else {\n            options.nodes.splice(options.nodes.indexOf(type), 1);\n          }\n          state.options(options);\n        } else {\n          return options.nodes.indexOf(type) !== -1;\n        }\n      }\n    }\n  },\n\n  view: function view(vnode) {\n    var state = this;\n    return [m('.row', [\n\n    // ********************************************************\n\n    m('.col', [m('header', '1. Source file'), m(Dropzone, { hook: state.set.bind(null, 'src') })]),\n\n    // ********************************************************\n\n    m('.col', [m('header', '2. Options'), m('.input', [m('label', { for: 'input-name' }, 'Id'), m('input', {\n      id: 'input-name',\n      value: state.get('id'),\n      oninput: m.withAttr('value', state.set.bind(null, 'id'))\n    })]), m('.input', [m('label', { for: 'input-type' }, 'Type'), m('select', {\n      id: 'input-type',\n      oninput: function oninput() {\n        var value = this.value;\n        console.log(value);\n\n        state.set('type', value);\n        if (value === 'Html5Track') state.remove('nodes');else if (!state.get('nodes')) state.set('nodes', ['GainNode']);\n      },\n      value: state.get('type')\n    }, [m('option', { value: 'Html5Track' }, m.trust('&nbsp;&nbsp;HTML5')), m('optgroup', { label: 'Web Audio:' }), m('option', { value: 'BufferSourceTrack' }, m.trust('&nbsp;&nbsp;Buffer Source')), m('option', { value: 'ElementSourceTrack' }, m.trust('&nbsp;&nbsp;Element Source')), m('option', { value: 'StreamSourceTrack', disabled: true }, m.trust('&nbsp;&nbsp;Stream Source'))])]), checkbox.call(state, 'loop'), checkbox.call(state, 'autoplay'), checkbox.call(state, 'muted'), m('div', { style: { display: state.get('type') === 'Html5Track' ? 'none' : 'block' } }, [m('h4', 'nodes'), m('.input', [m('label', { for: 'input-node-GainNode' }, 'GainNode'), m('input', {\n      id: 'input-node-GainNode',\n      type: 'checkbox',\n      checked: true,\n      disabled: true\n      // onclick: m.withAttr('checked', state.node.bind(null, 'GainNode')),\n      // checked: state.get(id),\n    })]), nodeCheckbox.call(state, 'PanNode2D')])]),\n\n    // ********************************************************\n\n    m('.col.is-grow', [m('pre.options', [JSON.stringify(state.options(), ' ', 2)])]),\n\n    // ********************************************************\n\n    m('.col', [m('header', '3. Create!'), m('button.mod-red', { onclick: state.reset }, 'Reset Options'), m('button.mod-green', { onclick: state.create }, 'Create Track')])]\n\n    // ********************************************************\n\n    )];\n  }\n};\n\nfunction checkbox(id) {\n  var state = this;\n  return m('.input', [m('label', { for: 'input-' + id }, id), m('input', {\n    id: 'input-' + id,\n    type: 'checkbox',\n    onclick: m.withAttr('checked', state.set.bind(null, id)),\n    checked: state.get(id)\n  })]);\n}\n\nfunction nodeCheckbox(id) {\n  var state = this;\n  return m('.input', [m('label', { for: 'input-node-' + id }, id), m('input', {\n    id: 'input-node-' + id,\n    type: 'checkbox',\n    onclick: m.withAttr('checked', state.node.bind(null, id)),\n    checked: state.node(id)\n  })]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n\n  file drop or getusermedia\n\n*/\nvar m = __webpack_require__(0);\nvar Stream = __webpack_require__(1);\n\nmodule.exports = {\n\n  oncreate: function oncreate(vnode) {\n    var state = this;\n\n    vnode.dom.addEventListener('drop', drop);\n    vnode.dom.addEventListener('dragover', dragover);\n    vnode.dom.addEventListener('dragend', dragend);\n\n    function dragover(e) {\n      e.preventDefault();\n      this.classList.add('is-over');\n    }\n    function dragend(e) {\n      e.preventDefault();\n      this.classList.remove('is-over');\n    }\n\n    function drop(e) {\n      e.preventDefault();\n      this.classList.remove('is-over');\n      if (e.dataTransfer.items) {\n\n        for (var i = 0; i < e.dataTransfer.items.length; i++) {\n          var item = e.dataTransfer.items[i];\n          if (item.kind == \"file\") {\n            processFile(item.getAsFile());\n          }\n        }\n      } else {\n        for (var i = 0; i < e.dataTransfer.files.length; i++) {\n          processFile(e.dataTransfer.files[i]);\n        }\n      }\n    }\n\n    function processFile(file) {\n      vnode.attrs.hook(URL.createObjectURL(file));\n    }\n  },\n\n  view: function view(vnode) {\n    var state = this;\n    return m('.dropzone', [m('.dropzone-inner', ['Drop an audio file here'])]);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZW1vL2pzL21vZHVsZXMvZHJvcHpvbmUuanM/NWRlMiJdLCJuYW1lcyI6WyJtIiwicmVxdWlyZSIsIlN0cmVhbSIsIm1vZHVsZSIsImV4cG9ydHMiLCJvbmNyZWF0ZSIsInZub2RlIiwic3RhdGUiLCJkb20iLCJhZGRFdmVudExpc3RlbmVyIiwiZHJvcCIsImRyYWdvdmVyIiwiZHJhZ2VuZCIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsImRhdGFUcmFuc2ZlciIsIml0ZW1zIiwiaSIsImxlbmd0aCIsIml0ZW0iLCJraW5kIiwicHJvY2Vzc0ZpbGUiLCJnZXRBc0ZpbGUiLCJmaWxlcyIsImZpbGUiLCJhdHRycyIsImhvb2siLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJ2aWV3Il0sIm1hcHBpbmdzIjoiOztBQUFBOzs7OztBQUtBLElBQU1BLElBQUksbUJBQUFDLENBQVEsQ0FBUixDQUFWO0FBQ0EsSUFBTUMsU0FBUyxtQkFBQUQsQ0FBUSxDQUFSLENBQWY7O0FBRUFFLE9BQU9DLE9BQVAsR0FBaUI7O0FBRWZDLFlBQVUsa0JBQVNDLEtBQVQsRUFBZTtBQUN2QixRQUFJQyxRQUFRLElBQVo7O0FBRUFELFVBQU1FLEdBQU4sQ0FBVUMsZ0JBQVYsQ0FBMkIsTUFBM0IsRUFBbUNDLElBQW5DO0FBQ0FKLFVBQU1FLEdBQU4sQ0FBVUMsZ0JBQVYsQ0FBMkIsVUFBM0IsRUFBdUNFLFFBQXZDO0FBQ0FMLFVBQU1FLEdBQU4sQ0FBVUMsZ0JBQVYsQ0FBMkIsU0FBM0IsRUFBc0NHLE9BQXRDOztBQUVBLGFBQVNELFFBQVQsQ0FBa0JFLENBQWxCLEVBQW9CO0FBQ2xCQSxRQUFFQyxjQUFGO0FBQ0EsV0FBS0MsU0FBTCxDQUFlQyxHQUFmLENBQW1CLFNBQW5CO0FBQ0Q7QUFDRCxhQUFTSixPQUFULENBQWlCQyxDQUFqQixFQUFtQjtBQUNqQkEsUUFBRUMsY0FBRjtBQUNBLFdBQUtDLFNBQUwsQ0FBZUUsTUFBZixDQUFzQixTQUF0QjtBQUNEOztBQUVELGFBQVNQLElBQVQsQ0FBY0csQ0FBZCxFQUFnQjtBQUNkQSxRQUFFQyxjQUFGO0FBQ0EsV0FBS0MsU0FBTCxDQUFlRSxNQUFmLENBQXNCLFNBQXRCO0FBQ0EsVUFBR0osRUFBRUssWUFBRixDQUFlQyxLQUFsQixFQUF3Qjs7QUFFdEIsYUFBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlQLEVBQUVLLFlBQUYsQ0FBZUMsS0FBZixDQUFxQkUsTUFBekMsRUFBaURELEdBQWpELEVBQXNEO0FBQ3BELGNBQUlFLE9BQU9ULEVBQUVLLFlBQUYsQ0FBZUMsS0FBZixDQUFxQkMsQ0FBckIsQ0FBWDtBQUNBLGNBQUlFLEtBQUtDLElBQUwsSUFBYSxNQUFqQixFQUF5QjtBQUN2QkMsd0JBQVlGLEtBQUtHLFNBQUwsRUFBWjtBQUNEO0FBQ0Y7QUFFRixPQVRELE1BU087QUFDTCxhQUFLLElBQUlMLElBQUksQ0FBYixFQUFnQkEsSUFBSVAsRUFBRUssWUFBRixDQUFlUSxLQUFmLENBQXFCTCxNQUF6QyxFQUFpREQsR0FBakQsRUFBc0Q7QUFDcERJLHNCQUFhWCxFQUFFSyxZQUFGLENBQWVRLEtBQWYsQ0FBcUJOLENBQXJCLENBQWI7QUFDRDtBQUVGO0FBQ0Y7O0FBRUQsYUFBU0ksV0FBVCxDQUFxQkcsSUFBckIsRUFBMEI7QUFDeEJyQixZQUFNc0IsS0FBTixDQUFZQyxJQUFaLENBQWtCQyxJQUFJQyxlQUFKLENBQW9CSixJQUFwQixDQUFsQjtBQUNEO0FBQ0YsR0F6Q2M7O0FBMkNmSyxRQUFNLGNBQVMxQixLQUFULEVBQWU7QUFDbkIsUUFBSUMsUUFBUSxJQUFaO0FBQ0EsV0FBT1AsRUFBRSxXQUFGLEVBQWUsQ0FDcEJBLEVBQUUsaUJBQUYsRUFBcUIsQ0FDbkIseUJBRG1CLENBQXJCLENBRG9CLENBQWYsQ0FBUDtBQUtEO0FBbERjLENBQWpCIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblxuICBmaWxlIGRyb3Agb3IgZ2V0dXNlcm1lZGlhXG5cbiovXG5jb25zdCBtID0gcmVxdWlyZSgnbWl0aHJpbCcpXG5jb25zdCBTdHJlYW0gPSByZXF1aXJlKCdtaXRocmlsL3N0cmVhbScpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIG9uY3JlYXRlOiBmdW5jdGlvbih2bm9kZSl7XG4gICAgbGV0IHN0YXRlID0gdGhpc1xuXG4gICAgdm5vZGUuZG9tLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBkcm9wKVxuICAgIHZub2RlLmRvbS5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGRyYWdvdmVyKVxuICAgIHZub2RlLmRvbS5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgZHJhZ2VuZClcblxuICAgIGZ1bmN0aW9uIGRyYWdvdmVyKGUpe1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2lzLW92ZXInKVxuICAgIH1cbiAgICBmdW5jdGlvbiBkcmFnZW5kKGUpe1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLW92ZXInKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRyb3AoZSl7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnaXMtb3ZlcicpXG4gICAgICBpZihlLmRhdGFUcmFuc2Zlci5pdGVtcyl7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlLmRhdGFUcmFuc2Zlci5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBpdGVtID0gZS5kYXRhVHJhbnNmZXIuaXRlbXNbaV1cbiAgICAgICAgICBpZiAoaXRlbS5raW5kID09IFwiZmlsZVwiKSB7XG4gICAgICAgICAgICBwcm9jZXNzRmlsZShpdGVtLmdldEFzRmlsZSgpKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGUuZGF0YVRyYW5zZmVyLmZpbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgcHJvY2Vzc0ZpbGUoIGUuZGF0YVRyYW5zZmVyLmZpbGVzW2ldIClcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0ZpbGUoZmlsZSl7XG4gICAgICB2bm9kZS5hdHRycy5ob29rKCBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpIClcbiAgICB9XG4gIH0sXG5cbiAgdmlldzogZnVuY3Rpb24odm5vZGUpe1xuICAgIGxldCBzdGF0ZSA9IHRoaXNcbiAgICByZXR1cm4gbSgnLmRyb3B6b25lJywgW1xuICAgICAgbSgnLmRyb3B6b25lLWlubmVyJywgW1xuICAgICAgICAnRHJvcCBhbiBhdWRpbyBmaWxlIGhlcmUnXG4gICAgICBdKSxcbiAgICBdKVxuICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vZGVtby9qcy9tb2R1bGVzL2Ryb3B6b25lLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar m = __webpack_require__(0);\nvar Stream = __webpack_require__(1);\n\nvar formattedTime = {\n  oncreate: function oncreate(vnode) {\n    var state = this;\n    var track = vnode.attrs.track;\n\n    track.on('play', function () {\n      return updateTime();\n    });\n    track.on('pause', function () {\n      return cancelAnimationFrame(state.hook);\n    });\n\n    function updateTime() {\n      state.hook = requestAnimationFrame(updateTime);\n      vnode.dom.innerText = track.formattedTime();\n    }\n  },\n  onremove: function onremove(vnode) {\n    var state = this;\n    cancelAnimationFrame(state.hook);\n  },\n  view: function view(vnode) {\n    return m('.tracks-track-time', '00:00');\n  }\n\n  // ********************************************************\n\n};module.exports = {\n  oninit: function oninit(vnode) {\n    var state = this;\n    var mix = vnode.attrs.mix;\n  },\n  view: function view(vnode) {\n    var state = this;\n    var mix = vnode.attrs.mix;\n\n    return m('.tracks', [mix.tracks().length ? TrackListTracks.call(state, vnode) : TrackListEmpty()]);\n  }\n};\n\nfunction TrackListTracks(vnode) {\n  var state = this;\n  return vnode.attrs.mix.tracks().map(function (track) {\n\n    return m('.tracks-track', [m('.tracks-track-col.mod-id', track.options.id), m('.tracks-track-col', [m(formattedTime, { track: track })]),\n\n    // track controls\n    m('.tracks-track-col', [m('button', {\n      style: { display: track.paused() ? 'none' : 'block' },\n      onclick: function onclick() {\n        return track.pause();\n      }\n    }, '| |'), m('button', {\n      style: { display: track.paused() ? 'block' : 'none' },\n      onclick: function onclick() {\n        return track.play();\n      }\n    }, m.trust('&#9655;'))]), m('.tracks-track-col', [m('button', { onclick: function onclick() {\n        console.log('remove', track.options.id);\n        vnode.attrs.mix.remove(track);\n      } }, m.trust('&#10005;'))]), m('.tracks-track-col', [volumeControl.call(track)])]\n\n    // analysis.call(track)\n\n    );\n  });\n}\n\nfunction TrackListEmpty() {\n  return m('.tracks-track', ['no tracks']);\n}\n\nfunction volumeControl() {\n  var track = this;\n  return m('.volumecontrol', [m('.volumecontrol-label', 'Volume:'), m('input[type=\"range\"].volumecontrol-input', {\n    value: track.volume() * 100,\n    min: 0,\n    max: 100,\n    onchange: function onchange(e) {\n      return track.volume(e.target.value / 100);\n    }\n  }), m('.volumecontrol-label', Math.round(track.volume() * 100) + '%')]);\n}\n\n// ********************************************************\n\n// TO DO\n\n// ********************************************************\n\nfunction analysis() {\n  var track = this;\n  return m('.tracks-track-col', ['analysis']);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ })
/******/ ]);