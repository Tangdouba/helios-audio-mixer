!function(F){var l={};function V(c){if(l[c])return l[c].exports;var U=l[c]={i:c,l:!1,exports:{}};return F[c].call(U.exports,U,U.exports,V),U.l=!0,U.exports}V.m=F,V.c=l,V.d=function(F,l,c){V.o(F,l)||Object.defineProperty(F,l,{enumerable:!0,get:c})},V.r=function(F){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(F,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(F,"__esModule",{value:!0})},V.t=function(F,l){if(1&l&&(F=V(F)),8&l)return F;if(4&l&&"object"==typeof F&&F&&F.__esModule)return F;var c=Object.create(null);if(V.r(c),Object.defineProperty(c,"default",{enumerable:!0,value:F}),2&l&&"string"!=typeof F)for(var U in F)V.d(c,U,function(l){return F[l]}.bind(null,U));return c},V.n=function(F){var l=F&&F.__esModule?function(){return F.default}:function(){return F};return V.d(l,"a",l),l},V.o=function(F,l){return Object.prototype.hasOwnProperty.call(F,l)},V.p="",V(V.s=2)}([function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(setImmediate, global) {;(function() {\n"use strict"\nfunction Vnode(tag, key, attrs0, children, text, dom) {\n\treturn {tag: tag, key: key, attrs: attrs0, children: children, text: text, dom: dom, domSize: undefined, state: undefined, _state: undefined, events: undefined, instance: undefined, skip: false}\n}\nVnode.normalize = function(node) {\n\tif (Array.isArray(node)) return Vnode("[", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)\n\tif (node != null && typeof node !== "object") return Vnode("#", undefined, undefined, node === false ? "" : node, undefined, undefined)\n\treturn node\n}\nVnode.normalizeChildren = function normalizeChildren(children) {\n\tfor (var i = 0; i < children.length; i++) {\n\t\tchildren[i] = Vnode.normalize(children[i])\n\t}\n\treturn children\n}\nvar selectorParser = /(?:(^|#|\\.)([^#\\.\\[\\]]+))|(\\[(.+?)(?:\\s*=\\s*("|\'|)((?:\\\\["\'\\]]|.)*?)\\5)?\\])/g\nvar selectorCache = {}\nvar hasOwn = {}.hasOwnProperty\nfunction isEmpty(object) {\n\tfor (var key in object) if (hasOwn.call(object, key)) return false\n\treturn true\n}\nfunction compileSelector(selector) {\n\tvar match, tag = "div", classes = [], attrs = {}\n\twhile (match = selectorParser.exec(selector)) {\n\t\tvar type = match[1], value = match[2]\n\t\tif (type === "" && value !== "") tag = value\n\t\telse if (type === "#") attrs.id = value\n\t\telse if (type === ".") classes.push(value)\n\t\telse if (match[3][0] === "[") {\n\t\t\tvar attrValue = match[6]\n\t\t\tif (attrValue) attrValue = attrValue.replace(/\\\\(["\'])/g, "$1").replace(/\\\\\\\\/g, "\\\\")\n\t\t\tif (match[4] === "class") classes.push(attrValue)\n\t\t\telse attrs[match[4]] = attrValue === "" ? attrValue : attrValue || true\n\t\t}\n\t}\n\tif (classes.length > 0) attrs.className = classes.join(" ")\n\treturn selectorCache[selector] = {tag: tag, attrs: attrs}\n}\nfunction execSelector(state, attrs, children) {\n\tvar hasAttrs = false, childList, text\n\tvar className = attrs.className || attrs.class\n\tif (!isEmpty(state.attrs) && !isEmpty(attrs)) {\n\t\tvar newAttrs = {}\n\t\tfor(var key in attrs) {\n\t\t\tif (hasOwn.call(attrs, key)) {\n\t\t\t\tnewAttrs[key] = attrs[key]\n\t\t\t}\n\t\t}\n\t\tattrs = newAttrs\n\t}\n\tfor (var key in state.attrs) {\n\t\tif (hasOwn.call(state.attrs, key)) {\n\t\t\tattrs[key] = state.attrs[key]\n\t\t}\n\t}\n\tif (className !== undefined) {\n\t\tif (attrs.class !== undefined) {\n\t\t\tattrs.class = undefined\n\t\t\tattrs.className = className\n\t\t}\n\t\tif (state.attrs.className != null) {\n\t\t\tattrs.className = state.attrs.className + " " + className\n\t\t}\n\t}\n\tfor (var key in attrs) {\n\t\tif (hasOwn.call(attrs, key) && key !== "key") {\n\t\t\thasAttrs = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif (Array.isArray(children) && children.length === 1 && children[0] != null && children[0].tag === "#") {\n\t\ttext = children[0].children\n\t} else {\n\t\tchildList = children\n\t}\n\treturn Vnode(state.tag, attrs.key, hasAttrs ? attrs : undefined, childList, text)\n}\nfunction hyperscript(selector) {\n\t// Because sloppy mode sucks\n\tvar attrs = arguments[1], start = 2, children\n\tif (selector == null || typeof selector !== "string" && typeof selector !== "function" && typeof selector.view !== "function") {\n\t\tthrow Error("The selector must be either a string or a component.");\n\t}\n\tif (typeof selector === "string") {\n\t\tvar cached = selectorCache[selector] || compileSelector(selector)\n\t}\n\tif (attrs == null) {\n\t\tattrs = {}\n\t} else if (typeof attrs !== "object" || attrs.tag != null || Array.isArray(attrs)) {\n\t\tattrs = {}\n\t\tstart = 1\n\t}\n\tif (arguments.length === start + 1) {\n\t\tchildren = arguments[start]\n\t\tif (!Array.isArray(children)) children = [children]\n\t} else {\n\t\tchildren = []\n\t\twhile (start < arguments.length) children.push(arguments[start++])\n\t}\n\tvar normalized = Vnode.normalizeChildren(children)\n\tif (typeof selector === "string") {\n\t\treturn execSelector(cached, attrs, normalized)\n\t} else {\n\t\treturn Vnode(selector, attrs.key, attrs, normalized)\n\t}\n}\nhyperscript.trust = function(html) {\n\tif (html == null) html = ""\n\treturn Vnode("<", undefined, undefined, html, undefined, undefined)\n}\nhyperscript.fragment = function(attrs1, children) {\n\treturn Vnode("[", attrs1.key, attrs1, Vnode.normalizeChildren(children), undefined, undefined)\n}\nvar m = hyperscript\n/** @constructor */\nvar PromisePolyfill = function(executor) {\n\tif (!(this instanceof PromisePolyfill)) throw new Error("Promise must be called with `new`")\n\tif (typeof executor !== "function") throw new TypeError("executor must be a function")\n\tvar self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false)\n\tvar instance = self._instance = {resolvers: resolvers, rejectors: rejectors}\n\tvar callAsync = typeof setImmediate === "function" ? setImmediate : setTimeout\n\tfunction handler(list, shouldAbsorb) {\n\t\treturn function execute(value) {\n\t\t\tvar then\n\t\t\ttry {\n\t\t\t\tif (shouldAbsorb && value != null && (typeof value === "object" || typeof value === "function") && typeof (then = value.then) === "function") {\n\t\t\t\t\tif (value === self) throw new TypeError("Promise can\'t be resolved w/ itself")\n\t\t\t\t\texecuteOnce(then.bind(value))\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallAsync(function() {\n\t\t\t\t\t\tif (!shouldAbsorb && list.length === 0) console.error("Possible unhandled promise rejection:", value)\n\t\t\t\t\t\tfor (var i = 0; i < list.length; i++) list[i](value)\n\t\t\t\t\t\tresolvers.length = 0, rejectors.length = 0\n\t\t\t\t\t\tinstance.state = shouldAbsorb\n\t\t\t\t\t\tinstance.retry = function() {execute(value)}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\trejectCurrent(e)\n\t\t\t}\n\t\t}\n\t}\n\tfunction executeOnce(then) {\n\t\tvar runs = 0\n\t\tfunction run(fn) {\n\t\t\treturn function(value) {\n\t\t\t\tif (runs++ > 0) return\n\t\t\t\tfn(value)\n\t\t\t}\n\t\t}\n\t\tvar onerror = run(rejectCurrent)\n\t\ttry {then(run(resolveCurrent), onerror)} catch (e) {onerror(e)}\n\t}\n\texecuteOnce(executor)\n}\nPromisePolyfill.prototype.then = function(onFulfilled, onRejection) {\n\tvar self = this, instance = self._instance\n\tfunction handle(callback, list, next, state) {\n\t\tlist.push(function(value) {\n\t\t\tif (typeof callback !== "function") next(value)\n\t\t\telse try {resolveNext(callback(value))} catch (e) {if (rejectNext) rejectNext(e)}\n\t\t})\n\t\tif (typeof instance.retry === "function" && state === instance.state) instance.retry()\n\t}\n\tvar resolveNext, rejectNext\n\tvar promise = new PromisePolyfill(function(resolve, reject) {resolveNext = resolve, rejectNext = reject})\n\thandle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false)\n\treturn promise\n}\nPromisePolyfill.prototype.catch = function(onRejection) {\n\treturn this.then(null, onRejection)\n}\nPromisePolyfill.resolve = function(value) {\n\tif (value instanceof PromisePolyfill) return value\n\treturn new PromisePolyfill(function(resolve) {resolve(value)})\n}\nPromisePolyfill.reject = function(value) {\n\treturn new PromisePolyfill(function(resolve, reject) {reject(value)})\n}\nPromisePolyfill.all = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tvar total = list.length, count = 0, values = []\n\t\tif (list.length === 0) resolve([])\n\t\telse for (var i = 0; i < list.length; i++) {\n\t\t\t(function(i) {\n\t\t\t\tfunction consume(value) {\n\t\t\t\t\tcount++\n\t\t\t\t\tvalues[i] = value\n\t\t\t\t\tif (count === total) resolve(values)\n\t\t\t\t}\n\t\t\t\tif (list[i] != null && (typeof list[i] === "object" || typeof list[i] === "function") && typeof list[i].then === "function") {\n\t\t\t\t\tlist[i].then(consume, reject)\n\t\t\t\t}\n\t\t\t\telse consume(list[i])\n\t\t\t})(i)\n\t\t}\n\t})\n}\nPromisePolyfill.race = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tlist[i].then(resolve, reject)\n\t\t}\n\t})\n}\nif (typeof window !== "undefined") {\n\tif (typeof window.Promise === "undefined") window.Promise = PromisePolyfill\n\tvar PromisePolyfill = window.Promise\n} else if (typeof global !== "undefined") {\n\tif (typeof global.Promise === "undefined") global.Promise = PromisePolyfill\n\tvar PromisePolyfill = global.Promise\n} else {\n}\nvar buildQueryString = function(object) {\n\tif (Object.prototype.toString.call(object) !== "[object Object]") return ""\n\tvar args = []\n\tfor (var key0 in object) {\n\t\tdestructure(key0, object[key0])\n\t}\n\treturn args.join("&")\n\tfunction destructure(key0, value) {\n\t\tif (Array.isArray(value)) {\n\t\t\tfor (var i = 0; i < value.length; i++) {\n\t\t\t\tdestructure(key0 + "[" + i + "]", value[i])\n\t\t\t}\n\t\t}\n\t\telse if (Object.prototype.toString.call(value) === "[object Object]") {\n\t\t\tfor (var i in value) {\n\t\t\t\tdestructure(key0 + "[" + i + "]", value[i])\n\t\t\t}\n\t\t}\n\t\telse args.push(encodeURIComponent(key0) + (value != null && value !== "" ? "=" + encodeURIComponent(value) : ""))\n\t}\n}\nvar FILE_PROTOCOL_REGEX = new RegExp("^file://", "i")\nvar _8 = function($window, Promise) {\n\tvar callbackCount = 0\n\tvar oncompletion\n\tfunction setCompletionCallback(callback) {oncompletion = callback}\n\tfunction finalizer() {\n\t\tvar count = 0\n\t\tfunction complete() {if (--count === 0 && typeof oncompletion === "function") oncompletion()}\n\t\treturn function finalize(promise0) {\n\t\t\tvar then0 = promise0.then\n\t\t\tpromise0.then = function() {\n\t\t\t\tcount++\n\t\t\t\tvar next = then0.apply(promise0, arguments)\n\t\t\t\tnext.then(complete, function(e) {\n\t\t\t\t\tcomplete()\n\t\t\t\t\tif (count === 0) throw e\n\t\t\t\t})\n\t\t\t\treturn finalize(next)\n\t\t\t}\n\t\t\treturn promise0\n\t\t}\n\t}\n\tfunction normalize(args, extra) {\n\t\tif (typeof args === "string") {\n\t\t\tvar url = args\n\t\t\targs = extra || {}\n\t\t\tif (args.url == null) args.url = url\n\t\t}\n\t\treturn args\n\t}\n\tfunction request(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tif (args.method == null) args.method = "GET"\n\t\t\targs.method = args.method.toUpperCase()\n\t\t\tvar useBody = (args.method === "GET" || args.method === "TRACE") ? false : (typeof args.useBody === "boolean" ? args.useBody : true)\n\t\t\tif (typeof args.serialize !== "function") args.serialize = typeof FormData !== "undefined" && args.data instanceof FormData ? function(value) {return value} : JSON.stringify\n\t\t\tif (typeof args.deserialize !== "function") args.deserialize = deserialize\n\t\t\tif (typeof args.extract !== "function") args.extract = extract\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\tif (useBody) args.data = args.serialize(args.data)\n\t\t\telse args.url = assemble(args.url, args.data)\n\t\t\tvar xhr = new $window.XMLHttpRequest(),\n\t\t\t\taborted = false,\n\t\t\t\t_abort = xhr.abort\n\t\t\txhr.abort = function abort() {\n\t\t\t\taborted = true\n\t\t\t\t_abort.call(xhr)\n\t\t\t}\n\t\t\txhr.open(args.method, args.url, typeof args.async === "boolean" ? args.async : true, typeof args.user === "string" ? args.user : undefined, typeof args.password === "string" ? args.password : undefined)\n\t\t\tif (args.serialize === JSON.stringify && useBody && !(args.headers && args.headers.hasOwnProperty("Content-Type"))) {\n\t\t\t\txhr.setRequestHeader("Content-Type", "application/json; charset=utf-8")\n\t\t\t}\n\t\t\tif (args.deserialize === deserialize && !(args.headers && args.headers.hasOwnProperty("Accept"))) {\n\t\t\t\txhr.setRequestHeader("Accept", "application/json, text/*")\n\t\t\t}\n\t\t\tif (args.withCredentials) xhr.withCredentials = args.withCredentials\n\t\t\tfor (var key in args.headers) if ({}.hasOwnProperty.call(args.headers, key)) {\n\t\t\t\txhr.setRequestHeader(key, args.headers[key])\n\t\t\t}\n\t\t\tif (typeof args.config === "function") xhr = args.config(xhr, args) || xhr\n\t\t\txhr.onreadystatechange = function() {\n\t\t\t\t// Don\'t throw errors on xhr.abort().\n\t\t\t\tif(aborted) return\n\t\t\t\tif (xhr.readyState === 4) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar response = (args.extract !== extract) ? args.extract(xhr, args) : args.deserialize(args.extract(xhr, args))\n\t\t\t\t\t\tif ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304 || FILE_PROTOCOL_REGEX.test(args.url)) {\n\t\t\t\t\t\t\tresolve(cast(args.type, response))\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar error = new Error(xhr.responseText)\n\t\t\t\t\t\t\tfor (var key in response) error[key] = response[key]\n\t\t\t\t\t\t\treject(error)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\treject(e)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (useBody && (args.data != null)) xhr.send(args.data)\n\t\t\telse xhr.send()\n\t\t})\n\t\treturn args.background === true ? promise0 : finalize(promise0)\n\t}\n\tfunction jsonp(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tvar callbackName = args.callbackName || "_mithril_" + Math.round(Math.random() * 1e16) + "_" + callbackCount++\n\t\t\tvar script = $window.document.createElement("script")\n\t\t\t$window[callbackName] = function(data) {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\tresolve(cast(args.type, data))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tscript.onerror = function() {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\treject(new Error("JSONP request failed"))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tif (args.data == null) args.data = {}\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\targs.data[args.callbackKey || "callback"] = callbackName\n\t\t\tscript.src = assemble(args.url, args.data)\n\t\t\t$window.document.documentElement.appendChild(script)\n\t\t})\n\t\treturn args.background === true? promise0 : finalize(promise0)\n\t}\n\tfunction interpolate(url, data) {\n\t\tif (data == null) return url\n\t\tvar tokens = url.match(/:[^\\/]+/gi) || []\n\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\tvar key = tokens[i].slice(1)\n\t\t\tif (data[key] != null) {\n\t\t\t\turl = url.replace(tokens[i], data[key])\n\t\t\t}\n\t\t}\n\t\treturn url\n\t}\n\tfunction assemble(url, data) {\n\t\tvar querystring = buildQueryString(data)\n\t\tif (querystring !== "") {\n\t\t\tvar prefix = url.indexOf("?") < 0 ? "?" : "&"\n\t\t\turl += prefix + querystring\n\t\t}\n\t\treturn url\n\t}\n\tfunction deserialize(data) {\n\t\ttry {return data !== "" ? JSON.parse(data) : null}\n\t\tcatch (e) {throw new Error(data)}\n\t}\n\tfunction extract(xhr) {return xhr.responseText}\n\tfunction cast(type0, data) {\n\t\tif (typeof type0 === "function") {\n\t\t\tif (Array.isArray(data)) {\n\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\tdata[i] = new type0(data[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\telse return new type0(data)\n\t\t}\n\t\treturn data\n\t}\n\treturn {request: request, jsonp: jsonp, setCompletionCallback: setCompletionCallback}\n}\nvar requestService = _8(window, PromisePolyfill)\nvar coreRenderer = function($window) {\n\tvar $doc = $window.document\n\tvar $emptyFragment = $doc.createDocumentFragment()\n\tvar nameSpace = {\n\t\tsvg: "http://www.w3.org/2000/svg",\n\t\tmath: "http://www.w3.org/1998/Math/MathML"\n\t}\n\tvar onevent\n\tfunction setEventCallback(callback) {return onevent = callback}\n\tfunction getNameSpace(vnode) {\n\t\treturn vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag]\n\t}\n\t//create\n\tfunction createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t}\n\tfunction createNode(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tif (typeof tag === "string") {\n\t\t\tvnode.state = {}\n\t\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tswitch (tag) {\n\t\t\t\tcase "#": return createText(parent, vnode, nextSibling)\n\t\t\t\tcase "<": return createHTML(parent, vnode, nextSibling)\n\t\t\t\tcase "[": return createFragment(parent, vnode, hooks, ns, nextSibling)\n\t\t\t\tdefault: return createElement(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t\telse return createComponent(parent, vnode, hooks, ns, nextSibling)\n\t}\n\tfunction createText(parent, vnode, nextSibling) {\n\t\tvnode.dom = $doc.createTextNode(vnode.children)\n\t\tinsertNode(parent, vnode.dom, nextSibling)\n\t\treturn vnode.dom\n\t}\n\tfunction createHTML(parent, vnode, nextSibling) {\n\t\tvar match1 = vnode.children.match(/^\\s*?<(\\w+)/im) || []\n\t\tvar parent1 = {caption: "table", thead: "table", tbody: "table", tfoot: "table", tr: "tbody", th: "tr", td: "tr", colgroup: "table", col: "colgroup"}[match1[1]] || "div"\n\t\tvar temp = $doc.createElement(parent1)\n\t\ttemp.innerHTML = vnode.children\n\t\tvnode.dom = temp.firstChild\n\t\tvnode.domSize = temp.childNodes.length\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tvar child\n\t\twhile (child = temp.firstChild) {\n\t\t\tfragment.appendChild(child)\n\t\t}\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createFragment(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tif (vnode.children != null) {\n\t\t\tvar children = vnode.children\n\t\t\tcreateNodes(fragment, children, 0, children.length, hooks, null, ns)\n\t\t}\n\t\tvnode.dom = fragment.firstChild\n\t\tvnode.domSize = fragment.childNodes.length\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createElement(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tvar attrs2 = vnode.attrs\n\t\tvar is = attrs2 && attrs2.is\n\t\tns = getNameSpace(vnode) || ns\n\t\tvar element = ns ?\n\t\t\tis ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :\n\t\t\tis ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)\n\t\tvnode.dom = element\n\t\tif (attrs2 != null) {\n\t\t\tsetAttrs(vnode, attrs2, ns)\n\t\t}\n\t\tinsertNode(parent, element, nextSibling)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse {\n\t\t\tif (vnode.text != null) {\n\t\t\t\tif (vnode.text !== "") element.textContent = vnode.text\n\t\t\t\telse vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\t}\n\t\t\tif (vnode.children != null) {\n\t\t\t\tvar children = vnode.children\n\t\t\t\tcreateNodes(element, children, 0, children.length, hooks, null, ns)\n\t\t\t\tsetLateAttrs(vnode)\n\t\t\t}\n\t\t}\n\t\treturn element\n\t}\n\tfunction initComponent(vnode, hooks) {\n\t\tvar sentinel\n\t\tif (typeof vnode.tag.view === "function") {\n\t\t\tvnode.state = Object.create(vnode.tag)\n\t\t\tsentinel = vnode.state.view\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t} else {\n\t\t\tvnode.state = void 0\n\t\t\tsentinel = vnode.tag\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t\tvnode.state = (vnode.tag.prototype != null && typeof vnode.tag.prototype.view === "function") ? new vnode.tag(vnode) : vnode.tag(vnode)\n\t\t}\n\t\tvnode._state = vnode.state\n\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\tinitLifecycle(vnode._state, vnode, hooks)\n\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\tif (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")\n\t\tsentinel.$$reentrantLock$$ = null\n\t}\n\tfunction createComponent(parent, vnode, hooks, ns, nextSibling) {\n\t\tinitComponent(vnode, hooks)\n\t\tif (vnode.instance != null) {\n\t\t\tvar element = createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0\n\t\t\tinsertNode(parent, element, nextSibling)\n\t\t\treturn element\n\t\t}\n\t\telse {\n\t\t\tvnode.domSize = 0\n\t\t\treturn $emptyFragment\n\t\t}\n\t}\n\t//update\n\tfunction updateNodes(parent, old, vnodes, recycling, hooks, nextSibling, ns) {\n\t\tif (old === vnodes || old == null && vnodes == null) return\n\t\telse if (old == null) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns)\n\t\telse if (vnodes == null) removeNodes(old, 0, old.length, vnodes)\n\t\telse {\n\t\t\tif (old.length === vnodes.length) {\n\t\t\t\tvar isUnkeyed = false\n\t\t\t\tfor (var i = 0; i < vnodes.length; i++) {\n\t\t\t\t\tif (vnodes[i] != null && old[i] != null) {\n\t\t\t\t\t\tisUnkeyed = vnodes[i].key == null && old[i].key == null\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isUnkeyed) {\n\t\t\t\t\tfor (var i = 0; i < old.length; i++) {\n\t\t\t\t\t\tif (old[i] === vnodes[i]) continue\n\t\t\t\t\t\telse if (old[i] == null && vnodes[i] != null) createNode(parent, vnodes[i], hooks, ns, getNextSibling(old, i + 1, nextSibling))\n\t\t\t\t\t\telse if (vnodes[i] == null) removeNodes(old, i, i + 1, vnodes)\n\t\t\t\t\t\telse updateNode(parent, old[i], vnodes[i], hooks, getNextSibling(old, i + 1, nextSibling), recycling, ns)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\trecycling = recycling || isRecyclable(old, vnodes)\n\t\t\tif (recycling) {\n\t\t\t\tvar pool = old.pool\n\t\t\t\told = old.concat(old.pool)\n\t\t\t}\n\t\t\tvar oldStart = 0, start = 0, oldEnd = old.length - 1, end = vnodes.length - 1, map\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldStart], v = vnodes[start]\n\t\t\t\tif (o === v && !recycling) oldStart++, start++\n\t\t\t\telse if (o == null) oldStart++\n\t\t\t\telse if (v == null) start++\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldStart >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\toldStart++, start++\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar o = old[oldEnd]\n\t\t\t\t\tif (o === v && !recycling) oldEnd--, start++\n\t\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\t\telse if (v == null) start++\n\t\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\t\tif (recycling || start < end) insertNode(parent, toFragment(o), getNextSibling(old, oldStart, nextSibling))\n\t\t\t\t\t\toldEnd--, start++\n\t\t\t\t\t}\n\t\t\t\t\telse break\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldEnd], v = vnodes[end]\n\t\t\t\tif (o === v && !recycling) oldEnd--, end--\n\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\telse if (v == null) end--\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t\tif (o.dom != null) nextSibling = o.dom\n\t\t\t\t\toldEnd--, end--\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!map) map = getKeyMap(old, oldEnd)\n\t\t\t\t\tif (v != null) {\n\t\t\t\t\t\tvar oldIndex = map[v.key]\n\t\t\t\t\t\tif (oldIndex != null) {\n\t\t\t\t\t\t\tvar movable = old[oldIndex]\n\t\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldIndex >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\t\tupdateNode(parent, movable, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)\n\t\t\t\t\t\t\tinsertNode(parent, toFragment(movable), nextSibling)\n\t\t\t\t\t\t\told[oldIndex].skip = true\n\t\t\t\t\t\t\tif (movable.dom != null) nextSibling = movable.dom\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar dom = createNode(parent, v, hooks, ns, nextSibling)\n\t\t\t\t\t\t\tnextSibling = dom\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tend--\n\t\t\t\t}\n\t\t\t\tif (end < start) break\n\t\t\t}\n\t\t\tcreateNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)\n\t\t\tremoveNodes(old, oldStart, oldEnd + 1, vnodes)\n\t\t}\n\t}\n\tfunction updateNode(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tvar oldTag = old.tag, tag = vnode.tag\n\t\tif (oldTag === tag) {\n\t\t\tvnode.state = old.state\n\t\t\tvnode._state = old._state\n\t\t\tvnode.events = old.events\n\t\t\tif (!recycling && shouldNotUpdate(vnode, old)) return\n\t\t\tif (typeof oldTag === "string") {\n\t\t\t\tif (vnode.attrs != null) {\n\t\t\t\t\tif (recycling) {\n\t\t\t\t\t\tvnode.state = {}\n\t\t\t\t\t\tinitLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t\t}\n\t\t\t\t\telse updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t}\n\t\t\t\tswitch (oldTag) {\n\t\t\t\t\tcase "#": updateText(old, vnode); break\n\t\t\t\t\tcase "<": updateHTML(parent, old, vnode, nextSibling); break\n\t\t\t\t\tcase "[": updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns); break\n\t\t\t\t\tdefault: updateElement(old, vnode, recycling, hooks, ns)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns)\n\t\t}\n\t\telse {\n\t\t\tremoveNode(old, null)\n\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t}\n\t}\n\tfunction updateText(old, vnode) {\n\t\tif (old.children.toString() !== vnode.children.toString()) {\n\t\t\told.dom.nodeValue = vnode.children\n\t\t}\n\t\tvnode.dom = old.dom\n\t}\n\tfunction updateHTML(parent, old, vnode, nextSibling) {\n\t\tif (old.children !== vnode.children) {\n\t\t\ttoFragment(old)\n\t\t\tcreateHTML(parent, vnode, nextSibling)\n\t\t}\n\t\telse vnode.dom = old.dom, vnode.domSize = old.domSize\n\t}\n\tfunction updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns) {\n\t\tupdateNodes(parent, old.children, vnode.children, recycling, hooks, nextSibling, ns)\n\t\tvar domSize = 0, children = vnode.children\n\t\tvnode.dom = null\n\t\tif (children != null) {\n\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\tvar child = children[i]\n\t\t\t\tif (child != null && child.dom != null) {\n\t\t\t\t\tif (vnode.dom == null) vnode.dom = child.dom\n\t\t\t\t\tdomSize += child.domSize || 1\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (domSize !== 1) vnode.domSize = domSize\n\t\t}\n\t}\n\tfunction updateElement(old, vnode, recycling, hooks, ns) {\n\t\tvar element = vnode.dom = old.dom\n\t\tns = getNameSpace(vnode) || ns\n\t\tif (vnode.tag === "textarea") {\n\t\t\tif (vnode.attrs == null) vnode.attrs = {}\n\t\t\tif (vnode.text != null) {\n\t\t\t\tvnode.attrs.value = vnode.text //FIXME handle0 multiple children\n\t\t\t\tvnode.text = undefined\n\t\t\t}\n\t\t}\n\t\tupdateAttrs(vnode, old.attrs, vnode.attrs, ns)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse if (old.text != null && vnode.text != null && vnode.text !== "") {\n\t\t\tif (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text\n\t\t}\n\t\telse {\n\t\t\tif (old.text != null) old.children = [Vnode("#", undefined, undefined, old.text, undefined, old.dom.firstChild)]\n\t\t\tif (vnode.text != null) vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\tupdateNodes(element, old.children, vnode.children, recycling, hooks, null, ns)\n\t\t}\n\t}\n\tfunction updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tif (recycling) {\n\t\t\tinitComponent(vnode, hooks)\n\t\t} else {\n\t\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\t\tif (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")\n\t\t\tif (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tupdateLifecycle(vnode._state, vnode, hooks)\n\t\t}\n\t\tif (vnode.instance != null) {\n\t\t\tif (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\telse updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, recycling, ns)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.instance.domSize\n\t\t}\n\t\telse if (old.instance != null) {\n\t\t\tremoveNode(old.instance, null)\n\t\t\tvnode.dom = undefined\n\t\t\tvnode.domSize = 0\n\t\t}\n\t\telse {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t}\n\t}\n\tfunction isRecyclable(old, vnodes) {\n\t\tif (old.pool != null && Math.abs(old.pool.length - vnodes.length) <= Math.abs(old.length - vnodes.length)) {\n\t\t\tvar oldChildrenLength = old[0] && old[0].children && old[0].children.length || 0\n\t\t\tvar poolChildrenLength = old.pool[0] && old.pool[0].children && old.pool[0].children.length || 0\n\t\t\tvar vnodesChildrenLength = vnodes[0] && vnodes[0].children && vnodes[0].children.length || 0\n\t\t\tif (Math.abs(poolChildrenLength - vnodesChildrenLength) <= Math.abs(oldChildrenLength - vnodesChildrenLength)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\tfunction getKeyMap(vnodes, end) {\n\t\tvar map = {}, i = 0\n\t\tfor (var i = 0; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tvar key2 = vnode.key\n\t\t\t\tif (key2 != null) map[key2] = i\n\t\t\t}\n\t\t}\n\t\treturn map\n\t}\n\tfunction toFragment(vnode) {\n\t\tvar count0 = vnode.domSize\n\t\tif (count0 != null || vnode.dom == null) {\n\t\t\tvar fragment = $doc.createDocumentFragment()\n\t\t\tif (count0 > 0) {\n\t\t\t\tvar dom = vnode.dom\n\t\t\t\twhile (--count0) fragment.appendChild(dom.nextSibling)\n\t\t\t\tfragment.insertBefore(dom, fragment.firstChild)\n\t\t\t}\n\t\t\treturn fragment\n\t\t}\n\t\telse return vnode.dom\n\t}\n\tfunction getNextSibling(vnodes, i, nextSibling) {\n\t\tfor (; i < vnodes.length; i++) {\n\t\t\tif (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom\n\t\t}\n\t\treturn nextSibling\n\t}\n\tfunction insertNode(parent, dom, nextSibling) {\n\t\tif (nextSibling && nextSibling.parentNode) parent.insertBefore(dom, nextSibling)\n\t\telse parent.appendChild(dom)\n\t}\n\tfunction setContentEditable(vnode) {\n\t\tvar children = vnode.children\n\t\tif (children != null && children.length === 1 && children[0].tag === "<") {\n\t\t\tvar content = children[0].children\n\t\t\tif (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content\n\t\t}\n\t\telse if (vnode.text != null || children != null && children.length !== 0) throw new Error("Child node of a contenteditable must be trusted")\n\t}\n\t//remove\n\tfunction removeNodes(vnodes, start, end, context) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tif (vnode.skip) vnode.skip = false\n\t\t\t\telse removeNode(vnode, context)\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNode(vnode, context) {\n\t\tvar expected = 1, called = 0\n\t\tif (vnode.attrs && typeof vnode.attrs.onbeforeremove === "function") {\n\t\t\tvar result = vnode.attrs.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === "function") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tif (typeof vnode.tag !== "string" && typeof vnode._state.onbeforeremove === "function") {\n\t\t\tvar result = vnode._state.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === "function") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tcontinuation()\n\t\tfunction continuation() {\n\t\t\tif (++called === expected) {\n\t\t\t\tonremove(vnode)\n\t\t\t\tif (vnode.dom) {\n\t\t\t\t\tvar count0 = vnode.domSize || 1\n\t\t\t\t\tif (count0 > 1) {\n\t\t\t\t\t\tvar dom = vnode.dom\n\t\t\t\t\t\twhile (--count0) {\n\t\t\t\t\t\t\tremoveNodeFromDOM(dom.nextSibling)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tremoveNodeFromDOM(vnode.dom)\n\t\t\t\t\tif (context != null && vnode.domSize == null && !hasIntegrationMethods(vnode.attrs) && typeof vnode.tag === "string") { //TODO test custom elements\n\t\t\t\t\t\tif (!context.pool) context.pool = [vnode]\n\t\t\t\t\t\telse context.pool.push(vnode)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNodeFromDOM(node) {\n\t\tvar parent = node.parentNode\n\t\tif (parent != null) parent.removeChild(node)\n\t}\n\tfunction onremove(vnode) {\n\t\tif (vnode.attrs && typeof vnode.attrs.onremove === "function") vnode.attrs.onremove.call(vnode.state, vnode)\n\t\tif (typeof vnode.tag !== "string") {\n\t\t\tif (typeof vnode._state.onremove === "function") vnode._state.onremove.call(vnode.state, vnode)\n\t\t\tif (vnode.instance != null) onremove(vnode.instance)\n\t\t} else {\n\t\t\tvar children = vnode.children\n\t\t\tif (Array.isArray(children)) {\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tvar child = children[i]\n\t\t\t\t\tif (child != null) onremove(child)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//attrs2\n\tfunction setAttrs(vnode, attrs2, ns) {\n\t\tfor (var key2 in attrs2) {\n\t\t\tsetAttr(vnode, key2, null, attrs2[key2], ns)\n\t\t}\n\t}\n\tfunction setAttr(vnode, key2, old, value, ns) {\n\t\tvar element = vnode.dom\n\t\tif (key2 === "key" || key2 === "is" || (old === value && !isFormAttribute(vnode, key2)) && typeof value !== "object" || typeof value === "undefined" || isLifecycleMethod(key2)) return\n\t\tvar nsLastIndex = key2.indexOf(":")\n\t\tif (nsLastIndex > -1 && key2.substr(0, nsLastIndex) === "xlink") {\n\t\t\telement.setAttributeNS("http://www.w3.org/1999/xlink", key2.slice(nsLastIndex + 1), value)\n\t\t}\n\t\telse if (key2[0] === "o" && key2[1] === "n" && typeof value === "function") updateEvent(vnode, key2, value)\n\t\telse if (key2 === "style") updateStyle(element, old, value)\n\t\telse if (key2 in element && !isAttribute(key2) && ns === undefined && !isCustomElement(vnode)) {\n\t\t\tif (key2 === "value") {\n\t\t\t\tvar normalized0 = "" + value // eslint-disable-line no-implicit-coercion\n\t\t\t\t//setting input[value] to same value by typing on focused element moves cursor to end in Chrome\n\t\t\t\tif ((vnode.tag === "input" || vnode.tag === "textarea") && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return\n\t\t\t\t//setting select[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === "select") {\n\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\tif (vnode.dom.selectedIndex === -1 && vnode.dom === $doc.activeElement) return\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (old !== null && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//setting option[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === "option" && old != null && vnode.dom.value === normalized0) return\n\t\t\t}\n\t\t\t// If you assign an input type1 that is not supported by IE 11 with an assignment expression, an error0 will occur.\n\t\t\tif (vnode.tag === "input" && key2 === "type") {\n\t\t\t\telement.setAttribute(key2, value)\n\t\t\t\treturn\n\t\t\t}\n\t\t\telement[key2] = value\n\t\t}\n\t\telse {\n\t\t\tif (typeof value === "boolean") {\n\t\t\t\tif (value) element.setAttribute(key2, "")\n\t\t\t\telse element.removeAttribute(key2)\n\t\t\t}\n\t\t\telse element.setAttribute(key2 === "className" ? "class" : key2, value)\n\t\t}\n\t}\n\tfunction setLateAttrs(vnode) {\n\t\tvar attrs2 = vnode.attrs\n\t\tif (vnode.tag === "select" && attrs2 != null) {\n\t\t\tif ("value" in attrs2) setAttr(vnode, "value", null, attrs2.value, undefined)\n\t\t\tif ("selectedIndex" in attrs2) setAttr(vnode, "selectedIndex", null, attrs2.selectedIndex, undefined)\n\t\t}\n\t}\n\tfunction updateAttrs(vnode, old, attrs2, ns) {\n\t\tif (attrs2 != null) {\n\t\t\tfor (var key2 in attrs2) {\n\t\t\t\tsetAttr(vnode, key2, old && old[key2], attrs2[key2], ns)\n\t\t\t}\n\t\t}\n\t\tif (old != null) {\n\t\t\tfor (var key2 in old) {\n\t\t\t\tif (attrs2 == null || !(key2 in attrs2)) {\n\t\t\t\t\tif (key2 === "className") key2 = "class"\n\t\t\t\t\tif (key2[0] === "o" && key2[1] === "n" && !isLifecycleMethod(key2)) updateEvent(vnode, key2, undefined)\n\t\t\t\t\telse if (key2 !== "key") vnode.dom.removeAttribute(key2)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction isFormAttribute(vnode, attr) {\n\t\treturn attr === "value" || attr === "checked" || attr === "selectedIndex" || attr === "selected" && vnode.dom === $doc.activeElement\n\t}\n\tfunction isLifecycleMethod(attr) {\n\t\treturn attr === "oninit" || attr === "oncreate" || attr === "onupdate" || attr === "onremove" || attr === "onbeforeremove" || attr === "onbeforeupdate"\n\t}\n\tfunction isAttribute(attr) {\n\t\treturn attr === "href" || attr === "list" || attr === "form" || attr === "width" || attr === "height"// || attr === "type"\n\t}\n\tfunction isCustomElement(vnode){\n\t\treturn vnode.attrs.is || vnode.tag.indexOf("-") > -1\n\t}\n\tfunction hasIntegrationMethods(source) {\n\t\treturn source != null && (source.oncreate || source.onupdate || source.onbeforeremove || source.onremove)\n\t}\n\t//style\n\tfunction updateStyle(element, old, style) {\n\t\tif (old === style) element.style.cssText = "", old = null\n\t\tif (style == null) element.style.cssText = ""\n\t\telse if (typeof style === "string") element.style.cssText = style\n\t\telse {\n\t\t\tif (typeof old === "string") element.style.cssText = ""\n\t\t\tfor (var key2 in style) {\n\t\t\t\telement.style[key2] = style[key2]\n\t\t\t}\n\t\t\tif (old != null && typeof old !== "string") {\n\t\t\t\tfor (var key2 in old) {\n\t\t\t\t\tif (!(key2 in style)) element.style[key2] = ""\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//event\n\tfunction updateEvent(vnode, key2, value) {\n\t\tvar element = vnode.dom\n\t\tvar callback = typeof onevent !== "function" ? value : function(e) {\n\t\t\tvar result = value.call(element, e)\n\t\t\tonevent.call(element, e)\n\t\t\treturn result\n\t\t}\n\t\tif (key2 in element) element[key2] = typeof value === "function" ? callback : null\n\t\telse {\n\t\t\tvar eventName = key2.slice(2)\n\t\t\tif (vnode.events === undefined) vnode.events = {}\n\t\t\tif (vnode.events[key2] === callback) return\n\t\t\tif (vnode.events[key2] != null) element.removeEventListener(eventName, vnode.events[key2], false)\n\t\t\tif (typeof value === "function") {\n\t\t\t\tvnode.events[key2] = callback\n\t\t\t\telement.addEventListener(eventName, vnode.events[key2], false)\n\t\t\t}\n\t\t}\n\t}\n\t//lifecycle\n\tfunction initLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.oninit === "function") source.oninit.call(vnode.state, vnode)\n\t\tif (typeof source.oncreate === "function") hooks.push(source.oncreate.bind(vnode.state, vnode))\n\t}\n\tfunction updateLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.onupdate === "function") hooks.push(source.onupdate.bind(vnode.state, vnode))\n\t}\n\tfunction shouldNotUpdate(vnode, old) {\n\t\tvar forceVnodeUpdate, forceComponentUpdate\n\t\tif (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === "function") forceVnodeUpdate = vnode.attrs.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (typeof vnode.tag !== "string" && typeof vnode._state.onbeforeupdate === "function") forceComponentUpdate = vnode._state.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (!(forceVnodeUpdate === undefined && forceComponentUpdate === undefined) && !forceVnodeUpdate && !forceComponentUpdate) {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t\tvnode.instance = old.instance\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\tfunction render(dom, vnodes) {\n\t\tif (!dom) throw new Error("Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.")\n\t\tvar hooks = []\n\t\tvar active = $doc.activeElement\n\t\tvar namespace = dom.namespaceURI\n\t\t// First time0 rendering into a node clears it out\n\t\tif (dom.vnodes == null) dom.textContent = ""\n\t\tif (!Array.isArray(vnodes)) vnodes = [vnodes]\n\t\tupdateNodes(dom, dom.vnodes, Vnode.normalizeChildren(vnodes), false, hooks, null, namespace === "http://www.w3.org/1999/xhtml" ? undefined : namespace)\n\t\tdom.vnodes = vnodes\n\t\t// document.activeElement can return null in IE https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement\n\t\tif (active != null && $doc.activeElement !== active) active.focus()\n\t\tfor (var i = 0; i < hooks.length; i++) hooks[i]()\n\t}\n\treturn {render: render, setEventCallback: setEventCallback}\n}\nfunction throttle(callback) {\n\t//60fps translates to 16.6ms, round it down since setTimeout requires int\n\tvar time = 16\n\tvar last = 0, pending = null\n\tvar timeout = typeof requestAnimationFrame === "function" ? requestAnimationFrame : setTimeout\n\treturn function() {\n\t\tvar now = Date.now()\n\t\tif (last === 0 || now - last >= time) {\n\t\t\tlast = now\n\t\t\tcallback()\n\t\t}\n\t\telse if (pending === null) {\n\t\t\tpending = timeout(function() {\n\t\t\t\tpending = null\n\t\t\t\tcallback()\n\t\t\t\tlast = Date.now()\n\t\t\t}, time - (now - last))\n\t\t}\n\t}\n}\nvar _11 = function($window) {\n\tvar renderService = coreRenderer($window)\n\trenderService.setEventCallback(function(e) {\n\t\tif (e.redraw === false) e.redraw = undefined\n\t\telse redraw()\n\t})\n\tvar callbacks = []\n\tfunction subscribe(key1, callback) {\n\t\tunsubscribe(key1)\n\t\tcallbacks.push(key1, throttle(callback))\n\t}\n\tfunction unsubscribe(key1) {\n\t\tvar index = callbacks.indexOf(key1)\n\t\tif (index > -1) callbacks.splice(index, 2)\n\t}\n\tfunction redraw() {\n\t\tfor (var i = 1; i < callbacks.length; i += 2) {\n\t\t\tcallbacks[i]()\n\t\t}\n\t}\n\treturn {subscribe: subscribe, unsubscribe: unsubscribe, redraw: redraw, render: renderService.render}\n}\nvar redrawService = _11(window)\nrequestService.setCompletionCallback(redrawService.redraw)\nvar _16 = function(redrawService0) {\n\treturn function(root, component) {\n\t\tif (component === null) {\n\t\t\tredrawService0.render(root, [])\n\t\t\tredrawService0.unsubscribe(root)\n\t\t\treturn\n\t\t}\n\t\t\n\t\tif (component.view == null && typeof component !== "function") throw new Error("m.mount(element, component) expects a component, not a vnode")\n\t\t\n\t\tvar run0 = function() {\n\t\t\tredrawService0.render(root, Vnode(component))\n\t\t}\n\t\tredrawService0.subscribe(root, run0)\n\t\tredrawService0.redraw()\n\t}\n}\nm.mount = _16(redrawService)\nvar Promise = PromisePolyfill\nvar parseQueryString = function(string) {\n\tif (string === "" || string == null) return {}\n\tif (string.charAt(0) === "?") string = string.slice(1)\n\tvar entries = string.split("&"), data0 = {}, counters = {}\n\tfor (var i = 0; i < entries.length; i++) {\n\t\tvar entry = entries[i].split("=")\n\t\tvar key5 = decodeURIComponent(entry[0])\n\t\tvar value = entry.length === 2 ? decodeURIComponent(entry[1]) : ""\n\t\tif (value === "true") value = true\n\t\telse if (value === "false") value = false\n\t\tvar levels = key5.split(/\\]\\[?|\\[/)\n\t\tvar cursor = data0\n\t\tif (key5.indexOf("[") > -1) levels.pop()\n\t\tfor (var j = 0; j < levels.length; j++) {\n\t\t\tvar level = levels[j], nextLevel = levels[j + 1]\n\t\t\tvar isNumber = nextLevel == "" || !isNaN(parseInt(nextLevel, 10))\n\t\t\tvar isValue = j === levels.length - 1\n\t\t\tif (level === "") {\n\t\t\t\tvar key5 = levels.slice(0, j).join()\n\t\t\t\tif (counters[key5] == null) counters[key5] = 0\n\t\t\t\tlevel = counters[key5]++\n\t\t\t}\n\t\t\tif (cursor[level] == null) {\n\t\t\t\tcursor[level] = isValue ? value : isNumber ? [] : {}\n\t\t\t}\n\t\t\tcursor = cursor[level]\n\t\t}\n\t}\n\treturn data0\n}\nvar coreRouter = function($window) {\n\tvar supportsPushState = typeof $window.history.pushState === "function"\n\tvar callAsync0 = typeof setImmediate === "function" ? setImmediate : setTimeout\n\tfunction normalize1(fragment0) {\n\t\tvar data = $window.location[fragment0].replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent)\n\t\tif (fragment0 === "pathname" && data[0] !== "/") data = "/" + data\n\t\treturn data\n\t}\n\tvar asyncId\n\tfunction debounceAsync(callback0) {\n\t\treturn function() {\n\t\t\tif (asyncId != null) return\n\t\t\tasyncId = callAsync0(function() {\n\t\t\t\tasyncId = null\n\t\t\t\tcallback0()\n\t\t\t})\n\t\t}\n\t}\n\tfunction parsePath(path, queryData, hashData) {\n\t\tvar queryIndex = path.indexOf("?")\n\t\tvar hashIndex = path.indexOf("#")\n\t\tvar pathEnd = queryIndex > -1 ? queryIndex : hashIndex > -1 ? hashIndex : path.length\n\t\tif (queryIndex > -1) {\n\t\t\tvar queryEnd = hashIndex > -1 ? hashIndex : path.length\n\t\t\tvar queryParams = parseQueryString(path.slice(queryIndex + 1, queryEnd))\n\t\t\tfor (var key4 in queryParams) queryData[key4] = queryParams[key4]\n\t\t}\n\t\tif (hashIndex > -1) {\n\t\t\tvar hashParams = parseQueryString(path.slice(hashIndex + 1))\n\t\t\tfor (var key4 in hashParams) hashData[key4] = hashParams[key4]\n\t\t}\n\t\treturn path.slice(0, pathEnd)\n\t}\n\tvar router = {prefix: "#!"}\n\trouter.getPath = function() {\n\t\tvar type2 = router.prefix.charAt(0)\n\t\tswitch (type2) {\n\t\t\tcase "#": return normalize1("hash").slice(router.prefix.length)\n\t\t\tcase "?": return normalize1("search").slice(router.prefix.length) + normalize1("hash")\n\t\t\tdefault: return normalize1("pathname").slice(router.prefix.length) + normalize1("search") + normalize1("hash")\n\t\t}\n\t}\n\trouter.setPath = function(path, data, options) {\n\t\tvar queryData = {}, hashData = {}\n\t\tpath = parsePath(path, queryData, hashData)\n\t\tif (data != null) {\n\t\t\tfor (var key4 in data) queryData[key4] = data[key4]\n\t\t\tpath = path.replace(/:([^\\/]+)/g, function(match2, token) {\n\t\t\t\tdelete queryData[token]\n\t\t\t\treturn data[token]\n\t\t\t})\n\t\t}\n\t\tvar query = buildQueryString(queryData)\n\t\tif (query) path += "?" + query\n\t\tvar hash = buildQueryString(hashData)\n\t\tif (hash) path += "#" + hash\n\t\tif (supportsPushState) {\n\t\t\tvar state = options ? options.state : null\n\t\t\tvar title = options ? options.title : null\n\t\t\t$window.onpopstate()\n\t\t\tif (options && options.replace) $window.history.replaceState(state, title, router.prefix + path)\n\t\t\telse $window.history.pushState(state, title, router.prefix + path)\n\t\t}\n\t\telse $window.location.href = router.prefix + path\n\t}\n\trouter.defineRoutes = function(routes, resolve, reject) {\n\t\tfunction resolveRoute() {\n\t\t\tvar path = router.getPath()\n\t\t\tvar params = {}\n\t\t\tvar pathname = parsePath(path, params, params)\n\t\t\tvar state = $window.history.state\n\t\t\tif (state != null) {\n\t\t\t\tfor (var k in state) params[k] = state[k]\n\t\t\t}\n\t\t\tfor (var route0 in routes) {\n\t\t\t\tvar matcher = new RegExp("^" + route0.replace(/:[^\\/]+?\\.{3}/g, "(.*?)").replace(/:[^\\/]+/g, "([^\\\\/]+)") + "\\/?$")\n\t\t\t\tif (matcher.test(pathname)) {\n\t\t\t\t\tpathname.replace(matcher, function() {\n\t\t\t\t\t\tvar keys = route0.match(/:[^\\/]+/g) || []\n\t\t\t\t\t\tvar values = [].slice.call(arguments, 1, -2)\n\t\t\t\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\t\t\t\tparams[keys[i].replace(/:|\\./g, "")] = decodeURIComponent(values[i])\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(routes[route0], params, path, route0)\n\t\t\t\t\t})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\treject(path, params)\n\t\t}\n\t\tif (supportsPushState) $window.onpopstate = debounceAsync(resolveRoute)\n\t\telse if (router.prefix.charAt(0) === "#") $window.onhashchange = resolveRoute\n\t\tresolveRoute()\n\t}\n\treturn router\n}\nvar _20 = function($window, redrawService0) {\n\tvar routeService = coreRouter($window)\n\tvar identity = function(v) {return v}\n\tvar render1, component, attrs3, currentPath, lastUpdate\n\tvar route = function(root, defaultRoute, routes) {\n\t\tif (root == null) throw new Error("Ensure the DOM element that was passed to `m.route` is not undefined")\n\t\tvar run1 = function() {\n\t\t\tif (render1 != null) redrawService0.render(root, render1(Vnode(component, attrs3.key, attrs3)))\n\t\t}\n\t\tvar bail = function(path) {\n\t\t\tif (path !== defaultRoute) routeService.setPath(defaultRoute, null, {replace: true})\n\t\t\telse throw new Error("Could not resolve default route " + defaultRoute)\n\t\t}\n\t\trouteService.defineRoutes(routes, function(payload, params, path) {\n\t\t\tvar update = lastUpdate = function(routeResolver, comp) {\n\t\t\t\tif (update !== lastUpdate) return\n\t\t\t\tcomponent = comp != null && (typeof comp.view === "function" || typeof comp === "function")? comp : "div"\n\t\t\t\tattrs3 = params, currentPath = path, lastUpdate = null\n\t\t\t\trender1 = (routeResolver.render || identity).bind(routeResolver)\n\t\t\t\trun1()\n\t\t\t}\n\t\t\tif (payload.view || typeof payload === "function") update({}, payload)\n\t\t\telse {\n\t\t\t\tif (payload.onmatch) {\n\t\t\t\t\tPromise.resolve(payload.onmatch(params, path)).then(function(resolved) {\n\t\t\t\t\t\tupdate(payload, resolved)\n\t\t\t\t\t}, bail)\n\t\t\t\t}\n\t\t\t\telse update(payload, "div")\n\t\t\t}\n\t\t}, bail)\n\t\tredrawService0.subscribe(root, run1)\n\t}\n\troute.set = function(path, data, options) {\n\t\tif (lastUpdate != null) {\n\t\t\toptions = options || {}\n\t\t\toptions.replace = true\n\t\t}\n\t\tlastUpdate = null\n\t\trouteService.setPath(path, data, options)\n\t}\n\troute.get = function() {return currentPath}\n\troute.prefix = function(prefix0) {routeService.prefix = prefix0}\n\troute.link = function(vnode1) {\n\t\tvnode1.dom.setAttribute("href", routeService.prefix + vnode1.attrs.href)\n\t\tvnode1.dom.onclick = function(e) {\n\t\t\tif (e.ctrlKey || e.metaKey || e.shiftKey || e.which === 2) return\n\t\t\te.preventDefault()\n\t\t\te.redraw = false\n\t\t\tvar href = this.getAttribute("href")\n\t\t\tif (href.indexOf(routeService.prefix) === 0) href = href.slice(routeService.prefix.length)\n\t\t\troute.set(href, undefined, undefined)\n\t\t}\n\t}\n\troute.param = function(key3) {\n\t\tif(typeof attrs3 !== "undefined" && typeof key3 !== "undefined") return attrs3[key3]\n\t\treturn attrs3\n\t}\n\treturn route\n}\nm.route = _20(window, redrawService)\nm.withAttr = function(attrName, callback1, context) {\n\treturn function(e) {\n\t\tcallback1.call(context || this, attrName in e.currentTarget ? e.currentTarget[attrName] : e.currentTarget.getAttribute(attrName))\n\t}\n}\nvar _28 = coreRenderer(window)\nm.render = _28.render\nm.redraw = redrawService.redraw\nm.request = requestService.request\nm.jsonp = requestService.jsonp\nm.parseQueryString = parseQueryString\nm.buildQueryString = buildQueryString\nm.version = "1.1.6"\nm.vnode = Vnode\nif (true) module["exports"] = m\nelse {}\n}());\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3).setImmediate, __webpack_require__(1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,exports,__webpack_require__){eval("/*\n\n  Audio Mixer Demo Page\n\n*/\nvar m = __webpack_require__(0);\n\nvar audioMixer = __webpack_require__(6);\n\nvar style = __webpack_require__(8);\n\nvar CreateTrack = __webpack_require__(9);\n\nvar TrackList = __webpack_require__(13);\n\nvar mix = new audioMixer.default.Mixer();\nwindow.mix = mix; // dummyTracks() // <-- uncomment to pre-populate track list with dummy tracks\n\nvar Interface = {\n  view: view\n};\nm.mount(document.querySelector('.container'), Interface); // ********************************************************\n\nvar dummyTrack = function dummyTrack() {\n  return {\n    options: {\n      id: 'test a'\n    },\n    paused: function paused() {\n      return true;\n    },\n    play: function play() {\n      return true;\n    },\n    on: function on() {\n      return true;\n    },\n    volume: function volume() {\n      return 1;\n    }\n  };\n};\n\nfunction dummyTracks() {\n  mix.tracks = function () {\n    return [dummyTrack(), dummyTrack()];\n  };\n} // ********************************************************\n\n\nfunction view(vnode) {\n  var state = this;\n  return [m('h3', ['Audio Mixer Demo']), m('h4', [m('a', {\n    href: 'https://github.com/heliosdesign/helios-audio-mixer'\n  }, ['https://github.com/heliosdesign/helios-audio-mixer'])]), m('section.create', [m('.row', [m('header', 'Create Track')]), m(CreateTrack, {\n    mix: mix\n  })]), m('section.tracks', [m('.row', [m('header', 'Tracks')]), m(TrackList, {\n    mix: mix\n  })])];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2RlbW8vanMvZGVtby5qcz84YzQxIl0sIm5hbWVzIjpbIm0iLCJyZXF1aXJlIiwiYXVkaW9NaXhlciIsInN0eWxlIiwiQ3JlYXRlVHJhY2siLCJUcmFja0xpc3QiLCJtaXgiLCJkZWZhdWx0IiwiTWl4ZXIiLCJ3aW5kb3ciLCJJbnRlcmZhY2UiLCJ2aWV3IiwibW91bnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJkdW1teVRyYWNrIiwib3B0aW9ucyIsImlkIiwicGF1c2VkIiwicGxheSIsIm9uIiwidm9sdW1lIiwiZHVtbXlUcmFja3MiLCJ0cmFja3MiLCJ2bm9kZSIsInN0YXRlIiwiaHJlZiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBTUEsSUFBTUEsQ0FBQyxHQUFHQyxtQkFBTyxDQUFDLENBQUQsQ0FBakI7O0FBQ0EsSUFBTUMsVUFBVSxHQUFHRCxtQkFBTyxDQUFDLENBQUQsQ0FBMUI7O0FBQ0EsSUFBTUUsS0FBSyxHQUFHRixtQkFBTyxDQUFDLENBQUQsQ0FBckI7O0FBQ0EsSUFBTUcsV0FBVyxHQUFHSCxtQkFBTyxDQUFDLENBQUQsQ0FBM0I7O0FBQ0EsSUFBTUksU0FBUyxHQUFHSixtQkFBTyxDQUFDLEVBQUQsQ0FBekI7O0FBRUEsSUFBTUssR0FBRyxHQUFHLElBQUlKLFVBQVUsQ0FBQ0ssT0FBWCxDQUFtQkMsS0FBdkIsRUFBWjtBQUNBQyxNQUFNLENBQUNILEdBQVAsR0FBYUEsR0FBYixDLENBRUE7O0FBRUEsSUFBTUksU0FBUyxHQUFHO0FBQUVDLE1BQUksRUFBSkE7QUFBRixDQUFsQjtBQUNBWCxDQUFDLENBQUNZLEtBQUYsQ0FBUUMsUUFBUSxDQUFDQyxhQUFULENBQXVCLFlBQXZCLENBQVIsRUFBOENKLFNBQTlDLEUsQ0FFQTs7QUFFQSxJQUFNSyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxHQUFXO0FBQzVCLFNBQU87QUFDTEMsV0FBTyxFQUFFO0FBQUVDLFFBQUUsRUFBRTtBQUFOLEtBREo7QUFFTEMsVUFBTSxFQUFHO0FBQUEsYUFBTSxJQUFOO0FBQUEsS0FGSjtBQUdMQyxRQUFJLEVBQUs7QUFBQSxhQUFNLElBQU47QUFBQSxLQUhKO0FBSUxDLE1BQUUsRUFBTztBQUFBLGFBQU0sSUFBTjtBQUFBLEtBSko7QUFLTEMsVUFBTSxFQUFHO0FBQUEsYUFBTSxDQUFOO0FBQUE7QUFMSixHQUFQO0FBT0QsQ0FSRDs7QUFTQSxTQUFTQyxXQUFULEdBQXVCO0FBQ3JCaEIsS0FBRyxDQUFDaUIsTUFBSixHQUFhLFlBQVc7QUFDdEIsV0FBTyxDQUFFUixVQUFVLEVBQVosRUFBZ0JBLFVBQVUsRUFBMUIsQ0FBUDtBQUNELEdBRkQ7QUFHRCxDLENBRUQ7OztBQUVBLFNBQVNKLElBQVQsQ0FBY2EsS0FBZCxFQUFxQjtBQUNuQixNQUFJQyxLQUFLLEdBQUcsSUFBWjtBQUVBLFNBQU8sQ0FDTHpCLENBQUMsQ0FBQyxJQUFELEVBQU8sQ0FBRSxrQkFBRixDQUFQLENBREksRUFHTEEsQ0FBQyxDQUFDLElBQUQsRUFBTyxDQUNOQSxDQUFDLENBQUMsR0FBRCxFQUFNO0FBQUUwQixRQUFJLEVBQUU7QUFBUixHQUFOLEVBQXNFLENBQ3JFLG9EQURxRSxDQUF0RSxDQURLLENBQVAsQ0FISSxFQVNMMUIsQ0FBQyxDQUFDLGdCQUFELEVBQW1CLENBQ2xCQSxDQUFDLENBQUMsTUFBRCxFQUFTLENBQUVBLENBQUMsQ0FBQyxRQUFELEVBQVcsY0FBWCxDQUFILENBQVQsQ0FEaUIsRUFFbEJBLENBQUMsQ0FBQ0ksV0FBRCxFQUFjO0FBQUVFLE9BQUcsRUFBSEE7QUFBRixHQUFkLENBRmlCLENBQW5CLENBVEksRUFjTE4sQ0FBQyxDQUFDLGdCQUFELEVBQW1CLENBQ2xCQSxDQUFDLENBQUMsTUFBRCxFQUFTLENBQUVBLENBQUMsQ0FBQyxRQUFELEVBQVcsUUFBWCxDQUFILENBQVQsQ0FEaUIsRUFFbEJBLENBQUMsQ0FBQ0ssU0FBRCxFQUFZO0FBQUVDLE9BQUcsRUFBSEE7QUFBRixHQUFaLENBRmlCLENBQW5CLENBZEksQ0FBUDtBQW1CRCIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblxuICBBdWRpbyBNaXhlciBEZW1vIFBhZ2VcblxuKi9cblxuY29uc3QgbSA9IHJlcXVpcmUoJ21pdGhyaWwnKVxuY29uc3QgYXVkaW9NaXhlciA9IHJlcXVpcmUoJy4uLy4uLy4uL2F1ZGlvTWl4ZXInKVxuY29uc3Qgc3R5bGUgPSByZXF1aXJlKCcuLi9zdHlsZS5zYXNzJylcbmNvbnN0IENyZWF0ZVRyYWNrID0gcmVxdWlyZSgnbW9kdWxlcy9jcmVhdGVUcmFjaycpXG5jb25zdCBUcmFja0xpc3QgPSByZXF1aXJlKCdtb2R1bGVzL3RyYWNrTGlzdCcpXG5cbmNvbnN0IG1peCA9IG5ldyBhdWRpb01peGVyLmRlZmF1bHQuTWl4ZXIoKVxud2luZG93Lm1peCA9IG1peFxuXG4vLyBkdW1teVRyYWNrcygpIC8vIDwtLSB1bmNvbW1lbnQgdG8gcHJlLXBvcHVsYXRlIHRyYWNrIGxpc3Qgd2l0aCBkdW1teSB0cmFja3NcblxuY29uc3QgSW50ZXJmYWNlID0geyB2aWV3IH1cbm0ubW91bnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRhaW5lcicpLCBJbnRlcmZhY2UpXG5cbi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbmNvbnN0IGR1bW15VHJhY2sgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBvcHRpb25zOiB7IGlkOiAndGVzdCBhJyB9LFxuICAgIHBhdXNlZDogICgpID0+IHRydWUsXG4gICAgcGxheTogICAgKCkgPT4gdHJ1ZSxcbiAgICBvbjogICAgICAoKSA9PiB0cnVlLFxuICAgIHZvbHVtZTogICgpID0+IDFcbiAgfVxufVxuZnVuY3Rpb24gZHVtbXlUcmFja3MoKSB7XG4gIG1peC50cmFja3MgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gWyBkdW1teVRyYWNrKCksIGR1bW15VHJhY2soKSBdXG4gIH1cbn1cblxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuZnVuY3Rpb24gdmlldyh2bm9kZSkge1xuICBsZXQgc3RhdGUgPSB0aGlzXG5cbiAgcmV0dXJuIFtcbiAgICBtKCdoMycsIFsgJ0F1ZGlvIE1peGVyIERlbW8nIF0pLFxuXG4gICAgbSgnaDQnLCBbXG4gICAgICBtKCdhJywgeyBocmVmOiAnaHR0cHM6Ly9naXRodWIuY29tL2hlbGlvc2Rlc2lnbi9oZWxpb3MtYXVkaW8tbWl4ZXInIH0sIFtcbiAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS9oZWxpb3NkZXNpZ24vaGVsaW9zLWF1ZGlvLW1peGVyJ1xuICAgICAgXSlcbiAgICBdKSxcblxuICAgIG0oJ3NlY3Rpb24uY3JlYXRlJywgW1xuICAgICAgbSgnLnJvdycsIFsgbSgnaGVhZGVyJywgJ0NyZWF0ZSBUcmFjaycpIF0pLFxuICAgICAgbShDcmVhdGVUcmFjaywgeyBtaXggfSlcbiAgICBdKSxcblxuICAgIG0oJ3NlY3Rpb24udHJhY2tzJywgW1xuICAgICAgbSgnLnJvdycsIFsgbSgnaGVhZGVyJywgJ1RyYWNrcycpIF0pLFxuICAgICAgbShUcmFja0xpc3QsIHsgbWl4IH0pXG4gICAgXSlcbiAgXVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||\n            (typeof self !== "undefined" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(4);\n// On some exotic environments, it\'s not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||\n                       (typeof global !== "undefined" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||\n                         (typeof global !== "undefined" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz81MTE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxtQkFBTyxDQUFDLENBQWM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    "use strict";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== "function") {\n        callback = new Function("" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."\n        // So if we\'re currently running a task, we\'ll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // "too much recursion" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can\'t be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage("", "*");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = "setImmediate$" + Math.random() + "$";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === "string" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener("message", onGlobalMessage, false);\n        } else {\n            global.attachEvent("onmessage", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, "*");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it\'s been called.\n            var script = doc.createElement("script");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don\'t get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === "[object process]") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && "onreadystatechange" in doc.createElement("script")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(1), __webpack_require__(5)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzP2YyOGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsVUFBVSIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (( false ? undefined : _typeof(exports)) === \'object\' && ( false ? undefined : _typeof(module)) === \'object\') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __webpack_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== \'undefined\' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: \'Module\'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, \'__esModule\', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __webpack_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __webpack_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && _typeof(value) === \'object\' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __webpack_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, \'default\', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != \'string\') for (var key in value) {\n          __webpack_require__.d(ns, key, function (key) {\n            return value[key];\n          }.bind(null, key));\n        }\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module[\'default\'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, \'a\', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = "";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = "./src/index.js");\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    {\n      /***/\n      "./src/index.js":\n      /*!**********************!*\\\n        !*** ./src/index.js ***!\n        \\**********************/\n\n      /*! exports provided: default */\n\n      /***/\n      function srcIndexJs(module, __webpack_exports__, __webpack_require__) {\n        "use strict";\n\n        eval("__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _modules_Mixer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/Mixer */ \\"./src/modules/Mixer.js\\");\\n/* harmony import */ var _modules_Html5Track__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/Html5Track */ \\"./src/modules/Html5Track.js\\");\\n/*\\n\\n  Audio Mixer\\n\\n*/\\n\\n\\n/* harmony default export */ __webpack_exports__[\\"default\\"] = ({\\n  Mixer: _modules_Mixer__WEBPACK_IMPORTED_MODULE_0__[\\"default\\"],\\n  Html5Track: _modules_Html5Track__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"]\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6WyJNaXhlciIsIkh0bWw1VHJhY2siXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBOzs7OztBQU1BO0FBQ0E7QUFFZTtBQUFFQSxPQUFLLEVBQUxBLHNEQUFGO0FBQVNDLFlBQVUsRUFBVkEsMkRBQVVBO0FBQW5CLENBQWYiLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXG4gIEF1ZGlvIE1peGVyXG5cbiovXG5cbmltcG9ydCBNaXhlciBmcm9tICcuL21vZHVsZXMvTWl4ZXInXG5pbXBvcnQgSHRtbDVUcmFjayBmcm9tICcuL21vZHVsZXMvSHRtbDVUcmFjaydcblxuZXhwb3J0IGRlZmF1bHQgeyBNaXhlciwgSHRtbDVUcmFjayB9XG4iXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///./src/index.js\\n");\n        /***/\n      },\n\n      /***/\n      "./src/modules/BaseTrack.js":\n      /*!**********************************!*\\\n        !*** ./src/modules/BaseTrack.js ***!\n        \\**********************************/\n\n      /*! exports provided: default */\n\n      /***/\n      function srcModulesBaseTrackJs(module, __webpack_exports__, __webpack_require__) {\n        "use strict";\n\n        eval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\"default\\", function() { return BaseTrack; });\\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\\n\\nfunction _nonIterableSpread() { throw new TypeError(\\"Invalid attempt to spread non-iterable instance\\"); }\\n\\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \\"[object Arguments]\\") return Array.from(iter); }\\n\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/*\\n\\n  base Track class, with event and timeline functionality\\n\\n*/\\nvar BaseTrack =\\n/*#__PURE__*/\\nfunction () {\\n  function BaseTrack(params) {\\n    _classCallCheck(this, BaseTrack);\\n\\n    var track = this;\\n    track.id = params.id;\\n    track.events = {};\\n    track.timelineEvents = params.timelineEvents ? _toConsumableArray(params.timelineEvents) : [];\\n  }\\n\\n  _createClass(BaseTrack, [{\\n    key: \\"destroy\\",\\n    value: function destroy() {}\\n    /*\\n       Events\\n     */\\n\\n  }, {\\n    key: \\"on\\",\\n    value: function on(eventName, callback) {\\n      var track = this;\\n\\n      if (typeof eventName !== \'string\') {\\n        throw new Error(\'Event name must be a string.\');\\n      }\\n\\n      if (!callback) {\\n        throw new Error(\'Can’t register an event without a callback.\');\\n      }\\n\\n      track.events[eventName] ? track.events[eventName].push(callback) : track.events[eventName] = [callback];\\n      return track;\\n    }\\n  }, {\\n    key: \\"off\\",\\n    value: function off(eventName, callback) {\\n      var track = this;\\n\\n      if (track.events[eventName]) {\\n        if (callback) {\\n          // remove specific callback\\n          var index = track.events[eventName].indexOf(callback);\\n          track.events[eventName].splice(index, 1);\\n        } else {\\n          // remove all callbacks for a given event name\\n          track.events[eventName] = [];\\n        }\\n      }\\n\\n      return track;\\n    }\\n  }, {\\n    key: \\"one\\",\\n    value: function one(eventName, callback) {\\n      var track = this;\\n\\n      var wrappedCallback = function wrappedCallback() {\\n        track.off(eventName, wrappedCallback);\\n        callback();\\n      };\\n\\n      track.on(eventName, wrappedCallback);\\n      return track;\\n    }\\n  }, {\\n    key: \\"trigger\\",\\n    value: function trigger(eventName) {\\n      var track = this;\\n\\n      if (track.events[eventName]) {\\n        var args = Array.prototype.slice.call(arguments, 1);\\n        track.events[eventName].forEach(function (fn) {\\n          return fn.apply(track, args);\\n        });\\n      }\\n\\n      return track;\\n    }\\n    /*\\n       Timeline\\n         check if any events need to be triggered\\n        this is called by the mixer using requestAnimationFrame\\n     */\\n\\n  }, {\\n    key: \\"updateTimelineEvents\\",\\n    value: function updateTimelineEvents(time) {\\n      var track = this;\\n      var e;\\n\\n      for (var i = 0; i < track.timelineEvents.length; i++) {\\n        e = track.timelineEvents[i];\\n\\n        if (time >= e.time && !e.triggered) {\\n          e.triggered = true;\\n\\n          if (e.callback) {\\n            e.callback.call(track);\\n          }\\n        }\\n      }\\n    }\\n  }]);\\n\\n  return BaseTrack;\\n}();\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvbW9kdWxlcy9CYXNlVHJhY2suanM/MzRlYiJdLCJuYW1lcyI6WyJCYXNlVHJhY2siLCJwYXJhbXMiLCJ0cmFjayIsImlkIiwiZXZlbnRzIiwidGltZWxpbmVFdmVudHMiLCJldmVudE5hbWUiLCJjYWxsYmFjayIsIkVycm9yIiwicHVzaCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsIndyYXBwZWRDYWxsYmFjayIsIm9mZiIsIm9uIiwiYXJncyIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiYXJndW1lbnRzIiwiZm9yRWFjaCIsImZuIiwiYXBwbHkiLCJ0aW1lIiwiZSIsImkiLCJsZW5ndGgiLCJ0cmlnZ2VyZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7SUFNcUJBLFM7OztBQUNuQixxQkFBWUMsTUFBWixFQUFvQjtBQUFBOztBQUNsQixRQUFJQyxLQUFLLEdBQUcsSUFBWjtBQUVBQSxTQUFLLENBQUNDLEVBQU4sR0FBZUYsTUFBTSxDQUFDRSxFQUF0QjtBQUNBRCxTQUFLLENBQUNFLE1BQU4sR0FBZSxFQUFmO0FBQ0FGLFNBQUssQ0FBQ0csY0FBTixHQUF1QkosTUFBTSxDQUFDSSxjQUFQLHNCQUE0QkosTUFBTSxDQUFDSSxjQUFuQyxJQUFzRCxFQUE3RTtBQUNEOzs7OzhCQUVTLENBQUU7QUFFWjs7Ozs7O3VCQU1HQyxTLEVBQVdDLFEsRUFBVTtBQUN0QixVQUFJTCxLQUFLLEdBQUcsSUFBWjs7QUFFQSxVQUFJLE9BQU9JLFNBQVAsS0FBcUIsUUFBekIsRUFBbUM7QUFDakMsY0FBTSxJQUFJRSxLQUFKLENBQVUsOEJBQVYsQ0FBTjtBQUNEOztBQUVELFVBQUksQ0FBQ0QsUUFBTCxFQUFlO0FBQ2IsY0FBTSxJQUFJQyxLQUFKLENBQVUsNkNBQVYsQ0FBTjtBQUNEOztBQUVETixXQUFLLENBQUNFLE1BQU4sQ0FBYUUsU0FBYixJQUEwQkosS0FBSyxDQUFDRSxNQUFOLENBQWFFLFNBQWIsRUFBd0JHLElBQXhCLENBQTZCRixRQUE3QixDQUExQixHQUFtRUwsS0FBSyxDQUFDRSxNQUFOLENBQWFFLFNBQWIsSUFBMEIsQ0FBQ0MsUUFBRCxDQUE3RjtBQUVBLGFBQU9MLEtBQVA7QUFDRDs7O3dCQUVHSSxTLEVBQVdDLFEsRUFBVTtBQUN2QixVQUFJTCxLQUFLLEdBQUcsSUFBWjs7QUFFQSxVQUFJQSxLQUFLLENBQUNFLE1BQU4sQ0FBYUUsU0FBYixDQUFKLEVBQTZCO0FBQzNCLFlBQUlDLFFBQUosRUFBYztBQUFFO0FBQ2QsY0FBTUcsS0FBSyxHQUFHUixLQUFLLENBQUNFLE1BQU4sQ0FBYUUsU0FBYixFQUF3QkssT0FBeEIsQ0FBZ0NKLFFBQWhDLENBQWQ7QUFDQUwsZUFBSyxDQUFDRSxNQUFOLENBQWFFLFNBQWIsRUFBd0JNLE1BQXhCLENBQStCRixLQUEvQixFQUFxQyxDQUFyQztBQUNELFNBSEQsTUFHTztBQUFTO0FBQ2RSLGVBQUssQ0FBQ0UsTUFBTixDQUFhRSxTQUFiLElBQTBCLEVBQTFCO0FBQ0Q7QUFDRjs7QUFFRCxhQUFPSixLQUFQO0FBQ0Q7Ozt3QkFFR0ksUyxFQUFXQyxRLEVBQVU7QUFDdkIsVUFBSUwsS0FBSyxHQUFHLElBQVo7O0FBRUEsVUFBTVcsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixHQUFXO0FBQ2pDWCxhQUFLLENBQUNZLEdBQU4sQ0FBVVIsU0FBVixFQUFxQk8sZUFBckI7QUFDQU4sZ0JBQVE7QUFDVCxPQUhEOztBQUtBTCxXQUFLLENBQUNhLEVBQU4sQ0FBU1QsU0FBVCxFQUFvQk8sZUFBcEI7QUFFQSxhQUFPWCxLQUFQO0FBQ0Q7Ozs0QkFFT0ksUyxFQUFXO0FBQ2pCLFVBQUlKLEtBQUssR0FBRyxJQUFaOztBQUVBLFVBQUlBLEtBQUssQ0FBQ0UsTUFBTixDQUFhRSxTQUFiLENBQUosRUFBNkI7QUFDM0IsWUFBTVUsSUFBSSxHQUFHQyxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQkMsU0FBM0IsRUFBc0MsQ0FBdEMsQ0FBYjtBQUNBbkIsYUFBSyxDQUFDRSxNQUFOLENBQWFFLFNBQWIsRUFBd0JnQixPQUF4QixDQUFnQyxVQUFBQyxFQUFFO0FBQUEsaUJBQUlBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTdEIsS0FBVCxFQUFnQmMsSUFBaEIsQ0FBSjtBQUFBLFNBQWxDO0FBQ0Q7O0FBRUQsYUFBT2QsS0FBUDtBQUNEO0FBRUQ7Ozs7Ozs7O3lDQVNxQnVCLEksRUFBTTtBQUN6QixVQUFJdkIsS0FBSyxHQUFHLElBQVo7QUFDQSxVQUFJd0IsQ0FBSjs7QUFFQSxXQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUd6QixLQUFLLENBQUNHLGNBQU4sQ0FBcUJ1QixNQUF6QyxFQUFpREQsQ0FBQyxFQUFsRCxFQUFzRDtBQUNwREQsU0FBQyxHQUFHeEIsS0FBSyxDQUFDRyxjQUFOLENBQXFCc0IsQ0FBckIsQ0FBSjs7QUFDQSxZQUFJRixJQUFJLElBQUlDLENBQUMsQ0FBQ0QsSUFBVixJQUFrQixDQUFDQyxDQUFDLENBQUNHLFNBQXpCLEVBQW9DO0FBQ2xDSCxXQUFDLENBQUNHLFNBQUYsR0FBYyxJQUFkOztBQUNBLGNBQUlILENBQUMsQ0FBQ25CLFFBQU4sRUFBZ0I7QUFBRW1CLGFBQUMsQ0FBQ25CLFFBQUYsQ0FBV2EsSUFBWCxDQUFnQmxCLEtBQWhCO0FBQXdCO0FBQzNDO0FBQ0Y7QUFDRiIsImZpbGUiOiIuL3NyYy9tb2R1bGVzL0Jhc2VUcmFjay5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5cbiAgYmFzZSBUcmFjayBjbGFzcywgd2l0aCBldmVudCBhbmQgdGltZWxpbmUgZnVuY3Rpb25hbGl0eVxuXG4qL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlVHJhY2sge1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICBsZXQgdHJhY2sgPSB0aGlzXG5cbiAgICB0cmFjay5pZCAgICAgPSBwYXJhbXMuaWRcbiAgICB0cmFjay5ldmVudHMgPSB7fVxuICAgIHRyYWNrLnRpbWVsaW5lRXZlbnRzID0gcGFyYW1zLnRpbWVsaW5lRXZlbnRzID8gWy4uLnBhcmFtcy50aW1lbGluZUV2ZW50cyBdIDogW11cbiAgfVxuXG4gIGRlc3Ryb3koKSB7fVxuXG4gIC8qXG5cbiAgICBFdmVudHNcblxuICAqL1xuXG4gIG9uKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICBsZXQgdHJhY2sgPSB0aGlzXG5cbiAgICBpZiAodHlwZW9mIGV2ZW50TmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXZlbnQgbmFtZSBtdXN0IGJlIGEgc3RyaW5nLicpXG4gICAgfVxuXG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW7igJl0IHJlZ2lzdGVyIGFuIGV2ZW50IHdpdGhvdXQgYSBjYWxsYmFjay4nKVxuICAgIH1cblxuICAgIHRyYWNrLmV2ZW50c1tldmVudE5hbWVdID8gdHJhY2suZXZlbnRzW2V2ZW50TmFtZV0ucHVzaChjYWxsYmFjaykgOiB0cmFjay5ldmVudHNbZXZlbnROYW1lXSA9IFtjYWxsYmFja11cblxuICAgIHJldHVybiB0cmFja1xuICB9XG5cbiAgb2ZmKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICBsZXQgdHJhY2sgPSB0aGlzXG5cbiAgICBpZiAodHJhY2suZXZlbnRzW2V2ZW50TmFtZV0pIHtcbiAgICAgIGlmIChjYWxsYmFjaykgeyAvLyByZW1vdmUgc3BlY2lmaWMgY2FsbGJhY2tcbiAgICAgICAgY29uc3QgaW5kZXggPSB0cmFjay5ldmVudHNbZXZlbnROYW1lXS5pbmRleE9mKGNhbGxiYWNrKVxuICAgICAgICB0cmFjay5ldmVudHNbZXZlbnROYW1lXS5zcGxpY2UoaW5kZXgsMSlcbiAgICAgIH0gZWxzZSB7ICAgICAgICAvLyByZW1vdmUgYWxsIGNhbGxiYWNrcyBmb3IgYSBnaXZlbiBldmVudCBuYW1lXG4gICAgICAgIHRyYWNrLmV2ZW50c1tldmVudE5hbWVdID0gW11cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJhY2tcbiAgfVxuXG4gIG9uZShldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgbGV0IHRyYWNrID0gdGhpc1xuXG4gICAgY29uc3Qgd3JhcHBlZENhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICB0cmFjay5vZmYoZXZlbnROYW1lLCB3cmFwcGVkQ2FsbGJhY2spXG4gICAgICBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgdHJhY2sub24oZXZlbnROYW1lLCB3cmFwcGVkQ2FsbGJhY2spXG5cbiAgICByZXR1cm4gdHJhY2tcbiAgfVxuXG4gIHRyaWdnZXIoZXZlbnROYW1lKSB7XG4gICAgbGV0IHRyYWNrID0gdGhpc1xuXG4gICAgaWYgKHRyYWNrLmV2ZW50c1tldmVudE5hbWVdKSB7XG4gICAgICBjb25zdCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKVxuICAgICAgdHJhY2suZXZlbnRzW2V2ZW50TmFtZV0uZm9yRWFjaChmbiA9PiBmbi5hcHBseSh0cmFjaywgYXJncykpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYWNrXG4gIH1cblxuICAvKlxuXG4gICAgVGltZWxpbmVcblxuICAgICAgY2hlY2sgaWYgYW55IGV2ZW50cyBuZWVkIHRvIGJlIHRyaWdnZXJlZFxuICAgICAgdGhpcyBpcyBjYWxsZWQgYnkgdGhlIG1peGVyIHVzaW5nIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuXG4gICovXG5cbiAgdXBkYXRlVGltZWxpbmVFdmVudHModGltZSkge1xuICAgIGxldCB0cmFjayA9IHRoaXNcbiAgICBsZXQgZVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFjay50aW1lbGluZUV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgZSA9IHRyYWNrLnRpbWVsaW5lRXZlbnRzW2ldXG4gICAgICBpZiAodGltZSA+PSBlLnRpbWUgJiYgIWUudHJpZ2dlcmVkKSB7XG4gICAgICAgIGUudHJpZ2dlcmVkID0gdHJ1ZVxuICAgICAgICBpZiAoZS5jYWxsYmFjaykgeyBlLmNhbGxiYWNrLmNhbGwodHJhY2spIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/modules/BaseTrack.js\\n");\n        /***/\n      },\n\n      /***/\n      "./src/modules/BufferSourceTrack.js":\n      /*!******************************************!*\\\n        !*** ./src/modules/BufferSourceTrack.js ***!\n        \\******************************************/\n\n      /*! exports provided: default */\n\n      /***/\n      function srcModulesBufferSourceTrackJs(module, __webpack_exports__, __webpack_require__) {\n        "use strict";\n\n        eval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\"default\\", function() { return BufferSourceTrack; });\\n/* harmony import */ var _WebAudioTrack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WebAudioTrack */ \\"./src/modules/WebAudioTrack.js\\");\\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \\"./src/modules/utils.js\\");\\nfunction _typeof(obj) { if (typeof Symbol === \\"function\\" && typeof Symbol.iterator === \\"symbol\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\"function\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\"symbol\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\\n\\nfunction _nonIterableSpread() { throw new TypeError(\\"Invalid attempt to spread non-iterable instance\\"); }\\n\\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \\"[object Arguments]\\") return Array.from(iter); }\\n\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\"object\\" || typeof call === \\"function\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\"this hasn\'t been initialised - super() hasn\'t been called\\"); } return self; }\\n\\nfunction _get(target, property, receiver) { if (typeof Reflect !== \\"undefined\\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\\n\\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\"function\\" && superClass !== null) { throw new TypeError(\\"Super expression must either be null or a function\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n/*\\n\\n  Web Audio API: Buffer Source track\\n\\n*/\\n\\n\\n\\nvar BufferSourceTrack =\\n/*#__PURE__*/\\nfunction (_WebAudioTrack) {\\n  _inherits(BufferSourceTrack, _WebAudioTrack);\\n\\n  function BufferSourceTrack(params) {\\n    var _this;\\n\\n    _classCallCheck(this, BufferSourceTrack);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BufferSourceTrack).call(this, params));\\n\\n    var track = _assertThisInitialized(_this);\\n\\n    var defaults = {\\n      id: \'\',\\n      src: \'\',\\n      volume: 1,\\n      start: 0,\\n      loop: false,\\n      autoplay: false,\\n      autoload: true,\\n      context: false,\\n      mix: false,\\n      nodes: []\\n    };\\n    track.options = Object.assign(defaults, params);\\n    track.ctx = track.options.context;\\n    track.status = {\\n      ready: false,\\n      shouldPlayOnLoad: false,\\n      playing: false,\\n      muted: track.options.muted || false // internal flags and data\\n\\n    };\\n    track.data = {\\n      gain: track.options.volume,\\n      // manual time tracking\\n      cachedTime: 0,\\n      startTime: 0\\n    };\\n\\n    if (!track.ctx) {\\n      throw new Error(\'Can’t create a WebAudioTrack without Web Audio API support\');\\n    }\\n\\n    if (!track.options.src) {\\n      throw new Error(\'Can’t create a WebAudioTrack without a src parameter\');\\n    } // limited subset of events available because they\'re all simulated\\n\\n\\n    var eventNames = [\'loadstart\', \'loadedmetadata\', \'canplay\', \'canplaythrough\', \'play\', \'pause\', \'ended\', \'error\']; // load the source the right away, even if autoplay isn\'t set.\\n\\n    if (track.options.autoload || track.options.autoplay) {\\n      track.load();\\n    }\\n\\n    return _this;\\n  }\\n  /*\\n     Playback needs to wait for the track to be loaded.\\n    After this, it\'s a synchronous function.\\n     You can listen for the \'canplaythrough\' event to ensure\\n    synchronous playback of multiple buffer tracks.\\n   */\\n\\n\\n  _createClass(BufferSourceTrack, [{\\n    key: \\"play\\",\\n    value: function play() {\\n      var track = this;\\n      /*\\n         this logic accomodates calling play() multiple times while waiting for the track to be set up\\n       */\\n\\n      if (track.status.playing) {\\n        return track;\\n      }\\n\\n      if (!track.status.ready) {\\n        if (!track.options.autoload && !track.status.shouldPlayOnLoad) {\\n          track.load();\\n        }\\n\\n        track.status.shouldPlayOnLoad = true;\\n        return track;\\n      }\\n      /*\\n         if we got this far we\'re actually ready to play, let\'s go!\\n       */\\n      // the buffer needs to be re-created every time we play()\\n\\n\\n      track.data.source = track.ctx.createBufferSource();\\n      track.data.source.buffer = track.data.decodedBuffer;\\n      track.data.source.loop = track.options.loop ? true : false; // as do the nodes\\n\\n      var gainNode = {\\n        type: \'GainNode\',\\n        options: {\\n          gain: track.data.gain\\n        }\\n      };\\n\\n      _get(_getPrototypeOf(BufferSourceTrack.prototype), \\"createNodes\\", this).call(this, [gainNode].concat(_toConsumableArray(track.options.nodes)), track.data.source);\\n\\n      track.data.startTime = track.data.source.context.currentTime - track.data.cachedTime;\\n      track.startFrom = track.data.cachedTime || 0; // prefer start() but fall back to older, deprecated noteOn()\\n\\n      if (typeof track.data.source.start === \'function\') {\\n        track.data.source.start(0, track.startFrom);\\n      } else {\\n        track.data.source.noteOn(track.startFrom);\\n      }\\n\\n      track.setEndTimer();\\n      track.status.playing = true;\\n\\n      _get(_getPrototypeOf(BufferSourceTrack.prototype), \\"trigger\\", this).call(this, \'play\', track);\\n\\n      return track;\\n    }\\n    /*\\n       Buffer source mode requires the source file to be fully loaded\\n      and decoded before it can be play, so here we fetch it as an\\n      array buffer (because it needs to be in raw binary format to be\\n      decoded).\\n       Web Audio API has the same browser support as fetch (no IE,\\n      not even 11), so we can use this delightful method.\\n     */\\n\\n  }, {\\n    key: \\"load\\",\\n    value: function load() {\\n      var _this2 = this;\\n\\n      var track = this;\\n\\n      _get(_getPrototypeOf(BufferSourceTrack.prototype), \\"trigger\\", this).call(this, \'loadstart\');\\n\\n      return window.fetch(track.options.src).then(function (res) {\\n        return res.arrayBuffer();\\n      }).then(function (audioData) {\\n        track.data.audioData = audioData; // Decode audio data\\n\\n        if (typeof track.ctx.createGain === \'function\') {\\n          // W3C standard implementation - async (Firefox, recent Chrome)\\n          return new Promise(function (resolve, reject) {\\n            track.ctx.decodeAudioData(audioData, function (decodedBuffer) {\\n              track.data.decodedBuffer = decodedBuffer;\\n              resolve();\\n            });\\n          });\\n        } else if (typeof track.ctx.createGainNode === \'function\') {\\n          // Non-standard Webkit implementation (Safari, old Chrome)\\n          // not async but we fake it for consistency\\n          var decodedBuffer = track.ctx.createBuffer(audioData, true);\\n          track.data.decodedBuffer = decodedBuffer;\\n          return Promise.resolve();\\n        }\\n      }).then(function () {\\n        track.status.ready = true; // now that the source is decoded, we know its duration\\n\\n        _get(_getPrototypeOf(BufferSourceTrack.prototype), \\"trigger\\", _this2).call(_this2, \'loadedmetadata\');\\n\\n        _get(_getPrototypeOf(BufferSourceTrack.prototype), \\"trigger\\", _this2).call(_this2, \'canplay\');\\n\\n        _get(_getPrototypeOf(BufferSourceTrack.prototype), \\"trigger\\", _this2).call(_this2, \'canplaythrough\');\\n\\n        if (track.options.autoplay || track.status.shouldPlayOnLoad) {\\n          track.play();\\n        }\\n      });\\n    }\\n    /*\\n       Buffer tracks don\'t have an ended event so we simulate it using setTimeout\\n     */\\n\\n  }, {\\n    key: \\"setEndTimer\\",\\n    value: function setEndTimer() {\\n      var track = this;\\n      track.data.timerDuration = track.data.source.buffer.duration - track.startFrom;\\n\\n      if (track.data.onendtimer) {\\n        window.clearTimeout(track.data.onendtimer);\\n      }\\n\\n      track.data.onendtimer = window.setTimeout(track.ended.bind(track), track.data.timerDuration * 1000);\\n    }\\n  }, {\\n    key: \\"ended\\",\\n    value: function ended() {\\n      var track = this;\\n\\n      if (track.options.loop) {\\n        _get(_getPrototypeOf(BufferSourceTrack.prototype), \\"trigger\\", this).call(this, \'ended\', track);\\n\\n        _get(_getPrototypeOf(BufferSourceTrack.prototype), \\"trigger\\", this).call(this, \'loop\', track);\\n\\n        track.pause(0);\\n        track.play();\\n      } else {\\n        track.status.playing = false;\\n\\n        _get(_getPrototypeOf(BufferSourceTrack.prototype), \\"trigger\\", this).call(this, \'ended\', track);\\n      }\\n    } // end of play functions\\n    // ********************************************************\\n\\n  }, {\\n    key: \\"pause\\",\\n    value: function pause(pauseAtTime) {\\n      var track = this; // disable autoplay, if we\'ve paused the track before it\'s had a chance to load\\n\\n      if (!track.status.playing && track.status.shouldPlayOnLoad) {\\n        track.status.shouldPlayOnLoad = false;\\n        track.options.autoplay = false;\\n        return track;\\n      }\\n\\n      track.data.cachedTime = typeof pauseAtTime === \'number\' ? pauseAtTime : track.currentTime();\\n      track.status.playing = false;\\n\\n      if (track.data.onendtimer) {\\n        window.clearTimeout(track.data.onendtimer);\\n      } // prefer stop(), fallback to deprecated noteOff()\\n\\n\\n      if (track.data.source) {\\n        if (typeof track.data.source.stop === \'function\') {\\n          track.data.source.stop(0);\\n        } else if (typeof track.data.source.noteOff === \'function\') {\\n          track.data.source.noteOff(0);\\n        }\\n      }\\n\\n      _get(_getPrototypeOf(BufferSourceTrack.prototype), \\"trigger\\", this).call(this, \'pause\', track);\\n\\n      return track;\\n    }\\n  }, {\\n    key: \\"currentTime\\",\\n    value: function currentTime(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === \'number\') {\\n        if (track.status.playing) {\\n          // to seek a buffer track, we need to pause and play\\n          track.pause(setTo).play();\\n        } else {\\n          // if we\'re paused or not loaded yet, cache the time\\n          track.data.cachedTime = setTo;\\n        }\\n\\n        return track;\\n      }\\n\\n      if (!track.status.ready || !track.status.playing) {\\n        return track.data.cachedTime || 0;\\n      }\\n\\n      return track.data.source.context.currentTime - track.data.startTime || 0;\\n    }\\n  }, {\\n    key: \\"formattedTime\\",\\n    value: function formattedTime(includeDuration) {\\n      var track = this;\\n      var t = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].timeFormat(track.currentTime());\\n      var d = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].timeFormat(track.duration());\\n\\n      if (includeDuration) {\\n        return \\"\\".concat(t, \\"/\\").concat(d);\\n      } else {\\n        return t;\\n      }\\n    }\\n  }, {\\n    key: \\"duration\\",\\n    value: function duration() {\\n      var track = this;\\n\\n      if (!track.status.ready || !track.data.source) {\\n        return 0;\\n      }\\n\\n      return track.data.source.buffer.duration || 0;\\n    } // for a buffer track, volume() is basically an alias for the gain node\\n\\n  }, {\\n    key: \\"volume\\",\\n    value: function volume(setTo) {\\n      var track = this;\\n      var gainNode = track.node(\'GainNode\');\\n\\n      if (typeof setTo === \'number\') {\\n        setTo = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].normalize(setTo);\\n\\n        if (track.status.muted) {\\n          track.data.gainCache = setTo; // cache the value for when we unmute\\n\\n          track.data.gain = 0;\\n        } else {\\n          track.data.gain = setTo;\\n        }\\n\\n        if (track.status.playing && gainNode) {\\n          gainNode.gain(track.options.mix ? track.data.gain * track.options.mix.volume() : track.data.gain);\\n        }\\n\\n        return track;\\n      } else {\\n        // accurately report gain while we’re tweening it\\n        if (track.status.playing && gainNode) {\\n          track.data.gain = gainNode.gain();\\n        }\\n\\n        return track.data.gain;\\n      }\\n    }\\n  }, {\\n    key: \\"tweenVolume\\",\\n    value: function tweenVolume(setTo, duration) {\\n      var track = this; // remove existing volume tween\\n\\n      if (track.volumeTween) {\\n        window.cancelAnimationFrame(track.volumeTween);\\n      } // if we\'re playing, we can use the gain node\'s native value ramp method\\n\\n\\n      if (track.gainNode) {\\n        track.gainNode.tweenGain(setTo, duration);\\n        return _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].timeoutPromise(duration * 1000);\\n      } // if we\'re not playing or haven\'t loaded yet,\\n      // fall back to requestAnimationFrame\\n\\n\\n      return new Promise(function (resolve, reject) {\\n        var fps = 60; // requestAnimationFrame\\n\\n        var durationInFrames = Math.round(duration * fps);\\n        var frameCount = Math.round(duration * fps);\\n        var startVolume = track.volume();\\n        var endVolume = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].normalize(setTo);\\n        tick();\\n\\n        function tick() {\\n          if (frameCount <= 0) {\\n            track.volume(endVolume);\\n            resolve(track);\\n          } else {\\n            track.volumeTween = window.requestAnimationFrame(tick);\\n          }\\n\\n          frameCount -= 1;\\n          var progress = 1 - frameCount / durationInFrames;\\n          var v = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].lerp(startVolume, endVolume, progress);\\n          track.volume(v);\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\"muted\\",\\n    value: function muted(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === \'boolean\') {\\n        if (setTo === true) {\\n          // mute: cache current gain, then set to 0\\n          track.data.gainCache = track.data.gain;\\n          track.volume(0);\\n          track.status.muted = true;\\n        } else {\\n          // unmute\\n          track.status.muted = false;\\n          track.volume(track.data.gainCache);\\n        }\\n\\n        return track;\\n      }\\n\\n      return track.status.muted;\\n    }\\n  }, {\\n    key: \\"paused\\",\\n    value: function paused() {\\n      var track = this;\\n      return !track.status.playing;\\n    }\\n  }, {\\n    key: \\"destroy\\",\\n    value: function destroy() {\\n      var track = this;\\n      track.pause();\\n    }\\n  }]);\\n\\n  return BufferSourceTrack;\\n}(_WebAudioTrack__WEBPACK_IMPORTED_MODULE_0__[\\"default\\"]);\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./src/modules/BufferSourceTrack.js\\n");\n        /***/\n      },\n\n      /***/\n      "./src/modules/ElementSourceTrack.js":\n      /*!*******************************************!*\\\n        !*** ./src/modules/ElementSourceTrack.js ***!\n        \\*******************************************/\n\n      /*! exports provided: default */\n\n      /***/\n      function srcModulesElementSourceTrackJs(module, __webpack_exports__, __webpack_require__) {\n        "use strict";\n\n        eval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\"default\\", function() { return ElementSourceTrack; });\\n/* harmony import */ var _WebAudioTrack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WebAudioTrack */ \\"./src/modules/WebAudioTrack.js\\");\\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \\"./src/modules/utils.js\\");\\nfunction _typeof(obj) { if (typeof Symbol === \\"function\\" && typeof Symbol.iterator === \\"symbol\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\"function\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\"symbol\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\\n\\nfunction _nonIterableSpread() { throw new TypeError(\\"Invalid attempt to spread non-iterable instance\\"); }\\n\\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \\"[object Arguments]\\") return Array.from(iter); }\\n\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\"object\\" || typeof call === \\"function\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\"this hasn\'t been initialised - super() hasn\'t been called\\"); } return self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\"function\\" && superClass !== null) { throw new TypeError(\\"Super expression must either be null or a function\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\nfunction _get(target, property, receiver) { if (typeof Reflect !== \\"undefined\\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\\n\\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\n/*\\n\\n  Web Audio API: Element Source track\\n\\n*/\\n\\n\\n\\nvar ElementSourceTrack =\\n/*#__PURE__*/\\nfunction (_WebAudioTrack) {\\n  _inherits(ElementSourceTrack, _WebAudioTrack);\\n\\n  function ElementSourceTrack(params) {\\n    var _this;\\n\\n    _classCallCheck(this, ElementSourceTrack);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ElementSourceTrack).call(this, params));\\n\\n    var track = _assertThisInitialized(_this);\\n\\n    var defaults = {\\n      id: \'\',\\n      src: \'\',\\n      volume: 1,\\n      start: 0,\\n      loop: false,\\n      autoplay: false,\\n      context: false,\\n      mix: false,\\n      nodes: []\\n    };\\n    track.options = Object.assign(defaults, params);\\n    track.ctx = track.options.context;\\n\\n    if (!track.ctx) {\\n      throw new Error(\'Can’t create an ElementSourceTrack without Web Audio API support\');\\n    } // set up our HTML5 <audio> element\\n\\n\\n    if (!track.options.src) {\\n      throw new Error(\'Can’t create an ElementSourceTrack without a src parameter\');\\n    }\\n\\n    track.el = document.createElement(\'audio\');\\n    track.el.volume = track.options.volume;\\n    track.el.muted = track.options.muted;\\n    track.el.loop = track.options.loop;\\n    track.el.autoplay = track.options.autoplay;\\n    track.el.src = track.options.src;\\n    var eventNames = [\'loadstart\', \'loadedmetadata\', \'canplay\', \'canplaythrough\', \'play\', \'pause\', \'ended\', \'timeupdate\', \'seeking\', \'seeked\', \'error\'];\\n    eventNames.forEach(function (eventName) {\\n      track.el.addEventListener(eventName, _get(_getPrototypeOf(ElementSourceTrack.prototype), \\"trigger\\", _assertThisInitialized(_this)).bind(track, eventName, false));\\n    }); // web audio API setup (only needs to happen once)\\n\\n    track.data.source = track.ctx.createMediaElementSource(track.el);\\n    var gainNode = {\\n      type: \'GainNode\',\\n      options: {\\n        gain: track.data.gain\\n      }\\n    };\\n\\n    _get(_getPrototypeOf(ElementSourceTrack.prototype), \\"createNodes\\", _assertThisInitialized(_this)).call(_assertThisInitialized(_this), [gainNode].concat(_toConsumableArray(track.options.nodes)), track.data.source);\\n\\n    return _this;\\n  }\\n\\n  _createClass(ElementSourceTrack, [{\\n    key: \\"play\\",\\n    value: function play() {\\n      var track = this;\\n      track.el.play();\\n      return track;\\n    }\\n  }, {\\n    key: \\"pause\\",\\n    value: function pause() {\\n      var track = this;\\n      track.el.pause();\\n      return track;\\n    }\\n  }, {\\n    key: \\"stop\\",\\n    value: function stop() {\\n      var track = this;\\n      track.el.pause();\\n      track.el.currentTime = 0;\\n      return track;\\n    }\\n  }, {\\n    key: \\"currentTime\\",\\n    value: function currentTime(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === \'number\') {\\n        track.el.currentTime = setTo;\\n        return track;\\n      } else {\\n        return track.el.currentTime;\\n      }\\n    }\\n  }, {\\n    key: \\"duration\\",\\n    value: function duration() {\\n      var track = this;\\n      return track.el.duration;\\n    }\\n  }, {\\n    key: \\"formattedTime\\",\\n    value: function formattedTime(includeDuration) {\\n      var track = this;\\n      var t = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].timeFormat(track.currentTime());\\n      var d = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].timeFormat(track.duration());\\n\\n      if (includeDuration) {\\n        return \\"\\".concat(t, \\"/\\").concat(d);\\n      } else {\\n        return t;\\n      }\\n    }\\n  }, {\\n    key: \\"volume\\",\\n    value: function volume(setTo) {\\n      var track = this;\\n      var gainNode = track.node(\'GainNode\');\\n\\n      if (typeof setTo === \'number\') {\\n        setTo = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].normalize(setTo);\\n        setTo = track.options.mix ? setTo * track.options.mix.volume() : setTo;\\n        /*\\n           we don\'t need to set both the gain node and element volume,\\n          just the gain node will work, but element volume is a useful place\\n          to store the current volume value\\n         */\\n\\n        if (gainNode) {\\n          gainNode.gain(setTo);\\n        }\\n\\n        track.el.volume = setTo;\\n        return track;\\n      } else {\\n        return track.el.volume;\\n      }\\n    }\\n  }, {\\n    key: \\"tweenVolume\\",\\n    value: function tweenVolume(setTo, duration) {\\n      var track = this; // replace existing volume tween\\n\\n      if (track.volumeTween) {\\n        window.cancelAnimationFrame(track.volumeTween);\\n      }\\n\\n      return new Promise(function (resolve, reject) {\\n        var fps = 60; // requestAnimationFrame\\n\\n        var durationInFrames = Math.round(duration * fps);\\n        var frameCount = Math.round(duration * fps);\\n        var startVolume = track.volume();\\n        var endVolume = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].normalize(setTo);\\n        tick();\\n\\n        function tick() {\\n          if (frameCount <= 0) {\\n            track.volume(endVolume);\\n            resolve(track);\\n          } else {\\n            track.volumeTween = window.requestAnimationFrame(tick);\\n          }\\n\\n          frameCount -= 1;\\n          var progress = 1 - frameCount / durationInFrames;\\n          var v = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].lerp(startVolume, endVolume, progress);\\n          track.volume(v);\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\"muted\\",\\n    value: function muted(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === \'boolean\') {\\n        track.el.muted = setTo;\\n      }\\n\\n      return track.el.muted;\\n    }\\n  }, {\\n    key: \\"destroy\\",\\n    value: function destroy() {\\n      var track = this;\\n      track.pause();\\n    }\\n  }, {\\n    key: \\"paused\\",\\n    value: function paused() {\\n      var track = this;\\n      return track.el.paused;\\n    }\\n  }]);\\n\\n  return ElementSourceTrack;\\n}(_WebAudioTrack__WEBPACK_IMPORTED_MODULE_0__[\\"default\\"]);\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./src/modules/ElementSourceTrack.js\\n");\n        /***/\n      },\n\n      /***/\n      "./src/modules/Html5Track.js":\n      /*!***********************************!*\\\n        !*** ./src/modules/Html5Track.js ***!\n        \\***********************************/\n\n      /*! exports provided: default */\n\n      /***/\n      function srcModulesHtml5TrackJs(module, __webpack_exports__, __webpack_require__) {\n        "use strict";\n\n        eval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\"default\\", function() { return Html5Track; });\\n/* harmony import */ var _BaseTrack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseTrack */ \\"./src/modules/BaseTrack.js\\");\\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \\"./src/modules/utils.js\\");\\nfunction _typeof(obj) { if (typeof Symbol === \\"function\\" && typeof Symbol.iterator === \\"symbol\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\"function\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\"symbol\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\"object\\" || typeof call === \\"function\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\"this hasn\'t been initialised - super() hasn\'t been called\\"); } return self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\"function\\" && superClass !== null) { throw new TypeError(\\"Super expression must either be null or a function\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\nfunction _get(target, property, receiver) { if (typeof Reflect !== \\"undefined\\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\\n\\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\n/*\\n\\n  HTML5 <audio> element track\\n\\n*/\\n\\n\\n\\nvar Html5Track =\\n/*#__PURE__*/\\nfunction (_BaseTrack) {\\n  _inherits(Html5Track, _BaseTrack);\\n\\n  function Html5Track(params) {\\n    var _this;\\n\\n    _classCallCheck(this, Html5Track);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Html5Track).call(this, params));\\n\\n    var track = _assertThisInitialized(_this);\\n\\n    var defaults = {\\n      id: \'\',\\n      src: \'\',\\n      volume: 1,\\n      muted: false,\\n      start: 0,\\n      loop: false,\\n      autoplay: false\\n    };\\n    track.options = Object.assign(defaults, params); // set up our HTML5 <audio> element\\n\\n    if (!track.options.src) {\\n      throw new Error(\'Can’t create an Html5Track without a src parameter\');\\n    }\\n\\n    track.el = document.createElement(\'audio\');\\n    track.el.volume = track.options.volume;\\n    track.el.muted = track.options.muted;\\n    track.el.loop = track.options.loop;\\n    track.el.autoplay = track.options.autoplay;\\n    track.el.src = track.options.src;\\n    var eventNames = [\'loadstart\', \'loadedmetadata\', \'canplay\', \'canplaythrough\', \'play\', \'pause\', \'ended\', \'timeupdate\', \'seeking\', \'seeked\', \'error\'];\\n    eventNames.forEach(function (eventName) {\\n      track.el.addEventListener(eventName, _get(_getPrototypeOf(Html5Track.prototype), \\"trigger\\", _assertThisInitialized(_this)).bind(track, eventName, false));\\n    });\\n    return _this;\\n  } // ********************************************************\\n\\n\\n  _createClass(Html5Track, [{\\n    key: \\"play\\",\\n    value: function play() {\\n      var track = this;\\n      track.el.play();\\n      return track;\\n    }\\n  }, {\\n    key: \\"pause\\",\\n    value: function pause() {\\n      var track = this;\\n      track.el.pause();\\n      return track;\\n    }\\n  }, {\\n    key: \\"stop\\",\\n    value: function stop() {\\n      var track = this;\\n      track.el.pause();\\n      track.el.currentTime = 0;\\n      return track;\\n    }\\n  }, {\\n    key: \\"currentTime\\",\\n    value: function currentTime(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === \'number\') {\\n        track.el.currentTime = setTo;\\n        return track;\\n      } else {\\n        return track.el.currentTime;\\n      }\\n    }\\n  }, {\\n    key: \\"duration\\",\\n    value: function duration() {\\n      var track = this;\\n      return track.el.duration;\\n    }\\n  }, {\\n    key: \\"formattedTime\\",\\n    value: function formattedTime(includeDuration) {\\n      var track = this;\\n      var t = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].timeFormat(track.currentTime());\\n      var d = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].timeFormat(track.duration());\\n\\n      if (includeDuration) {\\n        return \\"\\".concat(t, \\"/\\").concat(d);\\n      } else {\\n        return t;\\n      }\\n    }\\n  }, {\\n    key: \\"volume\\",\\n    value: function volume(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === \'number\') {\\n        track.el.volume = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].normalize(setTo);\\n        return track;\\n      } else {\\n        return track.el.volume;\\n      }\\n    }\\n  }, {\\n    key: \\"tweenVolume\\",\\n    value: function tweenVolume(setTo, duration) {\\n      var track = this; // replace existing volume tween\\n\\n      if (track.volumeTween) {\\n        window.cancelAnimationFrame(track.volumeTween);\\n      }\\n\\n      return new Promise(function (resolve, reject) {\\n        var fps = 60; // requestAnimationFrame\\n\\n        var durationInFrames = Math.round(duration * fps);\\n        var frameCount = Math.round(duration * fps);\\n        var startVolume = track.volume();\\n        var endVolume = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].normalize(setTo);\\n        tick();\\n\\n        function tick() {\\n          if (frameCount <= 0) {\\n            track.volume(endVolume);\\n            resolve(track);\\n          } else {\\n            track.volumeTween = window.requestAnimationFrame(tick);\\n          }\\n\\n          frameCount -= 1;\\n          var progress = 1 - frameCount / durationInFrames;\\n          var v = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].lerp(startVolume, endVolume, progress);\\n          track.volume(v);\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\"muted\\",\\n    value: function muted(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === \'boolean\') {\\n        track.el.muted = setTo;\\n      }\\n\\n      return track.el.muted;\\n    }\\n  }, {\\n    key: \\"paused\\",\\n    value: function paused() {\\n      var track = this;\\n      return track.el.paused;\\n    }\\n  }, {\\n    key: \\"destroy\\",\\n    value: function destroy() {\\n      var track = this;\\n      track.pause();\\n    }\\n  }]);\\n\\n  return Html5Track;\\n}(_BaseTrack__WEBPACK_IMPORTED_MODULE_0__[\\"default\\"]);\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./src/modules/Html5Track.js\\n");\n        /***/\n      },\n\n      /***/\n      "./src/modules/Mixer.js":\n      /*!******************************!*\\\n        !*** ./src/modules/Mixer.js ***!\n        \\******************************/\n\n      /*! exports provided: default */\n\n      /***/\n      function srcModulesMixerJs(module, __webpack_exports__, __webpack_require__) {\n        "use strict";\n\n        eval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\"default\\", function() { return Mixer; });\\n/* harmony import */ var _trackTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trackTypes */ \\"./src/modules/trackTypes.js\\");\\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \\"./src/modules/utils.js\\");\\nfunction _typeof(obj) { if (typeof Symbol === \\"function\\" && typeof Symbol.iterator === \\"symbol\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\"function\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\"symbol\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/*\\n\\n  Audio Mixer\\n\\n*/\\n\\n\\n\\nvar Mixer =\\n/*#__PURE__*/\\nfunction () {\\n  function Mixer() {\\n    _classCallCheck(this, Mixer);\\n\\n    var mix = this;\\n    mix.allTracks = []; // tracks as numbered array\\n\\n    mix.lookup = {}; // tracks as lookup table: mix.lookup[\'trackname\']\\n\\n    mix.currentVolume = 1;\\n    /*\\n       create a web audio context:\\n      FF, Chrome, Edge unprefixed\\n      Safari prefixed\\n     */\\n\\n    if (window.AudioContext || window.webkitAudioContext) {\\n      mix.context = typeof window.AudioContext === \'function\' ? new window.AudioContext() : new window.webkitAudioContext();\\n    }\\n  }\\n  /*\\n     Create a new track, or return an existing track\\n   */\\n\\n\\n  _createClass(Mixer, [{\\n    key: \\"track\\",\\n    value: function track(id, params) {\\n      var mix = this;\\n\\n      if (!id) {\\n        throw new Error(\'Can’t create a track without a name\');\\n      } // track already exists, return it\\n\\n\\n      if (mix.lookup[id]) {\\n        return mix.lookup[id];\\n      } else if (params) {\\n        // if params are passed, create a track\\n        var defaults = {\\n          id: id,\\n          timeline: [],\\n          mix: mix,\\n          context: mix.context,\\n          type: _trackTypes__WEBPACK_IMPORTED_MODULE_0__[\\"default\\"].Html5Track // default to standard track type\\n\\n        };\\n        var options = Object.assign(defaults, params); // should be able to pass track type as string\\n\\n        if (typeof options.type === \'string\' && _trackTypes__WEBPACK_IMPORTED_MODULE_0__[\\"default\\"][options.type]) {\\n          options.type = _trackTypes__WEBPACK_IMPORTED_MODULE_0__[\\"default\\"][options.type];\\n        }\\n\\n        var track = new options.type(options);\\n        mix.allTracks.push(track);\\n        mix.lookup[id] = track;\\n        return track;\\n      } else {\\n        // this track doesn\'t exist, no params received\\n        return false;\\n      }\\n    }\\n  }, {\\n    key: \\"tracks\\",\\n    value: function tracks() {\\n      var mix = this;\\n      return mix.allTracks;\\n    }\\n    /*\\n       Remove an existing track. Can receive an ID or a track object.\\n     */\\n\\n  }, {\\n    key: \\"remove\\",\\n    value: function remove(input) {\\n      var mix = this;\\n      /*\\n         input can be either a string or a track object, but the track object needs to have an id property\\n       */\\n\\n      var trackId;\\n\\n      if (typeof input === \'string\') {\\n        trackId = input;\\n      } else if (_typeof(input) === \'object\' && input.id) {\\n        trackId = input.id;\\n      }\\n\\n      var track = mix.lookup[trackId];\\n\\n      for (var i = mix.allTracks.length - 1; i >= 0; i--) {\\n        if (mix.allTracks[i] === track) {\\n          mix.allTracks.splice(i, 1);\\n        }\\n      }\\n\\n      if (track.destroy) {\\n        track.destroy();\\n      }\\n\\n      track = null;\\n      delete mix.lookup[trackId];\\n    }\\n    /*\\n       Set the master volume for the entire audio mixer.\\n     */\\n\\n  }, {\\n    key: \\"volume\\",\\n    value: function volume(setTo) {\\n      var mix = this;\\n\\n      if (typeof setTo === \'number\') {\\n        mix.currentVolume = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].normalize(setTo);\\n        /*\\n           tracks multiply their volume by the mix’s volume, so whenever we change the master volume we need to call track.volume() once to get the intended result\\n         */\\n\\n        mix.allTracks.forEach(function (track) {\\n          return track.volume ? track.volume(track.volume()) : \'\';\\n        });\\n      }\\n\\n      return mix.currentVolume;\\n    }\\n  }]);\\n\\n  return Mixer;\\n}();\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvbW9kdWxlcy9NaXhlci5qcz9jYWVhIl0sIm5hbWVzIjpbIk1peGVyIiwibWl4IiwiYWxsVHJhY2tzIiwibG9va3VwIiwiY3VycmVudFZvbHVtZSIsIndpbmRvdyIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsImNvbnRleHQiLCJpZCIsInBhcmFtcyIsIkVycm9yIiwiZGVmYXVsdHMiLCJ0aW1lbGluZSIsInR5cGUiLCJ0cmFja1R5cGVzIiwiSHRtbDVUcmFjayIsIm9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJ0cmFjayIsInB1c2giLCJpbnB1dCIsInRyYWNrSWQiLCJpIiwibGVuZ3RoIiwic3BsaWNlIiwiZGVzdHJveSIsInNldFRvIiwidXRpbHMiLCJub3JtYWxpemUiLCJmb3JFYWNoIiwidm9sdW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7QUFNQTtBQUNBOztJQUVxQkEsSzs7O0FBQ25CLG1CQUFjO0FBQUE7O0FBQ1osUUFBSUMsR0FBRyxHQUFHLElBQVY7QUFFQUEsT0FBRyxDQUFDQyxTQUFKLEdBQW9CLEVBQXBCLENBSFksQ0FHVzs7QUFDdkJELE9BQUcsQ0FBQ0UsTUFBSixHQUFvQixFQUFwQixDQUpZLENBSVc7O0FBQ3ZCRixPQUFHLENBQUNHLGFBQUosR0FBb0IsQ0FBcEI7QUFFQTs7Ozs7O0FBUUEsUUFBSUMsTUFBTSxDQUFDQyxZQUFQLElBQXVCRCxNQUFNLENBQUNFLGtCQUFsQyxFQUFzRDtBQUNwRE4sU0FBRyxDQUFDTyxPQUFKLEdBQWMsT0FBT0gsTUFBTSxDQUFDQyxZQUFkLEtBQStCLFVBQS9CLEdBQ0ksSUFBSUQsTUFBTSxDQUFDQyxZQUFYLEVBREosR0FFSSxJQUFJRCxNQUFNLENBQUNFLGtCQUFYLEVBRmxCO0FBR0Q7QUFDRjtBQUVEOzs7Ozs7OzBCQU1NRSxFLEVBQUlDLE0sRUFBUTtBQUNoQixVQUFJVCxHQUFHLEdBQUcsSUFBVjs7QUFFQSxVQUFJLENBQUNRLEVBQUwsRUFBUztBQUNQLGNBQU0sSUFBSUUsS0FBSixDQUFVLHFDQUFWLENBQU47QUFDRCxPQUxlLENBT2hCOzs7QUFDQSxVQUFJVixHQUFHLENBQUNFLE1BQUosQ0FBV00sRUFBWCxDQUFKLEVBQW9CO0FBQUUsZUFBT1IsR0FBRyxDQUFDRSxNQUFKLENBQVdNLEVBQVgsQ0FBUDtBQUF1QixPQUE3QyxNQUNLLElBQUlDLE1BQUosRUFBWTtBQUVmO0FBQ0EsWUFBSUUsUUFBUSxHQUFHO0FBQ2JILFlBQUUsRUFBUUEsRUFERztBQUViSSxrQkFBUSxFQUFFLEVBRkc7QUFHYlosYUFBRyxFQUFPQSxHQUhHO0FBSWJPLGlCQUFPLEVBQUdQLEdBQUcsQ0FBQ08sT0FKRDtBQUtiTSxjQUFJLEVBQU1DLG1EQUFVLENBQUNDLFVBTFIsQ0FLbUI7O0FBTG5CLFNBQWY7QUFPQSxZQUFJQyxPQUFPLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjUCxRQUFkLEVBQXdCRixNQUF4QixDQUFkLENBVmUsQ0FZZjs7QUFDQSxZQUFJLE9BQU9PLE9BQU8sQ0FBQ0gsSUFBZixLQUF3QixRQUF4QixJQUFvQ0MsbURBQVUsQ0FBQ0UsT0FBTyxDQUFDSCxJQUFULENBQWxELEVBQWtFO0FBQ2hFRyxpQkFBTyxDQUFDSCxJQUFSLEdBQWVDLG1EQUFVLENBQUNFLE9BQU8sQ0FBQ0gsSUFBVCxDQUF6QjtBQUNEOztBQUVELFlBQUlNLEtBQUssR0FBRyxJQUFJSCxPQUFPLENBQUNILElBQVosQ0FBaUJHLE9BQWpCLENBQVo7QUFDQWhCLFdBQUcsQ0FBQ0MsU0FBSixDQUFjbUIsSUFBZCxDQUFtQkQsS0FBbkI7QUFDQW5CLFdBQUcsQ0FBQ0UsTUFBSixDQUFXTSxFQUFYLElBQWlCVyxLQUFqQjtBQUNBLGVBQU9BLEtBQVA7QUFFRCxPQXRCSSxNQXNCRTtBQUNMO0FBQ0EsZUFBTyxLQUFQO0FBQ0Q7QUFDRjs7OzZCQUVRO0FBQ1AsVUFBSW5CLEdBQUcsR0FBRyxJQUFWO0FBQ0EsYUFBT0EsR0FBRyxDQUFDQyxTQUFYO0FBQ0Q7QUFFRDs7Ozs7OzJCQUtPb0IsSyxFQUFPO0FBQ1osVUFBSXJCLEdBQUcsR0FBRyxJQUFWO0FBRUE7Ozs7QUFNQSxVQUFJc0IsT0FBSjs7QUFDQSxVQUFJLE9BQU9ELEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0JDLGVBQU8sR0FBR0QsS0FBVjtBQUNELE9BRkQsTUFFTyxJQUFJLFFBQU9BLEtBQVAsTUFBaUIsUUFBakIsSUFBNkJBLEtBQUssQ0FBQ2IsRUFBdkMsRUFBMkM7QUFDaERjLGVBQU8sR0FBR0QsS0FBSyxDQUFDYixFQUFoQjtBQUNEOztBQUVELFVBQUlXLEtBQUssR0FBR25CLEdBQUcsQ0FBQ0UsTUFBSixDQUFXb0IsT0FBWCxDQUFaOztBQUVBLFdBQUssSUFBSUMsQ0FBQyxHQUFHdkIsR0FBRyxDQUFDQyxTQUFKLENBQWN1QixNQUFkLEdBQXVCLENBQXBDLEVBQXVDRCxDQUFDLElBQUksQ0FBNUMsRUFBK0NBLENBQUMsRUFBaEQsRUFBb0Q7QUFDbEQsWUFBSXZCLEdBQUcsQ0FBQ0MsU0FBSixDQUFjc0IsQ0FBZCxNQUFxQkosS0FBekIsRUFBZ0M7QUFBRW5CLGFBQUcsQ0FBQ0MsU0FBSixDQUFjd0IsTUFBZCxDQUFxQkYsQ0FBckIsRUFBd0IsQ0FBeEI7QUFBNEI7QUFDL0Q7O0FBRUQsVUFBSUosS0FBSyxDQUFDTyxPQUFWLEVBQW1CO0FBQUVQLGFBQUssQ0FBQ08sT0FBTjtBQUFpQjs7QUFDdENQLFdBQUssR0FBRyxJQUFSO0FBQ0EsYUFBT25CLEdBQUcsQ0FBQ0UsTUFBSixDQUFXb0IsT0FBWCxDQUFQO0FBQ0Q7QUFFRDs7Ozs7OzJCQUtPSyxLLEVBQU87QUFDWixVQUFJM0IsR0FBRyxHQUFHLElBQVY7O0FBRUEsVUFBSSxPQUFPMkIsS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUM3QjNCLFdBQUcsQ0FBQ0csYUFBSixHQUFvQnlCLDhDQUFLLENBQUNDLFNBQU4sQ0FBZ0JGLEtBQWhCLENBQXBCO0FBRUE7Ozs7QUFNQTNCLFdBQUcsQ0FBQ0MsU0FBSixDQUFjNkIsT0FBZCxDQUFzQixVQUFBWCxLQUFLO0FBQUEsaUJBQUlBLEtBQUssQ0FBQ1ksTUFBTixHQUFlWixLQUFLLENBQUNZLE1BQU4sQ0FBYVosS0FBSyxDQUFDWSxNQUFOLEVBQWIsQ0FBZixHQUE4QyxFQUFsRDtBQUFBLFNBQTNCO0FBQ0Q7O0FBQ0QsYUFBTy9CLEdBQUcsQ0FBQ0csYUFBWDtBQUNEIiwiZmlsZSI6Ii4vc3JjL21vZHVsZXMvTWl4ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXG4gIEF1ZGlvIE1peGVyXG5cbiovXG5cbmltcG9ydCB0cmFja1R5cGVzIGZyb20gJy4vdHJhY2tUeXBlcydcbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNaXhlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGxldCBtaXggPSB0aGlzXG5cbiAgICBtaXguYWxsVHJhY2tzICAgICA9IFtdIC8vIHRyYWNrcyBhcyBudW1iZXJlZCBhcnJheVxuICAgIG1peC5sb29rdXAgICAgICAgID0ge30gLy8gdHJhY2tzIGFzIGxvb2t1cCB0YWJsZTogbWl4Lmxvb2t1cFsndHJhY2tuYW1lJ11cbiAgICBtaXguY3VycmVudFZvbHVtZSA9IDFcblxuICAgIC8qXG5cbiAgICAgIGNyZWF0ZSBhIHdlYiBhdWRpbyBjb250ZXh0OlxuICAgICAgRkYsIENocm9tZSwgRWRnZSB1bnByZWZpeGVkXG4gICAgICBTYWZhcmkgcHJlZml4ZWRcblxuICAgICovXG5cbiAgICBpZiAod2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0KSB7XG4gICAgICBtaXguY29udGV4dCA9IHR5cGVvZiB3aW5kb3cuQXVkaW9Db250ZXh0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgICAgPyBuZXcgd2luZG93LkF1ZGlvQ29udGV4dCgpXG4gICAgICAgICAgICAgICAgICAgICAgOiBuZXcgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCgpXG4gICAgfVxuICB9XG5cbiAgLypcblxuICAgIENyZWF0ZSBhIG5ldyB0cmFjaywgb3IgcmV0dXJuIGFuIGV4aXN0aW5nIHRyYWNrXG5cbiAgKi9cblxuICB0cmFjayhpZCwgcGFyYW1zKSB7XG4gICAgbGV0IG1peCA9IHRoaXNcblxuICAgIGlmICghaWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fu4oCZdCBjcmVhdGUgYSB0cmFjayB3aXRob3V0IGEgbmFtZScpXG4gICAgfVxuXG4gICAgLy8gdHJhY2sgYWxyZWFkeSBleGlzdHMsIHJldHVybiBpdFxuICAgIGlmIChtaXgubG9va3VwW2lkXSkgeyByZXR1cm4gbWl4Lmxvb2t1cFtpZF0gfVxuICAgIGVsc2UgaWYgKHBhcmFtcykge1xuXG4gICAgICAvLyBpZiBwYXJhbXMgYXJlIHBhc3NlZCwgY3JlYXRlIGEgdHJhY2tcbiAgICAgIGxldCBkZWZhdWx0cyA9IHtcbiAgICAgICAgaWQ6ICAgICAgIGlkLFxuICAgICAgICB0aW1lbGluZTogW10sXG4gICAgICAgIG1peDogICAgICBtaXgsXG4gICAgICAgIGNvbnRleHQ6ICBtaXguY29udGV4dCxcbiAgICAgICAgdHlwZTogICAgIHRyYWNrVHlwZXMuSHRtbDVUcmFjayAvLyBkZWZhdWx0IHRvIHN0YW5kYXJkIHRyYWNrIHR5cGVcbiAgICAgIH1cbiAgICAgIGxldCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0cywgcGFyYW1zKVxuXG4gICAgICAvLyBzaG91bGQgYmUgYWJsZSB0byBwYXNzIHRyYWNrIHR5cGUgYXMgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMudHlwZSA9PT0gJ3N0cmluZycgJiYgdHJhY2tUeXBlc1tvcHRpb25zLnR5cGVdKSB7XG4gICAgICAgIG9wdGlvbnMudHlwZSA9IHRyYWNrVHlwZXNbb3B0aW9ucy50eXBlXVxuICAgICAgfVxuXG4gICAgICBsZXQgdHJhY2sgPSBuZXcgb3B0aW9ucy50eXBlKG9wdGlvbnMpXG4gICAgICBtaXguYWxsVHJhY2tzLnB1c2godHJhY2spXG4gICAgICBtaXgubG9va3VwW2lkXSA9IHRyYWNrXG4gICAgICByZXR1cm4gdHJhY2tcblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0aGlzIHRyYWNrIGRvZXNuJ3QgZXhpc3QsIG5vIHBhcmFtcyByZWNlaXZlZFxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgdHJhY2tzKCkge1xuICAgIGxldCBtaXggPSB0aGlzXG4gICAgcmV0dXJuIG1peC5hbGxUcmFja3NcbiAgfVxuXG4gIC8qXG5cbiAgICBSZW1vdmUgYW4gZXhpc3RpbmcgdHJhY2suIENhbiByZWNlaXZlIGFuIElEIG9yIGEgdHJhY2sgb2JqZWN0LlxuXG4gICovXG4gIHJlbW92ZShpbnB1dCkge1xuICAgIGxldCBtaXggPSB0aGlzXG5cbiAgICAvKlxuXG4gICAgICBpbnB1dCBjYW4gYmUgZWl0aGVyIGEgc3RyaW5nIG9yIGEgdHJhY2sgb2JqZWN0LCBidXQgdGhlIHRyYWNrIG9iamVjdCBuZWVkcyB0byBoYXZlIGFuIGlkIHByb3BlcnR5XG5cbiAgICAqL1xuXG4gICAgbGV0IHRyYWNrSWRcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgdHJhY2tJZCA9IGlucHV0XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIGlucHV0LmlkKSB7XG4gICAgICB0cmFja0lkID0gaW5wdXQuaWRcbiAgICB9XG5cbiAgICBsZXQgdHJhY2sgPSBtaXgubG9va3VwW3RyYWNrSWRdXG5cbiAgICBmb3IgKGxldCBpID0gbWl4LmFsbFRyYWNrcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgaWYgKG1peC5hbGxUcmFja3NbaV0gPT09IHRyYWNrKSB7IG1peC5hbGxUcmFja3Muc3BsaWNlKGksIDEpIH1cbiAgICB9XG5cbiAgICBpZiAodHJhY2suZGVzdHJveSkgeyB0cmFjay5kZXN0cm95KCkgfVxuICAgIHRyYWNrID0gbnVsbFxuICAgIGRlbGV0ZSBtaXgubG9va3VwW3RyYWNrSWRdXG4gIH1cblxuICAvKlxuXG4gICAgU2V0IHRoZSBtYXN0ZXIgdm9sdW1lIGZvciB0aGUgZW50aXJlIGF1ZGlvIG1peGVyLlxuXG4gICovXG4gIHZvbHVtZShzZXRUbykge1xuICAgIGxldCBtaXggPSB0aGlzXG5cbiAgICBpZiAodHlwZW9mIHNldFRvID09PSAnbnVtYmVyJykge1xuICAgICAgbWl4LmN1cnJlbnRWb2x1bWUgPSB1dGlscy5ub3JtYWxpemUoc2V0VG8pXG5cbiAgICAgIC8qXG5cbiAgICAgICAgdHJhY2tzIG11bHRpcGx5IHRoZWlyIHZvbHVtZSBieSB0aGUgbWl44oCZcyB2b2x1bWUsIHNvIHdoZW5ldmVyIHdlIGNoYW5nZSB0aGUgbWFzdGVyIHZvbHVtZSB3ZSBuZWVkIHRvIGNhbGwgdHJhY2sudm9sdW1lKCkgb25jZSB0byBnZXQgdGhlIGludGVuZGVkIHJlc3VsdFxuXG4gICAgICAqL1xuXG4gICAgICBtaXguYWxsVHJhY2tzLmZvckVhY2godHJhY2sgPT4gdHJhY2sudm9sdW1lID8gdHJhY2sudm9sdW1lKHRyYWNrLnZvbHVtZSgpKSA6ICcnIClcbiAgICB9XG4gICAgcmV0dXJuIG1peC5jdXJyZW50Vm9sdW1lXG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/modules/Mixer.js\\n");\n        /***/\n      },\n\n      /***/\n      "./src/modules/StreamSourceTrack.js":\n      /*!******************************************!*\\\n        !*** ./src/modules/StreamSourceTrack.js ***!\n        \\******************************************/\n\n      /*! exports provided: default */\n\n      /***/\n      function srcModulesStreamSourceTrackJs(module, __webpack_exports__, __webpack_require__) {\n        "use strict";\n\n        eval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\"default\\", function() { return StreamSourceTrack; });\\n/* harmony import */ var _WebAudioTrack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./WebAudioTrack */ \\"./src/modules/WebAudioTrack.js\\");\\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \\"./src/modules/utils.js\\");\\nfunction _typeof(obj) { if (typeof Symbol === \\"function\\" && typeof Symbol.iterator === \\"symbol\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\"function\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\"symbol\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\"object\\" || typeof call === \\"function\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\"this hasn\'t been initialised - super() hasn\'t been called\\"); } return self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\"function\\" && superClass !== null) { throw new TypeError(\\"Super expression must either be null or a function\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n/*\\n\\n  Web Audio API: Stream Source track\\n\\n*/\\n\\n\\n\\nvar StreamSourceTrack =\\n/*#__PURE__*/\\nfunction (_WebAudioTrack) {\\n  _inherits(StreamSourceTrack, _WebAudioTrack);\\n\\n  function StreamSourceTrack(params) {\\n    var _this;\\n\\n    _classCallCheck(this, StreamSourceTrack);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StreamSourceTrack).call(this, params));\\n\\n    var track = _assertThisInitialized(_this);\\n\\n    var defaults = {\\n      id: \'\',\\n      src: \'\',\\n      volume: 1,\\n      start: 0,\\n      loop: false,\\n      autoplay: false,\\n      context: false,\\n      mix: false,\\n      nodes: []\\n    };\\n    track.options = Object.assign(defaults, params);\\n    track.ctx = track.options.context;\\n    track.status = {// ready:            false,\\n      // shouldPlayOnLoad: false,\\n      // playing:          false,\\n      // muted:            track.options.muted || false\\n    };\\n\\n    if (!track.ctx) {\\n      throw new Error(\'Can’t create a WebAudioTrack without Web Audio API support\');\\n    }\\n\\n    if (!navigator.mediaDevices) {\\n      throw new Error(\'getUserMedia is not supported.\');\\n    }\\n\\n    navigator.mediaDevices.getUserMedia({\\n      audio: true\\n    });\\n\\n    if (track.options.autoload || track.options.autoplay) {\\n      loadMediaStream();\\n    }\\n\\n    return _this;\\n  }\\n\\n  _createClass(StreamSourceTrack, [{\\n    key: \\"loadMediaStream\\",\\n    value: function loadMediaStream() {\\n      var track = this;\\n      track.source = track.ctx.createMediaStreamSource(track.options.src);\\n      track.status.loaded = true;\\n\\n      if (track.options.autoplay || track.status.shouldPlay) {\\n        play();\\n      }\\n    }\\n  }, {\\n    key: \\"play\\",\\n    value: function play() {\\n      var track = this; // track.status.ready = true\\n      // super.trigger(\'ready\', track)\\n      // const biquadFilter = track.ctx.createBiquadFilter()\\n      // biquadFilter.type = \'lowshelf\'\\n      // biquadFilter.frequency.value = 1000\\n      // biquadFilter.gain.value = track.input.value\\n      // const gainNode = { type: \'GainNode\', options: { gain: track.data.gain } }\\n      // super.createNodes([gainNode, ...track.options.nodes], track.data.source)\\n      // // track.data.startTime = track.data.source.context.currentTime - track.data.cachedTime\\n      // track.status.playing = true\\n      // super.trigger(\'play\', track)\\n      // return track\\n    }\\n  }, {\\n    key: \\"pause\\",\\n    value: function pause(pauseAtTime) {\\n      var track = this; // // disable autoplay, if we\'ve paused the track before it\'s had a chance to load\\n      // if (!track.status.playing && track.status.shouldPlayOnLoad) {\\n      //   track.status.shouldPlayOnLoad = false\\n      //   track.options.autoplay = false\\n      //   return track\\n      // }\\n      // track.data.cachedTime = typeof pauseAtTime === \'number\' ? pauseAtTime : track.currentTime()\\n      // track.status.playing = false\\n      // if (track.data.onendtimer) { window.clearTimeout(track.data.onendtimer) }\\n      // // prefer stop(), fallback to deprecated noteOff()\\n      // if (typeof track.data.source.stop === \'function\') {\\n      //   track.data.source.stop(0)\\n      // } else if (typeof track.data.source.noteOff === \'function\') {\\n      //   track.data.source.noteOff(0)\\n      // }\\n      // super.trigger(\'pause\', track)\\n      // return track\\n    }\\n  }, {\\n    key: \\"currentTime\\",\\n    value: function currentTime(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === \'number\') {\\n        if (track.status.playing) {\\n          // to seek a buffer track, we need to pause and play\\n          track.pause(setTo).play();\\n        } else {\\n          // if we\'re paused or not loaded yet, cache the time\\n          track.data.cachedTime = setTo;\\n        }\\n\\n        return track;\\n      }\\n\\n      if (!track.status.ready || !track.status.playing) {\\n        return track.data.cachedTime || 0;\\n      }\\n\\n      return track.data.source.context.currentTime - track.data.startTime || 0;\\n    }\\n  }, {\\n    key: \\"formattedTime\\",\\n    value: function formattedTime(includeDuration) {\\n      var track = this;\\n      var t = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].timeFormat(track.currentTime());\\n      var d = _utils__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"].timeFormat(track.duration());\\n\\n      if (includeDuration) {\\n        return \\"\\".concat(t, \\"/\\").concat(d);\\n      } else {\\n        return t;\\n      }\\n    }\\n  }, {\\n    key: \\"duration\\",\\n    value: function duration() {\\n      var track = this; // if (!track.status.ready || !track.data.source) { return 0 }\\n      // return track.data.source.buffer.duration || 0\\n    }\\n  }, {\\n    key: \\"volume\\",\\n    value: function volume(setTo) {\\n      var track = this; // const gainNode = track.node(\'GainNode\')\\n      // if (typeof setTo === \'number\') {\\n      //   setTo = utils.normalize(setTo)\\n      //   if (track.status.muted) {\\n      //     track.data.gainCache = setTo // cache the value for when we unmute\\n      //     track.data.gain = 0\\n      //   } else {\\n      //     track.data.gain = setTo\\n      //   }\\n      //   if (track.status.playing && gainNode) {\\n      //     gainNode.gain(track.options.mix ? track.data.gain * track.options.mix.volume() : track.data.gain)\\n      //   }\\n      //   return track\\n      // } else {\\n      //   // accurately report gain while we’re tweening it\\n      //   if (track.status.playing && gainNode) {\\n      //     track.data.gain = gainNode.gain()\\n      //   }\\n      //   return track.data.gain\\n      // }\\n    }\\n  }, {\\n    key: \\"tweenVolume\\",\\n    value: function tweenVolume(setTo, duration) {\\n      var track = this; // // remove existing volume tween\\n      // if (track.volumeTween) {\\n      //   window.cancelAnimationFrame(track.volumeTween)\\n      // }\\n      // // if we\'re playing, we can use the gain node\'s native value ramp method\\n      // if (track.gainNode) {\\n      //   track.gainNode.tweenGain(setTo, duration)\\n      //   return utils.timeoutPromise(duration * 1000)\\n      // }\\n      // // if we\'re not playing or haven\'t loaded yet,\\n      // // fall back to requestAnimationFrame\\n      // return new Promise(function(resolve, reject) {\\n      //   let fps = 60 // requestAnimationFrame\\n      //   let durationInFrames = Math.round(duration * fps)\\n      //   let frameCount       = Math.round(duration * fps)\\n      //   let startVolume      = track.volume()\\n      //   let endVolume        = utils.normalize(setTo)\\n      //   tick()\\n      //   function tick() {\\n      //     if (frameCount <= 0) {\\n      //       track.volume(endVolume)\\n      //       resolve(track)\\n      //     } else {\\n      //       track.volumeTween = window.requestAnimationFrame(tick)\\n      //     }\\n      //     frameCount -= 1\\n      //     const progress = 1 - (frameCount / durationInFrames)\\n      //     const v = utils.lerp(startVolume, endVolume, progress)\\n      //     track.volume( v )\\n      //   }\\n      // })\\n    }\\n  }, {\\n    key: \\"muted\\",\\n    value: function muted(setTo) {\\n      var track = this; // if (typeof setTo === \'boolean\') {\\n      //   if (setTo === true) {\\n      //     // mute: cache current gain, then set to 0\\n      //     track.data.gainCache = track.data.gain\\n      //     track.volume(0)\\n      //     track.status.muted = true\\n      //   } else {\\n      //     // unmute\\n      //     track.status.muted = false\\n      //     track.volume(track.data.gainCache)\\n      //   }\\n      //   return track\\n      // }\\n      // return track.status.muted\\n    }\\n  }, {\\n    key: \\"paused\\",\\n    value: function paused() {\\n      var track = this; // return !track.status.playing\\n    }\\n  }, {\\n    key: \\"destroy\\",\\n    value: function destroy() {\\n      var track = this; // track.pause()\\n    }\\n  }]);\\n\\n  return StreamSourceTrack;\\n}(_WebAudioTrack__WEBPACK_IMPORTED_MODULE_0__[\\"default\\"]);\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./src/modules/StreamSourceTrack.js\\n");\n        /***/\n      },\n\n      /***/\n      "./src/modules/WebAudioTrack.js":\n      /*!**************************************!*\\\n        !*** ./src/modules/WebAudioTrack.js ***!\n        \\**************************************/\n\n      /*! exports provided: default */\n\n      /***/\n      function srcModulesWebAudioTrackJs(module, __webpack_exports__, __webpack_require__) {\n        "use strict";\n\n        eval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\"default\\", function() { return WebAudioTrack; });\\n/* harmony import */ var _BaseTrack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseTrack */ \\"./src/modules/BaseTrack.js\\");\\n/* harmony import */ var _nodes_allNodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./nodes/allNodes */ \\"./src/modules/nodes/allNodes.js\\");\\nfunction _typeof(obj) { if (typeof Symbol === \\"function\\" && typeof Symbol.iterator === \\"symbol\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\"function\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\"symbol\\" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\"object\\" || typeof call === \\"function\\")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\"this hasn\'t been initialised - super() hasn\'t been called\\"); } return self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\"function\\" && superClass !== null) { throw new TypeError(\\"Super expression must either be null or a function\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\n/*\\n\\n  Web Audio API track - to be extended\\n\\n    adds node functionality to base track\\n\\n*/\\n\\n\\n\\nvar WebAudioTrack =\\n/*#__PURE__*/\\nfunction (_BaseTrack) {\\n  _inherits(WebAudioTrack, _BaseTrack);\\n\\n  function WebAudioTrack(params) {\\n    var _this;\\n\\n    _classCallCheck(this, WebAudioTrack);\\n\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebAudioTrack).call(this, params));\\n\\n    var track = _assertThisInitialized(_this);\\n\\n    var defaults = {\\n      src: \'\',\\n      context: false,\\n      nodes: []\\n    };\\n    track.options = Object.assign(defaults, params);\\n    track.data = {}; // reference nodes by ???\\n\\n    track.allNodes = [];\\n    track.nodeLookup = {};\\n    return _this;\\n  }\\n  /*\\n     input is an array\\n   */\\n\\n\\n  _createClass(WebAudioTrack, [{\\n    key: \\"createNodes\\",\\n    value: function createNodes(nodes, source) {\\n      var track = this;\\n\\n      if (!source) {\\n        throw new Error(\'Can’t create nodes without a valid source.\');\\n      } else if (!source.connect) {\\n        throw new Error(\'Can’t create nodes without a valid source.\');\\n      } // clear previous set of nodes (we recreate nodes every time we play)\\n\\n\\n      track.allNodes = [];\\n      var previousNode = source;\\n      nodes.forEach(function (n) {\\n        var baseParams = {\\n          context: track.options.context // determine node type by duck typing\\n\\n        };\\n\\n        if (typeof n === \'string\') {\\n          // predefined node with all defaults, no options\\n          if (_nodes_allNodes__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"][n]) {\\n            var newNode = new _nodes_allNodes__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"][n](baseParams);\\n            track.allNodes.push(newNode);\\n            track.nodeLookup[n] = newNode;\\n            previousNode.connect(newNode.node);\\n            previousNode = newNode.node;\\n          } else {\\n            throw new Error(\\"Node type \\".concat(n, \\" does not exist.\\"));\\n          }\\n        } else if (_typeof(n) === \'object\') {\\n          // create predefined node with options\\n          if (n.type) {\\n            var nodeType = _nodes_allNodes__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"][n.type];\\n\\n            if (nodeType) {\\n              var _newNode = new nodeType(Object.assign(baseParams, n.options));\\n\\n              track.allNodes.push(_newNode);\\n              track.nodeLookup[n.type] = _newNode;\\n              previousNode.connect(_newNode.node);\\n              previousNode = _newNode.node;\\n            } else {\\n              throw new Error(\\"Node type \\".concat(n.type, \\" does not exist.\\"));\\n            }\\n          } else if (n.node) {\\n            // create custom node, this is a raw node object\\n            track.allNodes.push(n);\\n            previousNode.connect(n.node);\\n            previousNode = n.node;\\n          }\\n        }\\n      });\\n      previousNode.connect(track.options.context.destination);\\n    }\\n  }, {\\n    key: \\"nodes\\",\\n    value: function nodes() {\\n      var track = this;\\n      return track.allNodes;\\n    }\\n  }, {\\n    key: \\"node\\",\\n    value: function node(id) {\\n      var track = this;\\n      return track.nodeLookup[id] || false;\\n    }\\n  }]);\\n\\n  return WebAudioTrack;\\n}(_BaseTrack__WEBPACK_IMPORTED_MODULE_0__[\\"default\\"]);\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvbW9kdWxlcy9XZWJBdWRpb1RyYWNrLmpzP2RhZDQiXSwibmFtZXMiOlsiV2ViQXVkaW9UcmFjayIsInBhcmFtcyIsInRyYWNrIiwiZGVmYXVsdHMiLCJzcmMiLCJjb250ZXh0Iiwibm9kZXMiLCJvcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwiZGF0YSIsImFsbE5vZGVzIiwibm9kZUxvb2t1cCIsInNvdXJjZSIsIkVycm9yIiwiY29ubmVjdCIsInByZXZpb3VzTm9kZSIsImZvckVhY2giLCJuIiwiYmFzZVBhcmFtcyIsIk5vZGVzIiwibmV3Tm9kZSIsInB1c2giLCJub2RlIiwidHlwZSIsIm5vZGVUeXBlIiwiZGVzdGluYXRpb24iLCJpZCIsIkJhc2VUcmFjayJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7O0FBT0E7QUFDQTs7SUFFcUJBLGE7Ozs7O0FBQ25CLHlCQUFZQyxNQUFaLEVBQW9CO0FBQUE7O0FBQUE7O0FBQ2xCLHVGQUFNQSxNQUFOOztBQUNBLFFBQUlDLEtBQUssZ0NBQVQ7O0FBRUEsUUFBSUMsUUFBUSxHQUFHO0FBQ2JDLFNBQUcsRUFBTyxFQURHO0FBRWJDLGFBQU8sRUFBRyxLQUZHO0FBR2JDLFdBQUssRUFBSztBQUhHLEtBQWY7QUFLQUosU0FBSyxDQUFDSyxPQUFOLEdBQWdCQyxNQUFNLENBQUNDLE1BQVAsQ0FBY04sUUFBZCxFQUF3QkYsTUFBeEIsQ0FBaEI7QUFFQUMsU0FBSyxDQUFDUSxJQUFOLEdBQW1CLEVBQW5CLENBWGtCLENBWWxCOztBQUNBUixTQUFLLENBQUNTLFFBQU4sR0FBbUIsRUFBbkI7QUFDQVQsU0FBSyxDQUFDVSxVQUFOLEdBQW1CLEVBQW5CO0FBZGtCO0FBZW5CO0FBRUQ7Ozs7Ozs7Z0NBTVlOLEssRUFBT08sTSxFQUFRO0FBQ3pCLFVBQUlYLEtBQUssR0FBRyxJQUFaOztBQUVBLFVBQUksQ0FBQ1csTUFBTCxFQUFhO0FBQ1gsY0FBTSxJQUFJQyxLQUFKLENBQVUsNENBQVYsQ0FBTjtBQUNELE9BRkQsTUFFTyxJQUFJLENBQUNELE1BQU0sQ0FBQ0UsT0FBWixFQUFxQjtBQUMxQixjQUFNLElBQUlELEtBQUosQ0FBVSw0Q0FBVixDQUFOO0FBQ0QsT0FQd0IsQ0FTekI7OztBQUNBWixXQUFLLENBQUNTLFFBQU4sR0FBaUIsRUFBakI7QUFFQSxVQUFJSyxZQUFZLEdBQUdILE1BQW5CO0FBQ0FQLFdBQUssQ0FBQ1csT0FBTixDQUFjLFVBQUFDLENBQUMsRUFBSTtBQUVqQixZQUFJQyxVQUFVLEdBQUc7QUFBRWQsaUJBQU8sRUFBRUgsS0FBSyxDQUFDSyxPQUFOLENBQWNGLE9BQXpCLENBRWpCOztBQUZpQixTQUFqQjs7QUFHQSxZQUFJLE9BQU9hLENBQVAsS0FBYSxRQUFqQixFQUEyQjtBQUN6QjtBQUNBLGNBQUlFLHVEQUFLLENBQUNGLENBQUQsQ0FBVCxFQUFjO0FBRVosZ0JBQUlHLE9BQU8sR0FBRyxJQUFJRCx1REFBSyxDQUFDRixDQUFELENBQVQsQ0FBYUMsVUFBYixDQUFkO0FBQ0FqQixpQkFBSyxDQUFDUyxRQUFOLENBQWVXLElBQWYsQ0FBb0JELE9BQXBCO0FBQ0FuQixpQkFBSyxDQUFDVSxVQUFOLENBQWlCTSxDQUFqQixJQUFzQkcsT0FBdEI7QUFFQUwsd0JBQVksQ0FBQ0QsT0FBYixDQUFxQk0sT0FBTyxDQUFDRSxJQUE3QjtBQUNBUCx3QkFBWSxHQUFHSyxPQUFPLENBQUNFLElBQXZCO0FBQ0QsV0FSRCxNQVFPO0FBQ0wsa0JBQU0sSUFBSVQsS0FBSixxQkFBdUJJLENBQXZCLHNCQUFOO0FBQ0Q7QUFDRixTQWJELE1BYU8sSUFBSSxRQUFPQSxDQUFQLE1BQWEsUUFBakIsRUFBMkI7QUFDaEM7QUFDQSxjQUFLQSxDQUFDLENBQUNNLElBQVAsRUFBYztBQUVaLGdCQUFJQyxRQUFRLEdBQUdMLHVEQUFLLENBQUNGLENBQUMsQ0FBQ00sSUFBSCxDQUFwQjs7QUFDQSxnQkFBSUMsUUFBSixFQUFjO0FBRVosa0JBQUlKLFFBQU8sR0FBRyxJQUFJSSxRQUFKLENBQWNqQixNQUFNLENBQUNDLE1BQVAsQ0FBY1UsVUFBZCxFQUEwQkQsQ0FBQyxDQUFDWCxPQUE1QixDQUFkLENBQWQ7O0FBRUFMLG1CQUFLLENBQUNTLFFBQU4sQ0FBZVcsSUFBZixDQUFvQkQsUUFBcEI7QUFDQW5CLG1CQUFLLENBQUNVLFVBQU4sQ0FBaUJNLENBQUMsQ0FBQ00sSUFBbkIsSUFBMkJILFFBQTNCO0FBRUFMLDBCQUFZLENBQUNELE9BQWIsQ0FBcUJNLFFBQU8sQ0FBQ0UsSUFBN0I7QUFDQVAsMEJBQVksR0FBR0ssUUFBTyxDQUFDRSxJQUF2QjtBQUNELGFBVEQsTUFTTztBQUNMLG9CQUFNLElBQUlULEtBQUoscUJBQXVCSSxDQUFDLENBQUNNLElBQXpCLHNCQUFOO0FBQ0Q7QUFDRixXQWZELE1BZU8sSUFBSU4sQ0FBQyxDQUFDSyxJQUFOLEVBQVk7QUFDakI7QUFFQXJCLGlCQUFLLENBQUNTLFFBQU4sQ0FBZVcsSUFBZixDQUFvQkosQ0FBcEI7QUFDQUYsd0JBQVksQ0FBQ0QsT0FBYixDQUFxQkcsQ0FBQyxDQUFDSyxJQUF2QjtBQUNBUCx3QkFBWSxHQUFHRSxDQUFDLENBQUNLLElBQWpCO0FBQ0Q7QUFDRjtBQUNGLE9BM0NEO0FBNENBUCxrQkFBWSxDQUFDRCxPQUFiLENBQXFCYixLQUFLLENBQUNLLE9BQU4sQ0FBY0YsT0FBZCxDQUFzQnFCLFdBQTNDO0FBQ0Q7Ozs0QkFFTztBQUNOLFVBQUl4QixLQUFLLEdBQUcsSUFBWjtBQUNBLGFBQU9BLEtBQUssQ0FBQ1MsUUFBYjtBQUNEOzs7eUJBRUlnQixFLEVBQUk7QUFDUCxVQUFJekIsS0FBSyxHQUFHLElBQVo7QUFDQSxhQUFPQSxLQUFLLENBQUNVLFVBQU4sQ0FBaUJlLEVBQWpCLEtBQXdCLEtBQS9CO0FBQ0Q7Ozs7RUE1RndDQyxrRCIsImZpbGUiOiIuL3NyYy9tb2R1bGVzL1dlYkF1ZGlvVHJhY2suanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXG4gIFdlYiBBdWRpbyBBUEkgdHJhY2sgLSB0byBiZSBleHRlbmRlZFxuXG4gICAgYWRkcyBub2RlIGZ1bmN0aW9uYWxpdHkgdG8gYmFzZSB0cmFja1xuXG4qL1xuaW1wb3J0IEJhc2VUcmFjayBmcm9tICcuL0Jhc2VUcmFjaydcbmltcG9ydCBOb2RlcyBmcm9tICcuL25vZGVzL2FsbE5vZGVzJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXZWJBdWRpb1RyYWNrIGV4dGVuZHMgQmFzZVRyYWNrIHtcbiAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgc3VwZXIocGFyYW1zKVxuICAgIGxldCB0cmFjayA9IHRoaXNcblxuICAgIGxldCBkZWZhdWx0cyA9IHtcbiAgICAgIHNyYzogICAgICAnJyxcbiAgICAgIGNvbnRleHQ6ICBmYWxzZSxcbiAgICAgIG5vZGVzOiAgICBbXVxuICAgIH1cbiAgICB0cmFjay5vcHRpb25zID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0cywgcGFyYW1zKVxuXG4gICAgdHJhY2suZGF0YSAgICAgICA9IHt9XG4gICAgLy8gcmVmZXJlbmNlIG5vZGVzIGJ5ID8/P1xuICAgIHRyYWNrLmFsbE5vZGVzICAgPSBbXVxuICAgIHRyYWNrLm5vZGVMb29rdXAgPSB7fVxuICB9XG5cbiAgLypcblxuICAgIGlucHV0IGlzIGFuIGFycmF5XG5cbiAgKi9cblxuICBjcmVhdGVOb2Rlcyhub2Rlcywgc291cmNlKSB7XG4gICAgbGV0IHRyYWNrID0gdGhpc1xuXG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fu4oCZdCBjcmVhdGUgbm9kZXMgd2l0aG91dCBhIHZhbGlkIHNvdXJjZS4nKVxuICAgIH0gZWxzZSBpZiAoIXNvdXJjZS5jb25uZWN0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbuKAmXQgY3JlYXRlIG5vZGVzIHdpdGhvdXQgYSB2YWxpZCBzb3VyY2UuJylcbiAgICB9XG5cbiAgICAvLyBjbGVhciBwcmV2aW91cyBzZXQgb2Ygbm9kZXMgKHdlIHJlY3JlYXRlIG5vZGVzIGV2ZXJ5IHRpbWUgd2UgcGxheSlcbiAgICB0cmFjay5hbGxOb2RlcyA9IFtdXG5cbiAgICBsZXQgcHJldmlvdXNOb2RlID0gc291cmNlXG4gICAgbm9kZXMuZm9yRWFjaChuID0+IHtcblxuICAgICAgbGV0IGJhc2VQYXJhbXMgPSB7IGNvbnRleHQ6IHRyYWNrLm9wdGlvbnMuY29udGV4dCB9XG5cbiAgICAgIC8vIGRldGVybWluZSBub2RlIHR5cGUgYnkgZHVjayB0eXBpbmdcbiAgICAgIGlmICh0eXBlb2YgbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gcHJlZGVmaW5lZCBub2RlIHdpdGggYWxsIGRlZmF1bHRzLCBubyBvcHRpb25zXG4gICAgICAgIGlmIChOb2Rlc1tuXSkge1xuXG4gICAgICAgICAgbGV0IG5ld05vZGUgPSBuZXcgTm9kZXNbbl0oYmFzZVBhcmFtcylcbiAgICAgICAgICB0cmFjay5hbGxOb2Rlcy5wdXNoKG5ld05vZGUpXG4gICAgICAgICAgdHJhY2subm9kZUxvb2t1cFtuXSA9IG5ld05vZGVcblxuICAgICAgICAgIHByZXZpb3VzTm9kZS5jb25uZWN0KG5ld05vZGUubm9kZSlcbiAgICAgICAgICBwcmV2aW91c05vZGUgPSBuZXdOb2RlLm5vZGVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vZGUgdHlwZSAke259IGRvZXMgbm90IGV4aXN0LmApXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG4gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIGNyZWF0ZSBwcmVkZWZpbmVkIG5vZGUgd2l0aCBvcHRpb25zXG4gICAgICAgIGlmICggbi50eXBlICkge1xuXG4gICAgICAgICAgbGV0IG5vZGVUeXBlID0gTm9kZXNbbi50eXBlXVxuICAgICAgICAgIGlmIChub2RlVHlwZSkge1xuXG4gICAgICAgICAgICBsZXQgbmV3Tm9kZSA9IG5ldyBub2RlVHlwZSggT2JqZWN0LmFzc2lnbihiYXNlUGFyYW1zLCBuLm9wdGlvbnMpIClcblxuICAgICAgICAgICAgdHJhY2suYWxsTm9kZXMucHVzaChuZXdOb2RlKVxuICAgICAgICAgICAgdHJhY2subm9kZUxvb2t1cFtuLnR5cGVdID0gbmV3Tm9kZVxuXG4gICAgICAgICAgICBwcmV2aW91c05vZGUuY29ubmVjdChuZXdOb2RlLm5vZGUpXG4gICAgICAgICAgICBwcmV2aW91c05vZGUgPSBuZXdOb2RlLm5vZGVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb2RlIHR5cGUgJHtuLnR5cGV9IGRvZXMgbm90IGV4aXN0LmApXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG4ubm9kZSkge1xuICAgICAgICAgIC8vIGNyZWF0ZSBjdXN0b20gbm9kZSwgdGhpcyBpcyBhIHJhdyBub2RlIG9iamVjdFxuXG4gICAgICAgICAgdHJhY2suYWxsTm9kZXMucHVzaChuKVxuICAgICAgICAgIHByZXZpb3VzTm9kZS5jb25uZWN0KG4ubm9kZSlcbiAgICAgICAgICBwcmV2aW91c05vZGUgPSBuLm5vZGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgcHJldmlvdXNOb2RlLmNvbm5lY3QodHJhY2sub3B0aW9ucy5jb250ZXh0LmRlc3RpbmF0aW9uKVxuICB9XG5cbiAgbm9kZXMoKSB7XG4gICAgbGV0IHRyYWNrID0gdGhpc1xuICAgIHJldHVybiB0cmFjay5hbGxOb2Rlc1xuICB9XG5cbiAgbm9kZShpZCkge1xuICAgIGxldCB0cmFjayA9IHRoaXNcbiAgICByZXR1cm4gdHJhY2subm9kZUxvb2t1cFtpZF0gfHwgZmFsc2VcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/modules/WebAudioTrack.js\\n");\n        /***/\n      },\n\n      /***/\n      "./src/modules/nodes/AnalyserNode.js":\n      /*!*******************************************!*\\\n        !*** ./src/modules/nodes/AnalyserNode.js ***!\n        \\*******************************************/\n\n      /*! exports provided: default */\n\n      /***/\n      function srcModulesNodesAnalyserNodeJs(module, __webpack_exports__, __webpack_require__) {\n        "use strict";\n\n        eval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\"default\\", function() { return AnalyserNode; });\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/*\\n\\n  Analyser Node (FFT)\\n\\n*/\\nvar AnalyserNode =\\n/*#__PURE__*/\\nfunction () {\\n  function AnalyserNode(params) {\\n    _classCallCheck(this, AnalyserNode);\\n\\n    var state = this;\\n    state.ctx = params.context;\\n    state.node = state.ctx.createAnalyser();\\n    state.node.smoothingTimeConstant = 0.2;\\n    state.node.fftSize = 2048; // create a script processor with bufferSize of 2048\\n\\n    state.processor = state.ctx.createScriptProcessor(2048, 1, 1);\\n    state.processor.connect(state.ctx.destination); // processor -> destination\\n\\n    state.node.connect(state.processor); // analyser  -> processor\\n\\n    state.bufferLength = state.node.frequencyBinCount;\\n    state.analysis = {\\n      raw: new Uint8Array(state.bufferLength),\\n      average: 0,\\n      low: 0,\\n      mid: 0,\\n      high: 0\\n    };\\n  }\\n\\n  _createClass(AnalyserNode, [{\\n    key: \\"connect\\",\\n    value: function connect(to) {\\n      var state = this;\\n      state.node.connect(to);\\n    }\\n  }, {\\n    key: \\"get\\",\\n    value: function get() {\\n      var state = this;\\n      var third = Math.round(state.bufferLength / 3);\\n      var scratch = 0;\\n      var i = 0;\\n      state.node.getByteFrequencyData(state.analysis.raw); // calculate average\\n\\n      scratch = 0;\\n\\n      for (i = 0; i < state.bufferLength; i++) {\\n        scratch += state.analysis.raw[i];\\n      }\\n\\n      state.analysis.average = scratch / state.bufferLength / 256; // lows\\n\\n      scratch = 0;\\n\\n      for (i = 0; i < third; i++) {\\n        scratch += state.analysis.raw[i];\\n      }\\n\\n      state.analysis.low = scratch / third / 256; // mids\\n\\n      scratch = 0;\\n\\n      for (i = third; i < third * 2; i++) {\\n        scratch += state.analysis.raw[i];\\n      }\\n\\n      state.analysis.mid = scratch / third / 256; // highs\\n\\n      scratch = 0;\\n\\n      for (i = third * 2; i < state.bufferLength; i++) {\\n        scratch += state.analysis.raw[i];\\n      }\\n\\n      state.analysis.high = scratch / third / 256;\\n      return state.analysis;\\n    }\\n  }]);\\n\\n  return AnalyserNode;\\n}();\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvbW9kdWxlcy9ub2Rlcy9BbmFseXNlck5vZGUuanM/MjhhOSJdLCJuYW1lcyI6WyJBbmFseXNlck5vZGUiLCJwYXJhbXMiLCJzdGF0ZSIsImN0eCIsImNvbnRleHQiLCJub2RlIiwiY3JlYXRlQW5hbHlzZXIiLCJzbW9vdGhpbmdUaW1lQ29uc3RhbnQiLCJmZnRTaXplIiwicHJvY2Vzc29yIiwiY3JlYXRlU2NyaXB0UHJvY2Vzc29yIiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwiYnVmZmVyTGVuZ3RoIiwiZnJlcXVlbmN5QmluQ291bnQiLCJhbmFseXNpcyIsInJhdyIsIlVpbnQ4QXJyYXkiLCJhdmVyYWdlIiwibG93IiwibWlkIiwiaGlnaCIsInRvIiwidGhpcmQiLCJNYXRoIiwicm91bmQiLCJzY3JhdGNoIiwiaSIsImdldEJ5dGVGcmVxdWVuY3lEYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7OztJQU1xQkEsWTs7O0FBQ25CLHdCQUFZQyxNQUFaLEVBQW9CO0FBQUE7O0FBQ2xCLFFBQUlDLEtBQUssR0FBSSxJQUFiO0FBQ0FBLFNBQUssQ0FBQ0MsR0FBTixHQUFhRixNQUFNLENBQUNHLE9BQXBCO0FBQ0FGLFNBQUssQ0FBQ0csSUFBTixHQUFhSCxLQUFLLENBQUNDLEdBQU4sQ0FBVUcsY0FBVixFQUFiO0FBRUFKLFNBQUssQ0FBQ0csSUFBTixDQUFXRSxxQkFBWCxHQUFtQyxHQUFuQztBQUNBTCxTQUFLLENBQUNHLElBQU4sQ0FBV0csT0FBWCxHQUFxQixJQUFyQixDQU5rQixDQVFsQjs7QUFDQU4sU0FBSyxDQUFDTyxTQUFOLEdBQWtCUCxLQUFLLENBQUNDLEdBQU4sQ0FBVU8scUJBQVYsQ0FBZ0MsSUFBaEMsRUFBc0MsQ0FBdEMsRUFBeUMsQ0FBekMsQ0FBbEI7QUFFQVIsU0FBSyxDQUFDTyxTQUFOLENBQWdCRSxPQUFoQixDQUF3QlQsS0FBSyxDQUFDQyxHQUFOLENBQVVTLFdBQWxDLEVBWGtCLENBVzZCOztBQUMvQ1YsU0FBSyxDQUFDRyxJQUFOLENBQVdNLE9BQVgsQ0FBbUJULEtBQUssQ0FBQ08sU0FBekIsRUFaa0IsQ0FZNkI7O0FBRS9DUCxTQUFLLENBQUNXLFlBQU4sR0FBcUJYLEtBQUssQ0FBQ0csSUFBTixDQUFXUyxpQkFBaEM7QUFFQVosU0FBSyxDQUFDYSxRQUFOLEdBQWlCO0FBQ2ZDLFNBQUcsRUFBRSxJQUFJQyxVQUFKLENBQWVmLEtBQUssQ0FBQ1csWUFBckIsQ0FEVTtBQUVmSyxhQUFPLEVBQUUsQ0FGTTtBQUdmQyxTQUFHLEVBQU0sQ0FITTtBQUlmQyxTQUFHLEVBQU0sQ0FKTTtBQUtmQyxVQUFJLEVBQUs7QUFMTSxLQUFqQjtBQU9EOzs7OzRCQUVPQyxFLEVBQUk7QUFDVixVQUFJcEIsS0FBSyxHQUFHLElBQVo7QUFDQUEsV0FBSyxDQUFDRyxJQUFOLENBQVdNLE9BQVgsQ0FBbUJXLEVBQW5CO0FBQ0Q7OzswQkFFSztBQUNKLFVBQUlwQixLQUFLLEdBQUssSUFBZDtBQUNBLFVBQU1xQixLQUFLLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXdkIsS0FBSyxDQUFDVyxZQUFOLEdBQXFCLENBQWhDLENBQWQ7QUFDQSxVQUFJYSxPQUFPLEdBQUcsQ0FBZDtBQUNBLFVBQUlDLENBQUMsR0FBRyxDQUFSO0FBRUF6QixXQUFLLENBQUNHLElBQU4sQ0FBV3VCLG9CQUFYLENBQWdDMUIsS0FBSyxDQUFDYSxRQUFOLENBQWVDLEdBQS9DLEVBTkksQ0FRSjs7QUFDQVUsYUFBTyxHQUFHLENBQVY7O0FBQ0EsV0FBS0MsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHekIsS0FBSyxDQUFDVyxZQUF0QixFQUFvQ2MsQ0FBQyxFQUFyQyxFQUF5QztBQUN2Q0QsZUFBTyxJQUFJeEIsS0FBSyxDQUFDYSxRQUFOLENBQWVDLEdBQWYsQ0FBbUJXLENBQW5CLENBQVg7QUFDRDs7QUFDRHpCLFdBQUssQ0FBQ2EsUUFBTixDQUFlRyxPQUFmLEdBQTBCUSxPQUFPLEdBQUd4QixLQUFLLENBQUNXLFlBQWpCLEdBQWlDLEdBQTFELENBYkksQ0FlSjs7QUFDQWEsYUFBTyxHQUFHLENBQVY7O0FBQ0EsV0FBS0MsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHSixLQUFoQixFQUF1QkksQ0FBQyxFQUF4QixFQUE0QjtBQUMxQkQsZUFBTyxJQUFJeEIsS0FBSyxDQUFDYSxRQUFOLENBQWVDLEdBQWYsQ0FBbUJXLENBQW5CLENBQVg7QUFDRDs7QUFDRHpCLFdBQUssQ0FBQ2EsUUFBTixDQUFlSSxHQUFmLEdBQXNCTyxPQUFPLEdBQUdILEtBQVgsR0FBb0IsR0FBekMsQ0FwQkksQ0FzQko7O0FBQ0FHLGFBQU8sR0FBRyxDQUFWOztBQUNBLFdBQUtDLENBQUMsR0FBR0osS0FBVCxFQUFnQkksQ0FBQyxHQUFJSixLQUFLLEdBQUcsQ0FBN0IsRUFBaUNJLENBQUMsRUFBbEMsRUFBc0M7QUFDcENELGVBQU8sSUFBSXhCLEtBQUssQ0FBQ2EsUUFBTixDQUFlQyxHQUFmLENBQW1CVyxDQUFuQixDQUFYO0FBQ0Q7O0FBQ0R6QixXQUFLLENBQUNhLFFBQU4sQ0FBZUssR0FBZixHQUFzQk0sT0FBTyxHQUFHSCxLQUFYLEdBQW9CLEdBQXpDLENBM0JJLENBNkJKOztBQUNBRyxhQUFPLEdBQUcsQ0FBVjs7QUFDQSxXQUFLQyxDQUFDLEdBQUlKLEtBQUssR0FBRyxDQUFsQixFQUFzQkksQ0FBQyxHQUFHekIsS0FBSyxDQUFDVyxZQUFoQyxFQUE4Q2MsQ0FBQyxFQUEvQyxFQUFtRDtBQUNqREQsZUFBTyxJQUFJeEIsS0FBSyxDQUFDYSxRQUFOLENBQWVDLEdBQWYsQ0FBbUJXLENBQW5CLENBQVg7QUFDRDs7QUFDRHpCLFdBQUssQ0FBQ2EsUUFBTixDQUFlTSxJQUFmLEdBQXVCSyxPQUFPLEdBQUdILEtBQVgsR0FBb0IsR0FBMUM7QUFFQSxhQUFPckIsS0FBSyxDQUFDYSxRQUFiO0FBQ0QiLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9ub2Rlcy9BbmFseXNlck5vZGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXG4gIEFuYWx5c2VyIE5vZGUgKEZGVClcblxuKi9cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5hbHlzZXJOb2RlIHtcbiAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgbGV0IHN0YXRlICA9IHRoaXNcbiAgICBzdGF0ZS5jdHggID0gcGFyYW1zLmNvbnRleHRcbiAgICBzdGF0ZS5ub2RlID0gc3RhdGUuY3R4LmNyZWF0ZUFuYWx5c2VyKClcblxuICAgIHN0YXRlLm5vZGUuc21vb3RoaW5nVGltZUNvbnN0YW50ID0gMC4yXG4gICAgc3RhdGUubm9kZS5mZnRTaXplID0gMjA0OFxuXG4gICAgLy8gY3JlYXRlIGEgc2NyaXB0IHByb2Nlc3NvciB3aXRoIGJ1ZmZlclNpemUgb2YgMjA0OFxuICAgIHN0YXRlLnByb2Nlc3NvciA9IHN0YXRlLmN0eC5jcmVhdGVTY3JpcHRQcm9jZXNzb3IoMjA0OCwgMSwgMSlcblxuICAgIHN0YXRlLnByb2Nlc3Nvci5jb25uZWN0KHN0YXRlLmN0eC5kZXN0aW5hdGlvbikgLy8gcHJvY2Vzc29yIC0+IGRlc3RpbmF0aW9uXG4gICAgc3RhdGUubm9kZS5jb25uZWN0KHN0YXRlLnByb2Nlc3NvcikgICAgICAgICAgICAvLyBhbmFseXNlciAgLT4gcHJvY2Vzc29yXG5cbiAgICBzdGF0ZS5idWZmZXJMZW5ndGggPSBzdGF0ZS5ub2RlLmZyZXF1ZW5jeUJpbkNvdW50XG5cbiAgICBzdGF0ZS5hbmFseXNpcyA9IHtcbiAgICAgIHJhdzogbmV3IFVpbnQ4QXJyYXkoc3RhdGUuYnVmZmVyTGVuZ3RoKSxcbiAgICAgIGF2ZXJhZ2U6IDAsXG4gICAgICBsb3c6ICAgICAwLFxuICAgICAgbWlkOiAgICAgMCxcbiAgICAgIGhpZ2g6ICAgIDBcbiAgICB9XG4gIH1cblxuICBjb25uZWN0KHRvKSB7XG4gICAgbGV0IHN0YXRlID0gdGhpc1xuICAgIHN0YXRlLm5vZGUuY29ubmVjdCh0bylcbiAgfVxuXG4gIGdldCgpIHtcbiAgICBsZXQgc3RhdGUgICA9IHRoaXNcbiAgICBjb25zdCB0aGlyZCA9IE1hdGgucm91bmQoc3RhdGUuYnVmZmVyTGVuZ3RoIC8gMylcbiAgICBsZXQgc2NyYXRjaCA9IDBcbiAgICBsZXQgaSA9IDBcblxuICAgIHN0YXRlLm5vZGUuZ2V0Qnl0ZUZyZXF1ZW5jeURhdGEoc3RhdGUuYW5hbHlzaXMucmF3KVxuXG4gICAgLy8gY2FsY3VsYXRlIGF2ZXJhZ2VcbiAgICBzY3JhdGNoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBzdGF0ZS5idWZmZXJMZW5ndGg7IGkrKykge1xuICAgICAgc2NyYXRjaCArPSBzdGF0ZS5hbmFseXNpcy5yYXdbaV1cbiAgICB9XG4gICAgc3RhdGUuYW5hbHlzaXMuYXZlcmFnZSA9IChzY3JhdGNoIC8gc3RhdGUuYnVmZmVyTGVuZ3RoKSAvIDI1NlxuXG4gICAgLy8gbG93c1xuICAgIHNjcmF0Y2ggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXJkOyBpKyspIHtcbiAgICAgIHNjcmF0Y2ggKz0gc3RhdGUuYW5hbHlzaXMucmF3W2ldXG4gICAgfVxuICAgIHN0YXRlLmFuYWx5c2lzLmxvdyA9IChzY3JhdGNoIC8gdGhpcmQpIC8gMjU2XG5cbiAgICAvLyBtaWRzXG4gICAgc2NyYXRjaCA9IDBcbiAgICBmb3IgKGkgPSB0aGlyZDsgaSA8ICh0aGlyZCAqIDIpOyBpKyspIHtcbiAgICAgIHNjcmF0Y2ggKz0gc3RhdGUuYW5hbHlzaXMucmF3W2ldXG4gICAgfVxuICAgIHN0YXRlLmFuYWx5c2lzLm1pZCA9IChzY3JhdGNoIC8gdGhpcmQpIC8gMjU2XG5cbiAgICAvLyBoaWdoc1xuICAgIHNjcmF0Y2ggPSAwXG4gICAgZm9yIChpID0gKHRoaXJkICogMik7IGkgPCBzdGF0ZS5idWZmZXJMZW5ndGg7IGkrKykge1xuICAgICAgc2NyYXRjaCArPSBzdGF0ZS5hbmFseXNpcy5yYXdbaV1cbiAgICB9XG4gICAgc3RhdGUuYW5hbHlzaXMuaGlnaCA9IChzY3JhdGNoIC8gdGhpcmQpIC8gMjU2XG5cbiAgICByZXR1cm4gc3RhdGUuYW5hbHlzaXNcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/modules/nodes/AnalyserNode.js\\n");\n        /***/\n      },\n\n      /***/\n      "./src/modules/nodes/GainNode.js":\n      /*!***************************************!*\\\n        !*** ./src/modules/nodes/GainNode.js ***!\n        \\***************************************/\n\n      /*! exports provided: default */\n\n      /***/\n      function srcModulesNodesGainNodeJs(module, __webpack_exports__, __webpack_require__) {\n        "use strict";\n\n        eval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\"default\\", function() { return GainNode; });\\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ \\"./src/modules/utils.js\\");\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/*\\n\\n  Gain Node\\n\\n  let g = new GainNode({\\n    context: context,\\n    gain:    1,\\n  })\\n\\n  g.node -> the web audio node object\\n\\n  g.gain(setTo)  -> getter/setter\\n  g.muted(setTo) -> getter/setter\\n\\n  g.tweenGain(setTo, duration)\\n\\n*/\\n\\n\\nvar GainNode =\\n/*#__PURE__*/\\nfunction () {\\n  function GainNode(params) {\\n    _classCallCheck(this, GainNode);\\n\\n    var state = this;\\n    state.ctx = params.context;\\n    state.node = state.ctx.createGainNode ? state.ctx.createGainNode() : state.ctx.createGain();\\n    state.gain(typeof params.gain === \'number\' ? params.gain : 1);\\n  }\\n\\n  _createClass(GainNode, [{\\n    key: \\"gain\\",\\n    value: function gain(setTo) {\\n      var state = this;\\n\\n      if (typeof setTo === \'number\') {\\n        /*\\n           \'AudioParam value setter will become equivalent to AudioParam.setValueAtTime() in (Chrome) M65\'\\n           Apparently, it\'s bad form to set gain.value directly now, ie\\n          \'this.node.gain.value = u.normalize(setTo, 0, 1)\'\\n           Recommended behaviour now is to use setTargetAtTime.\\n           - https://www.chromestatus.com/features/5287995770929152\\n          - https://github.com/mrdoob/three.js/pull/11133\\n           setTargetAtTime( value, start time (clamped to current time), time constant )\\n         */\\n        state.node.gain.setTargetAtTime(_utils_js__WEBPACK_IMPORTED_MODULE_0__[\\"default\\"].normalize(setTo), state.ctx.currentTime, 0);\\n      }\\n\\n      return state.node.gain.value;\\n    }\\n    /*\\n       tweenGain(0, 1, \'linear\')\\n      using an exponential ramp (not linear) for a more even crossfade\\n      (linear creates a volume dip in the middle)\\n     */\\n\\n  }, {\\n    key: \\"tweenGain\\",\\n    value: function tweenGain(setTo, duration) {\\n      var state = this;\\n\\n      if (typeof state.node.gain.exponentialRampToValueAtTime === \'function\') {\\n        setTo = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\\"default\\"].normalize(setTo);\\n\\n        if (setTo === 0) {\\n          setTo = 0.000001;\\n        } // can\'t use zero for ramps\\n\\n\\n        state.node.gain.exponentialRampToValueAtTime(setTo, state.ctx.currentTime + duration);\\n      }\\n    }\\n  }, {\\n    key: \\"muted\\",\\n    value: function muted(setTo) {}\\n  }]);\\n\\n  return GainNode;\\n}();\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvbW9kdWxlcy9ub2Rlcy9HYWluTm9kZS5qcz9kOGY0Il0sIm5hbWVzIjpbIkdhaW5Ob2RlIiwicGFyYW1zIiwic3RhdGUiLCJjdHgiLCJjb250ZXh0Iiwibm9kZSIsImNyZWF0ZUdhaW5Ob2RlIiwiY3JlYXRlR2FpbiIsImdhaW4iLCJzZXRUbyIsInNldFRhcmdldEF0VGltZSIsInV0aWxzIiwibm9ybWFsaXplIiwiY3VycmVudFRpbWUiLCJ2YWx1ZSIsImR1cmF0aW9uIiwiZXhwb25lbnRpYWxSYW1wVG9WYWx1ZUF0VGltZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBOztJQUVxQkEsUTs7O0FBQ25CLG9CQUFZQyxNQUFaLEVBQW9CO0FBQUE7O0FBQ2xCLFFBQUlDLEtBQUssR0FBSSxJQUFiO0FBQ0FBLFNBQUssQ0FBQ0MsR0FBTixHQUFhRixNQUFNLENBQUNHLE9BQXBCO0FBQ0FGLFNBQUssQ0FBQ0csSUFBTixHQUFhSCxLQUFLLENBQUNDLEdBQU4sQ0FBVUcsY0FBVixHQUEyQkosS0FBSyxDQUFDQyxHQUFOLENBQVVHLGNBQVYsRUFBM0IsR0FBd0RKLEtBQUssQ0FBQ0MsR0FBTixDQUFVSSxVQUFWLEVBQXJFO0FBRUFMLFNBQUssQ0FBQ00sSUFBTixDQUFZLE9BQU9QLE1BQU0sQ0FBQ08sSUFBZCxLQUF1QixRQUF2QixHQUFrQ1AsTUFBTSxDQUFDTyxJQUF6QyxHQUFnRCxDQUE1RDtBQUNEOzs7O3lCQUVJQyxLLEVBQU87QUFDVixVQUFJUCxLQUFLLEdBQUcsSUFBWjs7QUFFQSxVQUFJLE9BQU9PLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0I7Ozs7Ozs7OztBQWdCQVAsYUFBSyxDQUFDRyxJQUFOLENBQVdHLElBQVgsQ0FBZ0JFLGVBQWhCLENBQWdDQyxpREFBSyxDQUFDQyxTQUFOLENBQWdCSCxLQUFoQixDQUFoQyxFQUF3RFAsS0FBSyxDQUFDQyxHQUFOLENBQVVVLFdBQWxFLEVBQStFLENBQS9FO0FBQ0Q7O0FBQ0QsYUFBT1gsS0FBSyxDQUFDRyxJQUFOLENBQVdHLElBQVgsQ0FBZ0JNLEtBQXZCO0FBQ0Q7QUFFRDs7Ozs7Ozs7OEJBUVVMLEssRUFBT00sUSxFQUFVO0FBQ3pCLFVBQUliLEtBQUssR0FBRyxJQUFaOztBQUVBLFVBQUksT0FBT0EsS0FBSyxDQUFDRyxJQUFOLENBQVdHLElBQVgsQ0FBZ0JRLDRCQUF2QixLQUF3RCxVQUE1RCxFQUF3RTtBQUN0RVAsYUFBSyxHQUFHRSxpREFBSyxDQUFDQyxTQUFOLENBQWdCSCxLQUFoQixDQUFSOztBQUNBLFlBQUlBLEtBQUssS0FBSyxDQUFkLEVBQWlCO0FBQUVBLGVBQUssR0FBRyxRQUFSO0FBQWtCLFNBRmlDLENBRWhDOzs7QUFFdENQLGFBQUssQ0FBQ0csSUFBTixDQUFXRyxJQUFYLENBQWdCUSw0QkFBaEIsQ0FBNkNQLEtBQTdDLEVBQW9EUCxLQUFLLENBQUNDLEdBQU4sQ0FBVVUsV0FBVixHQUF3QkUsUUFBNUU7QUFDRDtBQUNGOzs7MEJBRUtOLEssRUFBTyxDQUFFIiwiZmlsZSI6Ii4vc3JjL21vZHVsZXMvbm9kZXMvR2Fpbk5vZGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXG4gIEdhaW4gTm9kZVxuXG4gIGxldCBnID0gbmV3IEdhaW5Ob2RlKHtcbiAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgIGdhaW46ICAgIDEsXG4gIH0pXG5cbiAgZy5ub2RlIC0+IHRoZSB3ZWIgYXVkaW8gbm9kZSBvYmplY3RcblxuICBnLmdhaW4oc2V0VG8pICAtPiBnZXR0ZXIvc2V0dGVyXG4gIGcubXV0ZWQoc2V0VG8pIC0+IGdldHRlci9zZXR0ZXJcblxuICBnLnR3ZWVuR2FpbihzZXRUbywgZHVyYXRpb24pXG5cbiovXG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2Fpbk5vZGUge1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICBsZXQgc3RhdGUgID0gdGhpc1xuICAgIHN0YXRlLmN0eCAgPSBwYXJhbXMuY29udGV4dFxuICAgIHN0YXRlLm5vZGUgPSBzdGF0ZS5jdHguY3JlYXRlR2Fpbk5vZGUgPyBzdGF0ZS5jdHguY3JlYXRlR2Fpbk5vZGUoKSA6IHN0YXRlLmN0eC5jcmVhdGVHYWluKClcblxuICAgIHN0YXRlLmdhaW4oIHR5cGVvZiBwYXJhbXMuZ2FpbiA9PT0gJ251bWJlcicgPyBwYXJhbXMuZ2FpbiA6IDEgKVxuICB9XG5cbiAgZ2FpbihzZXRUbykge1xuICAgIGxldCBzdGF0ZSA9IHRoaXNcblxuICAgIGlmICh0eXBlb2Ygc2V0VG8gPT09ICdudW1iZXInKSB7XG4gICAgICAvKlxuXG4gICAgICAgICdBdWRpb1BhcmFtIHZhbHVlIHNldHRlciB3aWxsIGJlY29tZSBlcXVpdmFsZW50IHRvIEF1ZGlvUGFyYW0uc2V0VmFsdWVBdFRpbWUoKSBpbiAoQ2hyb21lKSBNNjUnXG5cbiAgICAgICAgQXBwYXJlbnRseSwgaXQncyBiYWQgZm9ybSB0byBzZXQgZ2Fpbi52YWx1ZSBkaXJlY3RseSBub3csIGllXG4gICAgICAgICd0aGlzLm5vZGUuZ2Fpbi52YWx1ZSA9IHUubm9ybWFsaXplKHNldFRvLCAwLCAxKSdcblxuICAgICAgICBSZWNvbW1lbmRlZCBiZWhhdmlvdXIgbm93IGlzIHRvIHVzZSBzZXRUYXJnZXRBdFRpbWUuXG5cbiAgICAgICAgLSBodHRwczovL3d3dy5jaHJvbWVzdGF0dXMuY29tL2ZlYXR1cmVzLzUyODc5OTU3NzA5MjkxNTJcbiAgICAgICAgLSBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL3B1bGwvMTExMzNcblxuICAgICAgICBzZXRUYXJnZXRBdFRpbWUoIHZhbHVlLCBzdGFydCB0aW1lIChjbGFtcGVkIHRvIGN1cnJlbnQgdGltZSksIHRpbWUgY29uc3RhbnQgKVxuXG4gICAgICAqL1xuXG4gICAgICBzdGF0ZS5ub2RlLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKHV0aWxzLm5vcm1hbGl6ZShzZXRUbyksIHN0YXRlLmN0eC5jdXJyZW50VGltZSwgMClcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlLm5vZGUuZ2Fpbi52YWx1ZVxuICB9XG5cbiAgLypcblxuICAgIHR3ZWVuR2FpbigwLCAxLCAnbGluZWFyJylcbiAgICB1c2luZyBhbiBleHBvbmVudGlhbCByYW1wIChub3QgbGluZWFyKSBmb3IgYSBtb3JlIGV2ZW4gY3Jvc3NmYWRlXG4gICAgKGxpbmVhciBjcmVhdGVzIGEgdm9sdW1lIGRpcCBpbiB0aGUgbWlkZGxlKVxuXG4gICovXG5cbiAgdHdlZW5HYWluKHNldFRvLCBkdXJhdGlvbikge1xuICAgIGxldCBzdGF0ZSA9IHRoaXNcblxuICAgIGlmICh0eXBlb2Ygc3RhdGUubm9kZS5nYWluLmV4cG9uZW50aWFsUmFtcFRvVmFsdWVBdFRpbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHNldFRvID0gdXRpbHMubm9ybWFsaXplKHNldFRvKVxuICAgICAgaWYgKHNldFRvID09PSAwKSB7IHNldFRvID0gMC4wMDAwMDEgfSAvLyBjYW4ndCB1c2UgemVybyBmb3IgcmFtcHNcblxuICAgICAgc3RhdGUubm9kZS5nYWluLmV4cG9uZW50aWFsUmFtcFRvVmFsdWVBdFRpbWUoc2V0VG8sIHN0YXRlLmN0eC5jdXJyZW50VGltZSArIGR1cmF0aW9uKVxuICAgIH1cbiAgfVxuXG4gIG11dGVkKHNldFRvKSB7fVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/modules/nodes/GainNode.js\\n");\n        /***/\n      },\n\n      /***/\n      "./src/modules/nodes/PannerNode.js":\n      /*!*****************************************!*\\\n        !*** ./src/modules/nodes/PannerNode.js ***!\n        \\*****************************************/\n\n      /*! exports provided: default */\n\n      /***/\n      function srcModulesNodesPannerNodeJs(module, __webpack_exports__, __webpack_require__) {\n        "use strict";\n\n        eval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\"default\\", function() { return PanNode3D; });\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }\\n\\n/*\\n\\n  Pan Node (3D)\\n\\n*/\\nvar PanNode3D = function PanNode3D(params) {\\n  _classCallCheck(this, PanNode3D);\\n\\n  var state = this;\\n  state.ctx = params.context; // the name of this function is the same for\\n  // both prefixed and unprefixed audio contexts\\n\\n  state.node = state.ctx.createPanner(); // additional setup here\\n};\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvbW9kdWxlcy9ub2Rlcy9QYW5uZXJOb2RlLmpzPzgyYzgiXSwibmFtZXMiOlsiUGFuTm9kZTNEIiwicGFyYW1zIiwic3RhdGUiLCJjdHgiLCJjb250ZXh0Iiwibm9kZSIsImNyZWF0ZVBhbm5lciJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7OztJQU1xQkEsUyxHQUNuQixtQkFBWUMsTUFBWixFQUFvQjtBQUFBOztBQUNsQixNQUFJQyxLQUFLLEdBQUcsSUFBWjtBQUNBQSxPQUFLLENBQUNDLEdBQU4sR0FBWUYsTUFBTSxDQUFDRyxPQUFuQixDQUZrQixDQUlsQjtBQUNBOztBQUNBRixPQUFLLENBQUNHLElBQU4sR0FBYUgsS0FBSyxDQUFDQyxHQUFOLENBQVVHLFlBQVYsRUFBYixDQU5rQixDQVFsQjtBQUNELEMiLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9ub2Rlcy9QYW5uZXJOb2RlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblxuICBQYW4gTm9kZSAoM0QpXG5cbiovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhbk5vZGUzRCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgIGxldCBzdGF0ZSA9IHRoaXNcbiAgICBzdGF0ZS5jdHggPSBwYXJhbXMuY29udGV4dFxuXG4gICAgLy8gdGhlIG5hbWUgb2YgdGhpcyBmdW5jdGlvbiBpcyB0aGUgc2FtZSBmb3JcbiAgICAvLyBib3RoIHByZWZpeGVkIGFuZCB1bnByZWZpeGVkIGF1ZGlvIGNvbnRleHRzXG4gICAgc3RhdGUubm9kZSA9IHN0YXRlLmN0eC5jcmVhdGVQYW5uZXIoKVxuXG4gICAgLy8gYWRkaXRpb25hbCBzZXR1cCBoZXJlXG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/modules/nodes/PannerNode.js\\n");\n        /***/\n      },\n\n      /***/\n      "./src/modules/nodes/PannerNode2D.js":\n      /*!*******************************************!*\\\n        !*** ./src/modules/nodes/PannerNode2D.js ***!\n        \\*******************************************/\n\n      /*! exports provided: default */\n\n      /***/\n      function srcModulesNodesPannerNode2DJs(module, __webpack_exports__, __webpack_require__) {\n        "use strict";\n\n        eval("__webpack_require__.r(__webpack_exports__);\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\"default\\", function() { return PannerNode2D; });\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/*\\n\\n  Pan Node (2D - left/right)\\n\\n*/\\nvar PannerNode2D =\\n/*#__PURE__*/\\nfunction () {\\n  function PannerNode2D(params) {\\n    _classCallCheck(this, PannerNode2D);\\n\\n    var state = this;\\n    state.ctx = params.context; // the name of this function is the same for\\n    // both prefixed and unprefixed audio contexts\\n\\n    state.node = state.ctx.createPanner();\\n    state.values = {\\n      pan: 0,\\n      panX: 0,\\n      panY: 0,\\n      panZ: 0 // additional setup here\\n\\n    };\\n  }\\n\\n  _createClass(PannerNode2D, [{\\n    key: \\"pan\\",\\n    value: function pan(angle) {\\n      var state = this;\\n\\n      if (typeof angle === \'string\') {\\n        if (angle === \'front\') {\\n          angle = 0;\\n        }\\n\\n        if (angle === \'back\') {\\n          angle = 180;\\n        }\\n\\n        if (angle === \'left\') {\\n          angle = 270;\\n        }\\n\\n        if (angle === \'right\') {\\n          angle = 90;\\n        }\\n      }\\n\\n      if (typeof angle === \'number\') {\\n        state.values.pan = angle % 360;\\n        var angleRad = (-angle + 90) * 0.017453292519943295; // * PI/180\\n\\n        var x = state.values.panX = Math.cos(angleRad);\\n        var y = state.values.panY = Math.sin(angleRad);\\n        var z = state.values.panZ = -0.5;\\n        state.node.setPosition(x, y, z);\\n      }\\n\\n      return state.values.pan;\\n    }\\n  }, {\\n    key: \\"tweenPan\\",\\n    value: function tweenPan(angle, duration) {}\\n  }]);\\n\\n  return PannerNode2D;\\n}();\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvbW9kdWxlcy9ub2Rlcy9QYW5uZXJOb2RlMkQuanM/NWU1NyJdLCJuYW1lcyI6WyJQYW5uZXJOb2RlMkQiLCJwYXJhbXMiLCJzdGF0ZSIsImN0eCIsImNvbnRleHQiLCJub2RlIiwiY3JlYXRlUGFubmVyIiwidmFsdWVzIiwicGFuIiwicGFuWCIsInBhblkiLCJwYW5aIiwiYW5nbGUiLCJhbmdsZVJhZCIsIngiLCJNYXRoIiwiY29zIiwieSIsInNpbiIsInoiLCJzZXRQb3NpdGlvbiIsImR1cmF0aW9uIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7OztJQU1xQkEsWTs7O0FBQ25CLHdCQUFZQyxNQUFaLEVBQW9CO0FBQUE7O0FBQ2xCLFFBQUlDLEtBQUssR0FBRyxJQUFaO0FBQ0FBLFNBQUssQ0FBQ0MsR0FBTixHQUFZRixNQUFNLENBQUNHLE9BQW5CLENBRmtCLENBSWxCO0FBQ0E7O0FBQ0FGLFNBQUssQ0FBQ0csSUFBTixHQUFhSCxLQUFLLENBQUNDLEdBQU4sQ0FBVUcsWUFBVixFQUFiO0FBRUFKLFNBQUssQ0FBQ0ssTUFBTixHQUFlO0FBQ2JDLFNBQUcsRUFBRyxDQURPO0FBRWJDLFVBQUksRUFBRSxDQUZPO0FBR2JDLFVBQUksRUFBRSxDQUhPO0FBSWJDLFVBQUksRUFBRSxDQUpPLENBT2Y7O0FBUGUsS0FBZjtBQVFEOzs7O3dCQUVHQyxLLEVBQU87QUFDVCxVQUFJVixLQUFLLEdBQUcsSUFBWjs7QUFFQSxVQUFJLE9BQU9VLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0IsWUFBSUEsS0FBSyxLQUFLLE9BQWQsRUFBdUI7QUFBRUEsZUFBSyxHQUFLLENBQVY7QUFBYTs7QUFDdEMsWUFBSUEsS0FBSyxLQUFLLE1BQWQsRUFBdUI7QUFBRUEsZUFBSyxHQUFHLEdBQVI7QUFBYTs7QUFDdEMsWUFBSUEsS0FBSyxLQUFLLE1BQWQsRUFBdUI7QUFBRUEsZUFBSyxHQUFHLEdBQVI7QUFBYTs7QUFDdEMsWUFBSUEsS0FBSyxLQUFLLE9BQWQsRUFBdUI7QUFBRUEsZUFBSyxHQUFJLEVBQVQ7QUFBYTtBQUN2Qzs7QUFFRCxVQUFJLE9BQU9BLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0JWLGFBQUssQ0FBQ0ssTUFBTixDQUFhQyxHQUFiLEdBQW1CSSxLQUFLLEdBQUcsR0FBM0I7QUFFQSxZQUFNQyxRQUFRLEdBQUcsQ0FBQyxDQUFDRCxLQUFELEdBQVMsRUFBVixJQUFnQixvQkFBakMsQ0FINkIsQ0FHeUI7O0FBRXRELFlBQUlFLENBQUMsR0FBR1osS0FBSyxDQUFDSyxNQUFOLENBQWFFLElBQWIsR0FBb0JNLElBQUksQ0FBQ0MsR0FBTCxDQUFTSCxRQUFULENBQTVCO0FBQ0EsWUFBSUksQ0FBQyxHQUFHZixLQUFLLENBQUNLLE1BQU4sQ0FBYUcsSUFBYixHQUFvQkssSUFBSSxDQUFDRyxHQUFMLENBQVNMLFFBQVQsQ0FBNUI7QUFDQSxZQUFJTSxDQUFDLEdBQUdqQixLQUFLLENBQUNLLE1BQU4sQ0FBYUksSUFBYixHQUFvQixDQUFDLEdBQTdCO0FBRUFULGFBQUssQ0FBQ0csSUFBTixDQUFXZSxXQUFYLENBQXVCTixDQUF2QixFQUEwQkcsQ0FBMUIsRUFBNkJFLENBQTdCO0FBQ0Q7O0FBRUQsYUFBT2pCLEtBQUssQ0FBQ0ssTUFBTixDQUFhQyxHQUFwQjtBQUNEOzs7NkJBRVFJLEssRUFBT1MsUSxFQUFVLENBQUUiLCJmaWxlIjoiLi9zcmMvbW9kdWxlcy9ub2Rlcy9QYW5uZXJOb2RlMkQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXG4gIFBhbiBOb2RlICgyRCAtIGxlZnQvcmlnaHQpXG5cbiovXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhbm5lck5vZGUyRCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuICAgIGxldCBzdGF0ZSA9IHRoaXNcbiAgICBzdGF0ZS5jdHggPSBwYXJhbXMuY29udGV4dFxuXG4gICAgLy8gdGhlIG5hbWUgb2YgdGhpcyBmdW5jdGlvbiBpcyB0aGUgc2FtZSBmb3JcbiAgICAvLyBib3RoIHByZWZpeGVkIGFuZCB1bnByZWZpeGVkIGF1ZGlvIGNvbnRleHRzXG4gICAgc3RhdGUubm9kZSA9IHN0YXRlLmN0eC5jcmVhdGVQYW5uZXIoKVxuXG4gICAgc3RhdGUudmFsdWVzID0ge1xuICAgICAgcGFuOiAgMCxcbiAgICAgIHBhblg6IDAsXG4gICAgICBwYW5ZOiAwLFxuICAgICAgcGFuWjogMFxuICAgIH1cblxuICAgIC8vIGFkZGl0aW9uYWwgc2V0dXAgaGVyZVxuICB9XG5cbiAgcGFuKGFuZ2xlKSB7XG4gICAgbGV0IHN0YXRlID0gdGhpc1xuXG4gICAgaWYgKHR5cGVvZiBhbmdsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChhbmdsZSA9PT0gJ2Zyb250JykgeyBhbmdsZSA9ICAgMCB9XG4gICAgICBpZiAoYW5nbGUgPT09ICdiYWNrJyApIHsgYW5nbGUgPSAxODAgfVxuICAgICAgaWYgKGFuZ2xlID09PSAnbGVmdCcgKSB7IGFuZ2xlID0gMjcwIH1cbiAgICAgIGlmIChhbmdsZSA9PT0gJ3JpZ2h0JykgeyBhbmdsZSA9ICA5MCB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhbmdsZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHN0YXRlLnZhbHVlcy5wYW4gPSBhbmdsZSAlIDM2MFxuXG4gICAgICBjb25zdCBhbmdsZVJhZCA9ICgtYW5nbGUgKyA5MCkgKiAwLjAxNzQ1MzI5MjUxOTk0MzI5NSAvLyAqIFBJLzE4MFxuXG4gICAgICBsZXQgeCA9IHN0YXRlLnZhbHVlcy5wYW5YID0gTWF0aC5jb3MoYW5nbGVSYWQpXG4gICAgICBsZXQgeSA9IHN0YXRlLnZhbHVlcy5wYW5ZID0gTWF0aC5zaW4oYW5nbGVSYWQpXG4gICAgICBsZXQgeiA9IHN0YXRlLnZhbHVlcy5wYW5aID0gLTAuNVxuXG4gICAgICBzdGF0ZS5ub2RlLnNldFBvc2l0aW9uKHgsIHksIHopXG4gICAgfVxuXG4gICAgcmV0dXJuIHN0YXRlLnZhbHVlcy5wYW5cbiAgfVxuXG4gIHR3ZWVuUGFuKGFuZ2xlLCBkdXJhdGlvbikge31cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/modules/nodes/PannerNode2D.js\\n");\n        /***/\n      },\n\n      /***/\n      "./src/modules/nodes/allNodes.js":\n      /*!***************************************!*\\\n        !*** ./src/modules/nodes/allNodes.js ***!\n        \\***************************************/\n\n      /*! exports provided: default */\n\n      /***/\n      function srcModulesNodesAllNodesJs(module, __webpack_exports__, __webpack_require__) {\n        "use strict";\n\n        eval("__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _GainNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GainNode */ \\"./src/modules/nodes/GainNode.js\\");\\n/* harmony import */ var _PannerNode2D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PannerNode2D */ \\"./src/modules/nodes/PannerNode2D.js\\");\\n/* harmony import */ var _PannerNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PannerNode */ \\"./src/modules/nodes/PannerNode.js\\");\\n/* harmony import */ var _AnalyserNode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AnalyserNode */ \\"./src/modules/nodes/AnalyserNode.js\\");\\n/*\\n\\n  Gather all nodes in a single export.\\n\\n  All nodes must implement this API:\\n\\n    let n = new Node({\\n      lastNode: Node,\\n      context:  WebAudioContext,\\n    })\\n    n.connect(lastNode)\\n\\n\\n  ie\\n\\n  class MyNode {\\n    constructor(params){\\n      let ctx = params.context\\n      this.myNode = ctx.createNodeType ? ctx.createNodeType() : ctx.createType()\\n\\n      // additional setup here\\n    }\\n\\n    connect(previousNode){\\n      previousNode.connect(this.myNode)\\n      return this.myNode\\n    }\\n  }\\n\\n*/\\n\\n\\n\\n\\n/* harmony default export */ __webpack_exports__[\\"default\\"] = ({\\n  GainNode: _GainNode__WEBPACK_IMPORTED_MODULE_0__[\\"default\\"],\\n  PannerNode2D: _PannerNode2D__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"],\\n  PannerNode: _PannerNode__WEBPACK_IMPORTED_MODULE_2__[\\"default\\"],\\n  AnalyserNode: _AnalyserNode__WEBPACK_IMPORTED_MODULE_3__[\\"default\\"]\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvbW9kdWxlcy9ub2Rlcy9hbGxOb2Rlcy5qcz8xOTJhIl0sIm5hbWVzIjpbIkdhaW5Ob2RlIiwiUGFubmVyTm9kZTJEIiwiUGFubmVyTm9kZSIsIkFuYWx5c2VyTm9kZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUErQkE7QUFDQTtBQUNBO0FBQ0E7QUFFZTtBQUFFQSxVQUFRLEVBQVJBLGlEQUFGO0FBQVlDLGNBQVksRUFBWkEscURBQVo7QUFBMEJDLFlBQVUsRUFBVkEsbURBQTFCO0FBQXNDQyxjQUFZLEVBQVpBLHFEQUFZQTtBQUFsRCxDQUFmIiwiZmlsZSI6Ii4vc3JjL21vZHVsZXMvbm9kZXMvYWxsTm9kZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXG4gIEdhdGhlciBhbGwgbm9kZXMgaW4gYSBzaW5nbGUgZXhwb3J0LlxuXG4gIEFsbCBub2RlcyBtdXN0IGltcGxlbWVudCB0aGlzIEFQSTpcblxuICAgIGxldCBuID0gbmV3IE5vZGUoe1xuICAgICAgbGFzdE5vZGU6IE5vZGUsXG4gICAgICBjb250ZXh0OiAgV2ViQXVkaW9Db250ZXh0LFxuICAgIH0pXG4gICAgbi5jb25uZWN0KGxhc3ROb2RlKVxuXG5cbiAgaWVcblxuICBjbGFzcyBNeU5vZGUge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtcyl7XG4gICAgICBsZXQgY3R4ID0gcGFyYW1zLmNvbnRleHRcbiAgICAgIHRoaXMubXlOb2RlID0gY3R4LmNyZWF0ZU5vZGVUeXBlID8gY3R4LmNyZWF0ZU5vZGVUeXBlKCkgOiBjdHguY3JlYXRlVHlwZSgpXG5cbiAgICAgIC8vIGFkZGl0aW9uYWwgc2V0dXAgaGVyZVxuICAgIH1cblxuICAgIGNvbm5lY3QocHJldmlvdXNOb2RlKXtcbiAgICAgIHByZXZpb3VzTm9kZS5jb25uZWN0KHRoaXMubXlOb2RlKVxuICAgICAgcmV0dXJuIHRoaXMubXlOb2RlXG4gICAgfVxuICB9XG5cbiovXG5cbmltcG9ydCBHYWluTm9kZSBmcm9tICcuL0dhaW5Ob2RlJ1xuaW1wb3J0IFBhbm5lck5vZGUyRCBmcm9tICcuL1Bhbm5lck5vZGUyRCdcbmltcG9ydCBQYW5uZXJOb2RlIGZyb20gJy4vUGFubmVyTm9kZSdcbmltcG9ydCBBbmFseXNlck5vZGUgZnJvbSAnLi9BbmFseXNlck5vZGUnXG5cbmV4cG9ydCBkZWZhdWx0IHsgR2Fpbk5vZGUsIFBhbm5lck5vZGUyRCwgUGFubmVyTm9kZSwgQW5hbHlzZXJOb2RlIH1cbiJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/modules/nodes/allNodes.js\\n");\n        /***/\n      },\n\n      /***/\n      "./src/modules/trackTypes.js":\n      /*!***********************************!*\\\n        !*** ./src/modules/trackTypes.js ***!\n        \\***********************************/\n\n      /*! exports provided: default */\n\n      /***/\n      function srcModulesTrackTypesJs(module, __webpack_exports__, __webpack_require__) {\n        "use strict";\n\n        eval("__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _Html5Track__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Html5Track */ \\"./src/modules/Html5Track.js\\");\\n/* harmony import */ var _BufferSourceTrack__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BufferSourceTrack */ \\"./src/modules/BufferSourceTrack.js\\");\\n/* harmony import */ var _ElementSourceTrack__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ElementSourceTrack */ \\"./src/modules/ElementSourceTrack.js\\");\\n/* harmony import */ var _StreamSourceTrack__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StreamSourceTrack */ \\"./src/modules/StreamSourceTrack.js\\");\\n/*\\n\\n  Track Types\\n\\n*/\\n\\n\\n\\n\\n/* harmony default export */ __webpack_exports__[\\"default\\"] = ({\\n  Html5Track: _Html5Track__WEBPACK_IMPORTED_MODULE_0__[\\"default\\"],\\n  BufferSourceTrack: _BufferSourceTrack__WEBPACK_IMPORTED_MODULE_1__[\\"default\\"],\\n  ElementSourceTrack: _ElementSourceTrack__WEBPACK_IMPORTED_MODULE_2__[\\"default\\"],\\n  StreamSourceTrack: _StreamSourceTrack__WEBPACK_IMPORTED_MODULE_3__[\\"default\\"]\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvbW9kdWxlcy90cmFja1R5cGVzLmpzP2E5MTUiXSwibmFtZXMiOlsiSHRtbDVUcmFjayIsIkJ1ZmZlclNvdXJjZVRyYWNrIiwiRWxlbWVudFNvdXJjZVRyYWNrIiwiU3RyZWFtU291cmNlVHJhY2siXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUVlO0FBQUVBLFlBQVUsRUFBVkEsbURBQUY7QUFBY0MsbUJBQWlCLEVBQWpCQSwwREFBZDtBQUFpQ0Msb0JBQWtCLEVBQWxCQSwyREFBakM7QUFBcURDLG1CQUFpQixFQUFqQkEsMERBQWlCQTtBQUF0RSxDQUFmIiwiZmlsZSI6Ii4vc3JjL21vZHVsZXMvdHJhY2tUeXBlcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5cbiAgVHJhY2sgVHlwZXNcblxuKi9cblxuaW1wb3J0IEh0bWw1VHJhY2sgZnJvbSAnLi9IdG1sNVRyYWNrJ1xuaW1wb3J0IEJ1ZmZlclNvdXJjZVRyYWNrIGZyb20gJy4vQnVmZmVyU291cmNlVHJhY2snXG5pbXBvcnQgRWxlbWVudFNvdXJjZVRyYWNrIGZyb20gJy4vRWxlbWVudFNvdXJjZVRyYWNrJ1xuaW1wb3J0IFN0cmVhbVNvdXJjZVRyYWNrIGZyb20gJy4vU3RyZWFtU291cmNlVHJhY2snXG5cbmV4cG9ydCBkZWZhdWx0IHsgSHRtbDVUcmFjaywgQnVmZmVyU291cmNlVHJhY2ssIEVsZW1lbnRTb3VyY2VUcmFjaywgU3RyZWFtU291cmNlVHJhY2sgfVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/modules/trackTypes.js\\n");\n        /***/\n      },\n\n      /***/\n      "./src/modules/utils.js":\n      /*!******************************!*\\\n        !*** ./src/modules/utils.js ***!\n        \\******************************/\n\n      /*! exports provided: default */\n\n      /***/\n      function srcModulesUtilsJs(module, __webpack_exports__, __webpack_require__) {\n        "use strict";\n\n        eval("__webpack_require__.r(__webpack_exports__);\\nfunction normalize(value) {\\n  if (value > 1) return 1;\\n  if (value < 0) return 0;\\n  return value;\\n}\\n\\nfunction timeFormat(seconds) {\\n  var min = Math.floor(seconds / 60);\\n  var m = min < 10 ? \\"0\\".concat(min) : min;\\n  var sec = Math.floor(seconds - m * 60);\\n  var s = sec < 10 ? \\"0\\".concat(sec) : sec;\\n  return \\"\\".concat(m, \\":\\").concat(s);\\n}\\n\\nfunction lerp(start, end, now) {\\n  return (1 - now) * start + now * end;\\n}\\n\\nfunction timeoutPromise(duration) {\\n  return new Promise(function (resolve) {\\n    setTimeout(function () {\\n      return resolve();\\n    }, duration);\\n  });\\n}\\n\\n/* harmony default export */ __webpack_exports__[\\"default\\"] = ({\\n  normalize: normalize,\\n  timeFormat: timeFormat,\\n  lerp: lerp,\\n  timeoutPromise: timeoutPromise\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvbW9kdWxlcy91dGlscy5qcz8wODBmIl0sIm5hbWVzIjpbIm5vcm1hbGl6ZSIsInZhbHVlIiwidGltZUZvcm1hdCIsInNlY29uZHMiLCJtaW4iLCJNYXRoIiwiZmxvb3IiLCJtIiwic2VjIiwicyIsImxlcnAiLCJzdGFydCIsImVuZCIsIm5vdyIsInRpbWVvdXRQcm9taXNlIiwiZHVyYXRpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiXSwibWFwcGluZ3MiOiJBQUNBO0FBQUEsU0FBU0EsU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEI7QUFDeEIsTUFBSUEsS0FBSyxHQUFHLENBQVosRUFBZSxPQUFPLENBQVA7QUFDZixNQUFJQSxLQUFLLEdBQUcsQ0FBWixFQUFlLE9BQU8sQ0FBUDtBQUNmLFNBQU9BLEtBQVA7QUFDRDs7QUFFRCxTQUFTQyxVQUFULENBQW9CQyxPQUFwQixFQUE2QjtBQUMzQixNQUFNQyxHQUFHLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxPQUFPLEdBQUcsRUFBckIsQ0FBWjtBQUNBLE1BQU1JLENBQUMsR0FBR0gsR0FBRyxHQUFHLEVBQU4sY0FBZUEsR0FBZixJQUF1QkEsR0FBakM7QUFFQSxNQUFNSSxHQUFHLEdBQUdILElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxPQUFPLEdBQUlJLENBQUMsR0FBRyxFQUExQixDQUFaO0FBQ0EsTUFBTUUsQ0FBQyxHQUFHRCxHQUFHLEdBQUcsRUFBTixjQUFlQSxHQUFmLElBQXVCQSxHQUFqQztBQUVBLG1CQUFVRCxDQUFWLGNBQWVFLENBQWY7QUFDRDs7QUFFRCxTQUFTQyxJQUFULENBQWNDLEtBQWQsRUFBcUJDLEdBQXJCLEVBQTBCQyxHQUExQixFQUErQjtBQUM3QixTQUFPLENBQUMsSUFBSUEsR0FBTCxJQUFZRixLQUFaLEdBQW9CRSxHQUFHLEdBQUdELEdBQWpDO0FBQ0Q7O0FBRUQsU0FBU0UsY0FBVCxDQUF3QkMsUUFBeEIsRUFBa0M7QUFDaEMsU0FBTyxJQUFJQyxPQUFKLENBQVksVUFBQUMsT0FBTyxFQUFJO0FBQzVCQyxjQUFVLENBQUM7QUFBQSxhQUFNRCxPQUFPLEVBQWI7QUFBQSxLQUFELEVBQWtCRixRQUFsQixDQUFWO0FBQ0QsR0FGTSxDQUFQO0FBR0Q7O0FBRWM7QUFBRWYsV0FBUyxFQUFUQSxTQUFGO0FBQWFFLFlBQVUsRUFBVkEsVUFBYjtBQUF5QlEsTUFBSSxFQUFKQSxJQUF6QjtBQUErQkksZ0JBQWMsRUFBZEE7QUFBL0IsQ0FBZiIsImZpbGUiOiIuL3NyYy9tb2R1bGVzL3V0aWxzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5mdW5jdGlvbiBub3JtYWxpemUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID4gMSkgcmV0dXJuIDFcbiAgaWYgKHZhbHVlIDwgMCkgcmV0dXJuIDBcbiAgcmV0dXJuIHZhbHVlXG59XG5cbmZ1bmN0aW9uIHRpbWVGb3JtYXQoc2Vjb25kcykge1xuICBjb25zdCBtaW4gPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MClcbiAgY29uc3QgbSA9IG1pbiA8IDEwID8gYDAke21pbn1gIDogbWluXG5cbiAgY29uc3Qgc2VjID0gTWF0aC5mbG9vcihzZWNvbmRzIC0gKG0gKiA2MCkpXG4gIGNvbnN0IHMgPSBzZWMgPCAxMCA/IGAwJHtzZWN9YCA6IHNlY1xuXG4gIHJldHVybiBgJHttfToke3N9YFxufVxuXG5mdW5jdGlvbiBsZXJwKHN0YXJ0LCBlbmQsIG5vdykge1xuICByZXR1cm4gKDEgLSBub3cpICogc3RhcnQgKyBub3cgKiBlbmRcbn1cblxuZnVuY3Rpb24gdGltZW91dFByb21pc2UoZHVyYXRpb24pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSgpLCBkdXJhdGlvbilcbiAgfSlcbn1cblxuZXhwb3J0IGRlZmF1bHQgeyBub3JtYWxpemUsIHRpbWVGb3JtYXQsIGxlcnAsIHRpbWVvdXRQcm9taXNlIH1cbiJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///./src/modules/utils.js\\n");\n        /***/\n      }\n      /******/\n\n    })\n  );\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(7)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n')},function(module,exports){eval('module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, "loaded", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, "id", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin\n    if(false) { var cssReload; }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2RlbW8vc3R5bGUuc2Fzcz84MWUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsT0FBTyxLQUFVLEVBQUUsa0JBS2QiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1NTMwOTgwNzU2NzVcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n")},function(module,exports,__webpack_require__){eval("var m = __webpack_require__(0);\n\nvar Stream = __webpack_require__(10);\n\nvar Dropzone = __webpack_require__(12);\n\nmodule.exports = {\n  oninit: function oninit(vnode) {\n    var state = this;\n    state.mix = vnode.attrs.mix;\n    var defaults = {\n      id: '',\n      src: '',\n      type: 'Html5Track',\n      loop: false,\n      autoplay: false,\n      muted: false,\n      timeline: []\n    };\n    state.options = Stream({});\n    state.create = create;\n    state.reset = reset;\n    state.set = set;\n    state.get = get;\n    state.remove = remove;\n    state.node = node;\n    setup(); // ********************************************************\n\n    function setup() {\n      reset();\n    }\n\n    function create() {\n      var options = state.options();\n      console.log(options);\n      state.mix.track(options.id, options);\n      reset();\n    }\n\n    function reset() {\n      state.options(Object.assign({}, defaults));\n      m.redraw();\n    }\n\n    function set(prop, val) {\n      var info = state.options();\n      info[prop] = val;\n      state.options(info);\n      m.redraw();\n    }\n\n    function remove(prop) {\n      var info = state.options();\n      delete info[prop];\n      state.options(info);\n      m.redraw();\n    }\n\n    function get(prop) {\n      var info = state.options();\n      return info[prop];\n    }\n\n    function node(type, setTo) {\n      var options = state.options();\n\n      if (!options.nodes) {\n        return false;\n      }\n\n      if (!type) {\n        return options.nodes.indexOf(type) !== -1;\n      } else if (typeof setTo === 'boolean') {\n        if (options.nodes.indexOf(type) === -1) {\n          options.nodes.push(type);\n        } else {\n          options.nodes.splice(options.nodes.indexOf(type), 1);\n        }\n\n        state.options(options);\n      }\n    }\n  },\n  view: function view(vnode) {\n    var state = this;\n    return [m('.row', [m('.col', [m('header', '1. Audio Source'), m('.input', [m('label', {\n      for: 'input-file'\n    }, 'File'), m(Dropzone, {\n      id: 'input-file',\n      hook: state.set.bind(null, 'src')\n    })]), m('.input', [m('label', {\n      for: 'input-source-stream'\n    }, 'Stream'), m('input', {\n      id: 'input-source-stream',\n      type: 'checkbox',\n      onclick: function onclick() {\n        var type = document.querySelector('#input-type');\n        type.oninput({\n          value: this.checked ? 'StreamSourceTrack' : 'Html5Track'\n        });\n      },\n      checked: state.get('type') === 'StreamSourceTrack'\n    })])]), // ********************************************************\n    m('.col', [m('header', '2. Options'), m('.input', [m('label', {\n      for: 'input-name'\n    }, 'ID'), m('input', {\n      id: 'input-name',\n      value: state.get('id'),\n      oninput: m.withAttr('value', state.set.bind(null, 'id'))\n    })]), m('.input', [m('label', {\n      for: 'input-type'\n    }, 'Type'), m('select', {\n      id: 'input-type',\n      oninput: function oninput(opts) {\n        var value = opts.value ? opts.value : this.value;\n        console.log(value);\n        state.set('type', value);\n\n        if (value === 'Html5Track') {\n          state.remove('nodes');\n        } else if (!state.get('nodes')) {\n          state.set('nodes', []);\n        }\n      },\n      value: state.get('type')\n    }, [m('option', {\n      value: 'Html5Track'\n    }, m.trust('&nbsp;&nbsp;HTML5')), m('optgroup', {\n      label: 'Web Audio:'\n    }), m('option', {\n      value: 'BufferSourceTrack'\n    }, m.trust('&nbsp;&nbsp;Buffer Source')), m('option', {\n      value: 'ElementSourceTrack'\n    }, m.trust('&nbsp;&nbsp;Element Source')), m('option', {\n      value: 'StreamSourceTrack'\n    }, m.trust('&nbsp;&nbsp;Stream Source'))])]), checkbox.call(state, 'loop'), checkbox.call(state, 'autoplay'), checkbox.call(state, 'muted'), m('div', {\n      style: {\n        display: state.get('type') === 'Html5Track' ? 'none' : 'block'\n      }\n    }, [m('header', 'Nodes'), m('.input', [m('label', {\n      for: 'input-node-GainNode'\n    }, 'GainNode'), m('input', {\n      id: 'input-node-GainNode',\n      type: 'checkbox',\n      checked: true,\n      disabled: true // onclick:  m.withAttr('checked', state.node.bind(null, 'GainNode')),\n      // checked:  state.get(id)\n\n    })]), nodeCheckbox.call(state, 'AnalyserNode'), nodeCheckbox.call(state, 'PannerNode2D')])]), // ********************************************************\n    m('.col.is-grow', [m('pre.options', [JSON.stringify(state.options(), ' ', 2)])]), m('.col', [m('header', '3. Create!'), m('button.mod-red', {\n      onclick: state.reset\n    }, 'Reset Options'), m('button.mod-green', {\n      onclick: state.create\n    }, 'Create Track')])])];\n  }\n};\n\nfunction checkbox(id) {\n  var state = this;\n  return m('.input', [m('label', {\n    for: \"input-\".concat(id)\n  }, id), m('input', {\n    id: \"input-\".concat(id),\n    type: 'checkbox',\n    onclick: m.withAttr('checked', state.set.bind(null, id)),\n    checked: state.get(id)\n  })]);\n}\n\nfunction nodeCheckbox(id) {\n  var state = this;\n  return m('.input', [m('label', {\n    for: \"input-node-\".concat(id)\n  }, id), m('input', {\n    id: \"input-node-\".concat(id),\n    type: 'checkbox',\n    onclick: m.withAttr('checked', state.node.bind(null, id)),\n    checked: state.node(id)\n  })]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = __webpack_require__(11)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9zdHJlYW0uanM/NGUwNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBWTs7QUFFWixpQkFBaUIsbUJBQU8sQ0FBQyxFQUFpQiIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vc3RyZWFtL3N0cmVhbVwiKVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n")},function(module,exports,__webpack_require__){eval('/* eslint-disable */\n;(function() {\n"use strict"\n/* eslint-enable */\n\nvar guid = 0, HALT = {}\nfunction createStream() {\n\tfunction stream() {\n\t\tif (arguments.length > 0 && arguments[0] !== HALT) updateStream(stream, arguments[0])\n\t\treturn stream._state.value\n\t}\n\tinitStream(stream)\n\n\tif (arguments.length > 0 && arguments[0] !== HALT) updateStream(stream, arguments[0])\n\n\treturn stream\n}\nfunction initStream(stream) {\n\tstream.constructor = createStream\n\tstream._state = {id: guid++, value: undefined, state: 0, derive: undefined, recover: undefined, deps: {}, parents: [], endStream: undefined, unregister: undefined}\n\tstream.map = stream["fantasy-land/map"] = map, stream["fantasy-land/ap"] = ap, stream["fantasy-land/of"] = createStream\n\tstream.valueOf = valueOf, stream.toJSON = toJSON, stream.toString = valueOf\n\n\tObject.defineProperties(stream, {\n\t\tend: {get: function() {\n\t\t\tif (!stream._state.endStream) {\n\t\t\t\tvar endStream = createStream()\n\t\t\t\tendStream.map(function(value) {\n\t\t\t\t\tif (value === true) {\n\t\t\t\t\t\tunregisterStream(stream)\n\t\t\t\t\t\tendStream._state.unregister = function(){unregisterStream(endStream)}\n\t\t\t\t\t}\n\t\t\t\t\treturn value\n\t\t\t\t})\n\t\t\t\tstream._state.endStream = endStream\n\t\t\t}\n\t\t\treturn stream._state.endStream\n\t\t}}\n\t})\n}\nfunction updateStream(stream, value) {\n\tupdateState(stream, value)\n\tfor (var id in stream._state.deps) updateDependency(stream._state.deps[id], false)\n\tif (stream._state.unregister != null) stream._state.unregister()\n\tfinalize(stream)\n}\nfunction updateState(stream, value) {\n\tstream._state.value = value\n\tstream._state.changed = true\n\tif (stream._state.state !== 2) stream._state.state = 1\n}\nfunction updateDependency(stream, mustSync) {\n\tvar state = stream._state, parents = state.parents\n\tif (parents.length > 0 && parents.every(active) && (mustSync || parents.some(changed))) {\n\t\tvar value = stream._state.derive()\n\t\tif (value === HALT) return false\n\t\tupdateState(stream, value)\n\t}\n}\nfunction finalize(stream) {\n\tstream._state.changed = false\n\tfor (var id in stream._state.deps) stream._state.deps[id]._state.changed = false\n}\n\nfunction combine(fn, streams) {\n\tif (!streams.every(valid)) throw new Error("Ensure that each item passed to stream.combine/stream.merge is a stream")\n\treturn initDependency(createStream(), streams, function() {\n\t\treturn fn.apply(this, streams.concat([streams.filter(changed)]))\n\t})\n}\n\nfunction initDependency(dep, streams, derive) {\n\tvar state = dep._state\n\tstate.derive = derive\n\tstate.parents = streams.filter(notEnded)\n\n\tregisterDependency(dep, state.parents)\n\tupdateDependency(dep, true)\n\n\treturn dep\n}\nfunction registerDependency(stream, parents) {\n\tfor (var i = 0; i < parents.length; i++) {\n\t\tparents[i]._state.deps[stream._state.id] = stream\n\t\tregisterDependency(stream, parents[i]._state.parents)\n\t}\n}\nfunction unregisterStream(stream) {\n\tfor (var i = 0; i < stream._state.parents.length; i++) {\n\t\tvar parent = stream._state.parents[i]\n\t\tdelete parent._state.deps[stream._state.id]\n\t}\n\tfor (var id in stream._state.deps) {\n\t\tvar dependent = stream._state.deps[id]\n\t\tvar index = dependent._state.parents.indexOf(stream)\n\t\tif (index > -1) dependent._state.parents.splice(index, 1)\n\t}\n\tstream._state.state = 2 //ended\n\tstream._state.deps = {}\n}\n\nfunction map(fn) {return combine(function(stream) {return fn(stream())}, [this])}\nfunction ap(stream) {return combine(function(s1, s2) {return s1()(s2())}, [stream, this])}\nfunction valueOf() {return this._state.value}\nfunction toJSON() {return this._state.value != null && typeof this._state.value.toJSON === "function" ? this._state.value.toJSON() : this._state.value}\n\nfunction valid(stream) {return stream._state }\nfunction active(stream) {return stream._state.state === 1}\nfunction changed(stream) {return stream._state.changed}\nfunction notEnded(stream) {return stream._state.state !== 2}\n\nfunction merge(streams) {\n\treturn combine(function() {\n\t\treturn streams.map(function(s) {return s()})\n\t}, streams)\n}\n\nfunction scan(reducer, seed, stream) {\n\tvar newStream = combine(function (s) {\n\t\treturn seed = reducer(seed, s._state.value)\n\t}, [stream])\n\n\tif (newStream._state.state === 0) newStream(seed)\n\n\treturn newStream\n}\n\nfunction scanMerge(tuples, seed) {\n\tvar streams = tuples.map(function(tuple) {\n\t\tvar stream = tuple[0]\n\t\tif (stream._state.state === 0) stream(undefined)\n\t\treturn stream\n\t})\n\n\tvar newStream = combine(function() {\n\t\tvar changed = arguments[arguments.length - 1]\n\n\t\tstreams.forEach(function(stream, idx) {\n\t\t\tif (changed.indexOf(stream) > -1) {\n\t\t\t\tseed = tuples[idx][1](seed, stream._state.value)\n\t\t\t}\n\t\t})\n\n\t\treturn seed\n\t}, streams)\n\n\treturn newStream\n}\n\ncreateStream["fantasy-land/of"] = createStream\ncreateStream.merge = merge\ncreateStream.combine = combine\ncreateStream.scan = scan\ncreateStream.scanMerge = scanMerge\ncreateStream.HALT = HALT\n\nif (true) module["exports"] = createStream\nelse {}\n\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n')},function(module,exports,__webpack_require__){eval("/*\n\n  file drop or getusermedia\n\n*/\nvar m = __webpack_require__(0);\n\nmodule.exports = {\n  oncreate: function oncreate(vnode) {\n    var state = this;\n    vnode.dom.addEventListener('drop', drop);\n    vnode.dom.addEventListener('dragover', dragover);\n    vnode.dom.addEventListener('dragend', dragend);\n\n    function dragover(e) {\n      var state = this;\n      e.preventDefault();\n      state.classList.add('is-over');\n    }\n\n    function dragend(e) {\n      var state = this;\n      e.preventDefault();\n      state.classList.remove('is-over');\n    }\n\n    function drop(e) {\n      var state = this;\n      e.preventDefault();\n      state.classList.remove('is-over');\n\n      if (e.dataTransfer.items) {\n        for (var i = 0; i < e.dataTransfer.items.length; i++) {\n          var item = e.dataTransfer.items[i];\n\n          if (item.kind == \"file\") {\n            processFile(item.getAsFile());\n          }\n        }\n      } else {\n        for (var _i = 0; _i < e.dataTransfer.files.length; _i++) {\n          processFile(e.dataTransfer.files[_i]);\n        }\n      }\n    }\n\n    function processFile(file) {\n      vnode.attrs.hook(URL.createObjectURL(file));\n    }\n  },\n  view: function view(vnode) {\n    var state = this;\n    return m('.dropzone', [m('.dropzone-inner', ['Drop an audio file here'])]);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2RlbW8vanMvbW9kdWxlcy9kcm9wem9uZS5qcz84NWUxIl0sIm5hbWVzIjpbIm0iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9uY3JlYXRlIiwidm5vZGUiLCJzdGF0ZSIsImRvbSIsImFkZEV2ZW50TGlzdGVuZXIiLCJkcm9wIiwiZHJhZ292ZXIiLCJkcmFnZW5kIiwiZSIsInByZXZlbnREZWZhdWx0IiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwiZGF0YVRyYW5zZmVyIiwiaXRlbXMiLCJpIiwibGVuZ3RoIiwiaXRlbSIsImtpbmQiLCJwcm9jZXNzRmlsZSIsImdldEFzRmlsZSIsImZpbGVzIiwiZmlsZSIsImF0dHJzIiwiaG9vayIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInZpZXciXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQU1BLElBQU1BLENBQUMsR0FBR0MsbUJBQU8sQ0FBQyxDQUFELENBQWpCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFFZkMsVUFBUSxFQUFFLGtCQUFTQyxLQUFULEVBQWdCO0FBQ3hCLFFBQUlDLEtBQUssR0FBRyxJQUFaO0FBRUFELFNBQUssQ0FBQ0UsR0FBTixDQUFVQyxnQkFBVixDQUEyQixNQUEzQixFQUF1Q0MsSUFBdkM7QUFDQUosU0FBSyxDQUFDRSxHQUFOLENBQVVDLGdCQUFWLENBQTJCLFVBQTNCLEVBQXVDRSxRQUF2QztBQUNBTCxTQUFLLENBQUNFLEdBQU4sQ0FBVUMsZ0JBQVYsQ0FBMkIsU0FBM0IsRUFBdUNHLE9BQXZDOztBQUVBLGFBQVNELFFBQVQsQ0FBa0JFLENBQWxCLEVBQXFCO0FBQ25CLFVBQUlOLEtBQUssR0FBRyxJQUFaO0FBQ0FNLE9BQUMsQ0FBQ0MsY0FBRjtBQUNBUCxXQUFLLENBQUNRLFNBQU4sQ0FBZ0JDLEdBQWhCLENBQW9CLFNBQXBCO0FBQ0Q7O0FBRUQsYUFBU0osT0FBVCxDQUFpQkMsQ0FBakIsRUFBb0I7QUFDbEIsVUFBSU4sS0FBSyxHQUFHLElBQVo7QUFDQU0sT0FBQyxDQUFDQyxjQUFGO0FBQ0FQLFdBQUssQ0FBQ1EsU0FBTixDQUFnQkUsTUFBaEIsQ0FBdUIsU0FBdkI7QUFDRDs7QUFFRCxhQUFTUCxJQUFULENBQWNHLENBQWQsRUFBaUI7QUFDZixVQUFJTixLQUFLLEdBQUcsSUFBWjtBQUNBTSxPQUFDLENBQUNDLGNBQUY7QUFDQVAsV0FBSyxDQUFDUSxTQUFOLENBQWdCRSxNQUFoQixDQUF1QixTQUF2Qjs7QUFFQSxVQUFJSixDQUFDLENBQUNLLFlBQUYsQ0FBZUMsS0FBbkIsRUFBMEI7QUFDeEIsYUFBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHUCxDQUFDLENBQUNLLFlBQUYsQ0FBZUMsS0FBZixDQUFxQkUsTUFBekMsRUFBaURELENBQUMsRUFBbEQsRUFBc0Q7QUFDcEQsY0FBTUUsSUFBSSxHQUFHVCxDQUFDLENBQUNLLFlBQUYsQ0FBZUMsS0FBZixDQUFxQkMsQ0FBckIsQ0FBYjs7QUFDQSxjQUFLRSxJQUFJLENBQUNDLElBQUwsSUFBYSxNQUFsQixFQUEyQjtBQUFFQyx1QkFBVyxDQUFFRixJQUFJLENBQUNHLFNBQUwsRUFBRixDQUFYO0FBQWlDO0FBQy9EO0FBQ0YsT0FMRCxNQUtPO0FBQ0wsYUFBSyxJQUFJTCxFQUFDLEdBQUcsQ0FBYixFQUFnQkEsRUFBQyxHQUFHUCxDQUFDLENBQUNLLFlBQUYsQ0FBZVEsS0FBZixDQUFxQkwsTUFBekMsRUFBaURELEVBQUMsRUFBbEQsRUFBc0Q7QUFDcERJLHFCQUFXLENBQUVYLENBQUMsQ0FBQ0ssWUFBRixDQUFlUSxLQUFmLENBQXFCTixFQUFyQixDQUFGLENBQVg7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsYUFBU0ksV0FBVCxDQUFxQkcsSUFBckIsRUFBMkI7QUFDekJyQixXQUFLLENBQUNzQixLQUFOLENBQVlDLElBQVosQ0FBa0JDLEdBQUcsQ0FBQ0MsZUFBSixDQUFvQkosSUFBcEIsQ0FBbEI7QUFDRDtBQUNGLEdBekNjO0FBMkNmSyxNQUFJLEVBQUUsY0FBUzFCLEtBQVQsRUFBZ0I7QUFDcEIsUUFBSUMsS0FBSyxHQUFHLElBQVo7QUFDQSxXQUFPTixDQUFDLENBQUMsV0FBRCxFQUFjLENBQ3BCQSxDQUFDLENBQUMsaUJBQUQsRUFBb0IsQ0FBRSx5QkFBRixDQUFwQixDQURtQixDQUFkLENBQVI7QUFHRDtBQWhEYyxDQUFqQiIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5cbiAgZmlsZSBkcm9wIG9yIGdldHVzZXJtZWRpYVxuXG4qL1xuXG5jb25zdCBtID0gcmVxdWlyZSgnbWl0aHJpbCcpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIG9uY3JlYXRlOiBmdW5jdGlvbih2bm9kZSkge1xuICAgIGxldCBzdGF0ZSA9IHRoaXNcblxuICAgIHZub2RlLmRvbS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgICAgIGRyb3ApXG4gICAgdm5vZGUuZG9tLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgZHJhZ292ZXIpXG4gICAgdm5vZGUuZG9tLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdlbmQnLCAgZHJhZ2VuZClcblxuICAgIGZ1bmN0aW9uIGRyYWdvdmVyKGUpIHtcbiAgICAgIGxldCBzdGF0ZSA9IHRoaXNcbiAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgc3RhdGUuY2xhc3NMaXN0LmFkZCgnaXMtb3ZlcicpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZHJhZ2VuZChlKSB7XG4gICAgICBsZXQgc3RhdGUgPSB0aGlzXG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIHN0YXRlLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLW92ZXInKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRyb3AoZSkge1xuICAgICAgbGV0IHN0YXRlID0gdGhpc1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBzdGF0ZS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1vdmVyJylcblxuICAgICAgaWYgKGUuZGF0YVRyYW5zZmVyLml0ZW1zKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZS5kYXRhVHJhbnNmZXIuaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBpdGVtID0gZS5kYXRhVHJhbnNmZXIuaXRlbXNbaV1cbiAgICAgICAgICBpZiAoIGl0ZW0ua2luZCA9PSBcImZpbGVcIiApIHsgcHJvY2Vzc0ZpbGUoIGl0ZW0uZ2V0QXNGaWxlKCkgKSB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZS5kYXRhVHJhbnNmZXIuZmlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBwcm9jZXNzRmlsZSggZS5kYXRhVHJhbnNmZXIuZmlsZXNbaV0gKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0ZpbGUoZmlsZSkge1xuICAgICAgdm5vZGUuYXR0cnMuaG9vayggVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKSApXG4gICAgfVxuICB9LFxuXG4gIHZpZXc6IGZ1bmN0aW9uKHZub2RlKSB7XG4gICAgbGV0IHN0YXRlID0gdGhpc1xuICAgIHJldHVybiBtKCcuZHJvcHpvbmUnLCBbXG4gICAgICBtKCcuZHJvcHpvbmUtaW5uZXInLCBbICdEcm9wIGFuIGF1ZGlvIGZpbGUgaGVyZScgXSlcbiAgICBdKVxuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///12\n")},function(module,exports,__webpack_require__){eval("var m = __webpack_require__(0);\n\nvar frameRunner = __webpack_require__(14);\n/*\n\n  Formatted Time (00:00)\n\n*/\n\n\nvar formattedTime = {\n  oninit: function oninit(vnode) {\n    var state = this;\n    state.track = vnode.attrs.track;\n    state.id = state.track.options.id;\n  },\n  oncreate: function oncreate(vnode) {\n    var state = this;\n    state.track.on('play', function () {\n      return updateTime();\n    });\n    state.track.on('ended', function () {\n      return m.redraw();\n    });\n    state.hook = frameRunner.add(\"\".concat(state.id, \"-formatted-time\"), updateTime);\n\n    function updateTime() {\n      vnode.dom.innerText = state.track.formattedTime();\n    }\n  },\n  onremove: function onremove(vnode) {\n    var state = this;\n    state.hook;\n  },\n  view: function view(vnode) {\n    var state = this;\n    return m('.tracks-track-time', '00:00');\n  }\n  /*\n  \n    Volume Slider\n  \n  */\n\n};\nvar volumeControl = {\n  oninit: function oninit(vnode) {\n    var state = this;\n    state.track = vnode.attrs.track;\n    state.id = state.track.options.id;\n  },\n  oncreate: function oncreate(vnode) {\n    var state = this;\n    var isMouseDown;\n    state.input = vnode.dom.querySelector('input');\n    state.label = vnode.dom.querySelector('.mod-currentvolume');\n    state.onmousedown = onmousedown;\n    state.onmouseup = onmouseup;\n    state.hook = frameRunner.add(\"\".concat(state.id, \"-update-volume\"), updateVolume);\n\n    function updateVolume() {\n      if (isMouseDown) {\n        return;\n      }\n\n      state.input.value = state.track.volume() * 100;\n      state.label.innerText = \"\".concat(state.input.value, \"%\");\n    }\n\n    function onmousedown() {\n      isMouseDown = true;\n    }\n\n    function onmouseup(e) {\n      isMouseDown = false;\n      state.track.volume(e.target.value / 100);\n    }\n  },\n  onremove: function onremove(vnode) {\n    var state = this;\n    state.hook;\n  },\n  view: function view(vnode) {\n    var state = this;\n    return [m('.tracks-track-col', [m('.tracks-track-col-label', 'volume'), m('.volumecontrol', [m('input[type=\"range\"].volumecontrol-input', {\n      min: 0,\n      max: 100,\n      onmousedown: state.onmousedown,\n      onmouseup: state.onmouseup\n    }), m('.volumecontrol-label.mod-currentvolume', \"\".concat(Math.round(state.track.volume() * 100), \"%\"))])]), m('.tracks-track-col', [m('button', {\n      onclick: function onclick() {\n        return state.track.tweenVolume(0, 1);\n      }\n    }, 'To 0'), m('button', {\n      onclick: function onclick() {\n        return state.track.tweenVolume(1, 1);\n      }\n    }, 'To 100')])];\n  }\n  /*\n  \n    Time Scrubber\n  \n  */\n\n};\nvar scrubber = {\n  oninit: function oninit(vnode) {\n    var state = this;\n    state.track = vnode.attrs.track;\n    state.id = state.track.options.id;\n  },\n  oncreate: function oncreate(vnode) {\n    var state = this;\n    var percentage, isMouseDown;\n    state.input = vnode.dom.querySelector('input');\n    state.max = 1000;\n    state.onmousedown = onmousedown;\n    state.onmouseup = onmouseup;\n    state.hook = frameRunner.add(\"\".concat(state.id, \"-update-time\"), updateTime);\n\n    function updateTime() {\n      if (isMouseDown || !state.track.duration()) {\n        return;\n      }\n\n      percentage = state.track.currentTime() / state.track.duration();\n      state.input.value = percentage * state.max;\n    }\n\n    function onmousedown() {\n      isMouseDown = true;\n    }\n\n    function onmouseup(e) {\n      isMouseDown = false;\n      percentage = e.target.value / state.max;\n      state.track.currentTime(percentage * state.track.duration());\n    }\n  },\n  onremove: function onremove(vnode) {\n    var state = this;\n    state.hook;\n  },\n  view: function view(vnode) {\n    var state = this;\n    return m('.scrubber', [m('input[type=\"range\"].scrubber-input', {\n      min: 0,\n      max: state.max,\n      value: state.input ? state.input.value : 0,\n      onmousedown: state.onmousedown,\n      onmouseup: state.onmouseup\n    })]);\n  }\n  /*\n  \n    PannerNode2D\n  \n  */\n\n};\nvar pan2d = {\n  oninit: function oninit(vnode) {\n    var state = this;\n    state.track = vnode.attrs.track;\n    state.id = state.track.options.id;\n  },\n  oncreate: function oncreate(vnode) {\n    var state = this;\n    var angle, isMouseDown;\n    state.input = vnode.dom.querySelector('input');\n    state.min = -90;\n    state.max = 90; // get a reference to the panner node (re-created every time we play)\n\n    state.track.on('play', function () {\n      if (state.track.node) {\n        state.panNode = state.track.node('PannerNode2D');\n        m.redraw();\n      }\n    });\n    state.onmousedown = onmousedown;\n    state.onmouseup = onmouseup;\n    state.hook = frameRunner.add(\"\".concat(state.id, \"-update-time\"), updateTime);\n\n    function updateTime() {\n      if (isMouseDown || !state.panNode) {\n        return;\n      }\n\n      var angle = state.panNode.pan();\n\n      if (angle > 90) {\n        angle = 360 - angle;\n      }\n\n      if (state.input) {\n        state.input.value = angle;\n      } else {\n        state.input = vnode.dom.querySelector('input');\n      }\n    }\n\n    function onmousedown() {\n      isMouseDown = true;\n    }\n\n    function onmouseup(e) {\n      isMouseDown = false;\n      angle = parseInt(e.target.value);\n      state.panNode.pan(angle);\n    }\n  },\n  onremove: function onremove(vnode) {\n    var state = this;\n    state.hook;\n  },\n  view: function view(vnode) {\n    var state = this;\n    return m('.tracks-track-col', [m('.tracks-track-col-label', 'pan (2d)'), m('.pan', {\n      style: {\n        visibility: state.panNode ? 'visible' : 'hidden'\n      }\n    }, [m('.pan-label', 'left'), m('input[type=\"range\"].scrubber-input', {\n      min: state.min,\n      max: state.max,\n      value: state.panNode ? state.panNode.values.pan : 0,\n      onmousedown: state.onmousedown,\n      onmouseup: state.onmouseup\n    }), m('.pan-label', 'right')])]);\n  }\n};\nvar analyser = {\n  oninit: function oninit(vnode) {\n    var state = this;\n    state.track = vnode.attrs.track;\n    state.id = state.track.options.id;\n  },\n  oncreate: function oncreate(vnode) {\n    var state = this;\n    var canvas, canvasCtx;\n    state.track.on('play', function () {\n      if (state.track.node) {\n        state.analyser = state.track.node('AnalyserNode');\n        m.redraw();\n\n        if (state.analyser) {\n          canvas = document.getElementById(\"\".concat(state.id, \"-oscilloscope\"));\n          canvasCtx = canvas.getContext('2d');\n          draw();\n        }\n      }\n    });\n\n    function draw() {\n      requestAnimationFrame(draw);\n      var bufferLength = state.analyser.bufferLength;\n      var dataArray = state.analyser.analysis.raw;\n      state.analyser.node.getByteTimeDomainData(dataArray);\n      canvasCtx.fillStyle = 'rgb(255, 255, 255)';\n      canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n      canvasCtx.lineWidth = 2;\n      canvasCtx.strokeStyle = 'rgb(0, 0, 0)';\n      canvasCtx.beginPath();\n      var sliceWidth = canvas.width / bufferLength;\n      var center = canvas.height / 2;\n      var x = 0;\n\n      for (var i = 0; i < bufferLength; i++) {\n        var y = dataArray[i] / 128 * center;\n\n        if (i === 0) {\n          canvasCtx.moveTo(x, y);\n        } else {\n          canvasCtx.lineTo(x, y);\n        }\n\n        x += sliceWidth;\n      }\n\n      canvasCtx.lineTo(canvas.width, center);\n      canvasCtx.stroke();\n    }\n  },\n  view: function view(vnode) {\n    var state = this;\n    return m('.tracks-track-col', [m('.tracks-track-col-label', 'analyser'), m('canvas.analyser', {\n      id: \"\".concat(state.id, \"-oscilloscope\"),\n      style: {\n        visibility: state.analyser ? 'visible' : 'hidden'\n      }\n    })]);\n  }\n  /*\n  \n    StreamSource\n  \n  */\n  // const streamSource = {\n  //   oninit: function(vnode) {\n  //     let state   = this\n  //     state.track = vnode.attrs.track\n  //     state.id    = state.track.options.id\n  //   },\n  //   oncreate: function(vnode) {\n  //     let state   = this\n  //     let isMouseDown\n  //     state.input = vnode.dom.querySelector('input')\n  //     navigator.mediaDevices.getUserMedia({ audio: true }).then(function(stream) {\n  //       console.log(state)\n  //       var source = state.ctx.createMediaStreamSource(stream)\n  //       var biquadFilter                 = state.ctx.createBiquadFilter()\n  //           biquadFilter.type            = \"lowshelf\"\n  //           biquadFilter.frequency.value = 1000\n  //           biquadFilter.gain.value      = state.input.value\n  //       source.connect(biquadFilter)\n  //       biquadFilter.connect(state.ctx.destination)\n  //       state.input.oninput = function() {\n  //         biquadFilter.gain.value = state.input.value\n  //       }\n  //     })\n  //     state.track.on('play', () => {\n  //       console.log(state.track)\n  //       // if (state.track.node) {\n  //         // state.stream = state.track.node('PannerNode2D')\n  //         // m.redraw()\n  //       // }\n  //     })\n  //     state.onmousedown = onmousedown\n  //     state.onmouseup   = onmouseup\n  //     // state.hook = frameRunner.add(`${state.id}-update-time`, updateTime)\n  //     function updateTime() {\n  //       // if (isMouseDown || !state.panNode) { return }\n  //       // let angle = state.panNode.pan()\n  //       // if (angle > 90) { angle = 360 - angle }\n  //       // if (state.input) { state.input.value = angle }\n  //       // else { state.input = vnode.dom.querySelector('input') }\n  //     }\n  //     function onmousedown() {\n  //       isMouseDown = true\n  //     }\n  //     function onmouseup(e) {\n  //       isMouseDown = false\n  //       // angle = parseInt(e.target.value)\n  //       // state.panNode.pan( angle )\n  //     }\n  //   },\n  //   onremove: function(vnode) {\n  //     let state = this\n  //     // state.hook\n  //   },\n  //   view: function(vnode) {\n  //     let state = this\n  //     return m('.tracks-track-col', [\n  //       m('.tracks-track-col-label', 'stream'),\n  //       m('.stream', { style: { /*visibility: state.panNode ? 'visible' : 'hidden'*/ }}, [\n  //     //     m('.pan-label', 'left'),\n  //         m('input[type=\"range\"].scrubber-input', {\n  //     //       min:         state.min,\n  //     //       max:         state.max,\n  //     //       value:       state.panNode ? state.panNode.values.pan : 0,\n  //     //       onmousedown: state.onmousedown,\n  //     //       onmouseup:   state.onmouseup\n  //         }),\n  //     //     m('.pan-label', 'right')\n  //       ])\n  //     ])\n  //   }\n  // }\n\n  /*\n  \n    ##  ## #### ###### ##    ##\n    ##  ##  ##  ##     ##    ##\n    ##  ##  ##  #####  ## ## ##\n     ####   ##  ##     ## ## ##\n      ##   #### ######  ##  ##\n  \n  */\n\n};\nmodule.exports = {\n  oninit: function oninit(vnode) {\n    var state = this;\n    state.mix = vnode.attrs.mix;\n  },\n  view: function view(vnode) {\n    var state = this;\n    return m('.tracks', [state.mix.tracks().length ? TrackListTracks.call(state, vnode) : TrackListEmpty()]);\n  }\n};\n\nfunction TrackListTracks(vnode) {\n  var state = this;\n  state.mix = vnode.attrs.mix;\n  return state.mix.tracks().map(function (track) {\n    return m('.tracks-track', [m('.tracks-track-col.mod-id', track.options.id), m('.tracks-track-col', [m('.tracks-track-col-label', 'time'), m(scrubber, {\n      track: track\n    })]), m('.tracks-track-col', [m(formattedTime, {\n      track: track\n    })]), // track controls\n    m('.tracks-track-col', [m('button', {\n      style: {\n        display: track.paused() ? 'none' : 'block'\n      },\n      onclick: function onclick() {\n        return track.pause();\n      }\n    }, '| |'), m('button', {\n      style: {\n        display: track.paused() ? 'block' : 'none'\n      },\n      onclick: function onclick() {\n        return track.play();\n      }\n    }, m.trust('&#9655;'))]), m('.tracks-track-col', [m('button', {\n      onclick: function onclick() {\n        return state.mix.remove(track);\n      }\n    }, m.trust('&#10005;'))]), m(volumeControl, {\n      track: track\n    }), m(analyser, {\n      track: track\n    }), m(pan2d, {\n      track: track\n    })]);\n  });\n}\n\nfunction TrackListEmpty() {\n  return m('.tracks-track', ['no tracks']);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n")},function(module,exports,__webpack_require__){eval("var FrameRunner = __webpack_require__(15);\n\nvar frameRunner = new FrameRunner();\nmodule.exports = frameRunner;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2RlbW8vanMvZnJhbWUtcnVubmVyLmpzPzBhNzAiXSwibmFtZXMiOlsiRnJhbWVSdW5uZXIiLCJyZXF1aXJlIiwiZnJhbWVSdW5uZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsRUFBRCxDQUEzQjs7QUFDQSxJQUFJQyxXQUFXLEdBQUcsSUFBSUYsV0FBSixFQUFsQjtBQUNBRyxNQUFNLENBQUNDLE9BQVAsR0FBaUJGLFdBQWpCIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRnJhbWVSdW5uZXIgPSByZXF1aXJlKCdoZWxpb3MtZnJhbWUtcnVubmVyJylcbnZhciBmcmFtZVJ1bm5lciA9IG5ldyBGcmFtZVJ1bm5lcigpXG5tb2R1bGUuZXhwb3J0cyA9IGZyYW1lUnVubmVyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14\n")},function(module,exports,__webpack_require__){eval("(function (global, factory) {\n\t true ? module.exports = factory() :\n\tundefined;\n}(this, (function () { 'use strict';\n\nclass FrameRunner {\n\n  constructor(params) {\n    let defaults = {\n      debug: false\n    };\n    this.options = Object.assign(defaults, params);\n\n    this.counter = 0;\n    this.i = 0;\n\n    this.functionLookup = { everyFrame: {}, everySecond: {} };\n    this.functionArray = { everyFrame: [], everySecond: [] };\n\n    this.polyfill();\n\n    this.start();\n  }\n\n  start() {\n    let context = this;\n\n    this.rafID = window.requestAnimationFrame(rafFunction);\n    this.log('[frameRunner] start RAF Loop');\n\n    function rafFunction() {\n      context.rafID = window.requestAnimationFrame(rafFunction);\n\n      for (context.i = context.functionArray.everyFrame.length - 1; context.i >= 0; context.i--) context.functionArray.everyFrame[context.i]();\n\n      context.counter++;\n      if (context.counter > 60) context.counter = 0;\n\n      if (context.counter === 0) {\n        for (context.i = context.functionArray.everySecond.length - 1; context.i >= 0; context.i--) context.functionArray.everySecond[context.i]();\n      }\n    }\n  }\n\n  stop() {\n    window.cancelAnimationFrame(this.rafID);\n    this.log('[frameRunner] stop RAF Loop');\n  }\n\n  add(params) {\n    let options = {};\n\n    // allow both types of function signature\n    if (arguments.length > 1) {\n      options.id = arguments[0];\n      options.f = arguments[1];\n      options.type = arguments[2] || 'everyFrame';\n    } else {\n      let defaults = { id: null, f: null, type: 'everyFrame' };\n      options = Object.assign(defaults, params);\n    }\n\n    if (!options.id || !options.f) {\n      this.error(`can’t add \"${options.id}\"; missing argument`);return;\n    }\n    if (typeof options.f !== 'function') {\n      this.error(`\"${options.id}\" is not a valid function`);return;\n    }\n\n    if (!this.functionLookup[options.type][options.id]) {\n      this.log(`[frameRunner] adding \"${options.id}\" to ${options.type}`);\n\n      this.functionLookup[options.type][options.id] = options.f;\n      this.functionArray[options.type].push(options.f);\n\n      return this.remove.bind(null, options.id, options.type); // return destroyer\n    } else {\n      this.error('[frameRunner] function exists');\n    }\n  }\n\n  remove(params) {\n    let options = {};\n    console.log('remove', this)\n    if (typeof arguments[0] === 'object') {\n      let defaults = { id: undefined, type: 'everyFrame' };\n      options = Object.assign(defaults, params);\n    } else {\n      options.id = arguments[0];\n      options.type = arguments[1] || 'everyFrame';\n    }\n\n    var theFunction = this.functionLookup[options.type][options.id];\n\n    if (theFunction) {\n      this.log(`[frameRunner] removing \"${options.id}\" from ${options.type}`);\n\n      for (var i = this.functionArray[options.type].length - 1; i >= 0; i--) {\n        if (this.functionArray[options.type][i] === theFunction) {\n          this.functionArray[options.type].splice(i, 1);\n        }\n      }\n\n      delete this.functionLookup[options.type][options.id];\n      return true;\n    } else {\n      this.error(`function \"${name}\" doesn’t exist`);\n      return false;\n    }\n  }\n\n  check(params) {\n    let options = {};\n\n    if (typeof params === 'object') {\n      let defaults = { id: undefined, type: 'everyFrame' };\n      options = Object.assign(defaults, params);\n    } else {\n      options.id = arguments[0];\n      options.type = arguments[1] || 'everyFrame';\n    }\n\n    return !!this.functionLookup[options.type][options.id];\n  }\n\n  getFrameCount() {\n    return this.rafID;\n  }\n\n  log() {\n    if (this.debug) console.log.call(null, arguments);\n  }\n  error() {\n    if (this.debug) console.error.call(null, arguments);\n  }\n\n  // requestAnimationFrame() Polyfill\n  // https://gist.github.com/paulirish/1579671\n  polyfill() {\n    var lastTime = 0;\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n      window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n      window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = window.setTimeout(function () {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n\n    if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n      clearTimeout(id);\n    };\n  }\n\n}\n\nreturn FrameRunner;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n")}]);