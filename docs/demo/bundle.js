!function(F){var l={};function V(c){if(l[c])return l[c].exports;var t=l[c]={i:c,l:!1,exports:{}};return F[c].call(t.exports,t,t.exports,V),t.l=!0,t.exports}V.m=F,V.c=l,V.d=function(F,l,c){V.o(F,l)||Object.defineProperty(F,l,{enumerable:!0,get:c})},V.r=function(F){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(F,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(F,"__esModule",{value:!0})},V.t=function(F,l){if(1&l&&(F=V(F)),8&l)return F;if(4&l&&"object"==typeof F&&F&&F.__esModule)return F;var c=Object.create(null);if(V.r(c),Object.defineProperty(c,"default",{enumerable:!0,value:F}),2&l&&"string"!=typeof F)for(var t in F)V.d(c,t,function(l){return F[l]}.bind(null,t));return c},V.n=function(F){var l=F&&F.__esModule?function(){return F.default}:function(){return F};return V.d(l,"a",l),l},V.o=function(F,l){return Object.prototype.hasOwnProperty.call(F,l)},V.p="",V(V.s=3)}([function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(setImmediate, global) {;(function() {\n"use strict"\nfunction Vnode(tag, key, attrs0, children, text, dom) {\n\treturn {tag: tag, key: key, attrs: attrs0, children: children, text: text, dom: dom, domSize: undefined, state: undefined, _state: undefined, events: undefined, instance: undefined, skip: false}\n}\nVnode.normalize = function(node) {\n\tif (Array.isArray(node)) return Vnode("[", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)\n\tif (node != null && typeof node !== "object") return Vnode("#", undefined, undefined, node === false ? "" : node, undefined, undefined)\n\treturn node\n}\nVnode.normalizeChildren = function normalizeChildren(children) {\n\tfor (var i = 0; i < children.length; i++) {\n\t\tchildren[i] = Vnode.normalize(children[i])\n\t}\n\treturn children\n}\nvar selectorParser = /(?:(^|#|\\.)([^#\\.\\[\\]]+))|(\\[(.+?)(?:\\s*=\\s*("|\'|)((?:\\\\["\'\\]]|.)*?)\\5)?\\])/g\nvar selectorCache = {}\nvar hasOwn = {}.hasOwnProperty\nfunction isEmpty(object) {\n\tfor (var key in object) if (hasOwn.call(object, key)) return false\n\treturn true\n}\nfunction compileSelector(selector) {\n\tvar match, tag = "div", classes = [], attrs = {}\n\twhile (match = selectorParser.exec(selector)) {\n\t\tvar type = match[1], value = match[2]\n\t\tif (type === "" && value !== "") tag = value\n\t\telse if (type === "#") attrs.id = value\n\t\telse if (type === ".") classes.push(value)\n\t\telse if (match[3][0] === "[") {\n\t\t\tvar attrValue = match[6]\n\t\t\tif (attrValue) attrValue = attrValue.replace(/\\\\(["\'])/g, "$1").replace(/\\\\\\\\/g, "\\\\")\n\t\t\tif (match[4] === "class") classes.push(attrValue)\n\t\t\telse attrs[match[4]] = attrValue === "" ? attrValue : attrValue || true\n\t\t}\n\t}\n\tif (classes.length > 0) attrs.className = classes.join(" ")\n\treturn selectorCache[selector] = {tag: tag, attrs: attrs}\n}\nfunction execSelector(state, attrs, children) {\n\tvar hasAttrs = false, childList, text\n\tvar className = attrs.className || attrs.class\n\tif (!isEmpty(state.attrs) && !isEmpty(attrs)) {\n\t\tvar newAttrs = {}\n\t\tfor(var key in attrs) {\n\t\t\tif (hasOwn.call(attrs, key)) {\n\t\t\t\tnewAttrs[key] = attrs[key]\n\t\t\t}\n\t\t}\n\t\tattrs = newAttrs\n\t}\n\tfor (var key in state.attrs) {\n\t\tif (hasOwn.call(state.attrs, key)) {\n\t\t\tattrs[key] = state.attrs[key]\n\t\t}\n\t}\n\tif (className !== undefined) {\n\t\tif (attrs.class !== undefined) {\n\t\t\tattrs.class = undefined\n\t\t\tattrs.className = className\n\t\t}\n\t\tif (state.attrs.className != null) {\n\t\t\tattrs.className = state.attrs.className + " " + className\n\t\t}\n\t}\n\tfor (var key in attrs) {\n\t\tif (hasOwn.call(attrs, key) && key !== "key") {\n\t\t\thasAttrs = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif (Array.isArray(children) && children.length === 1 && children[0] != null && children[0].tag === "#") {\n\t\ttext = children[0].children\n\t} else {\n\t\tchildList = children\n\t}\n\treturn Vnode(state.tag, attrs.key, hasAttrs ? attrs : undefined, childList, text)\n}\nfunction hyperscript(selector) {\n\t// Because sloppy mode sucks\n\tvar attrs = arguments[1], start = 2, children\n\tif (selector == null || typeof selector !== "string" && typeof selector !== "function" && typeof selector.view !== "function") {\n\t\tthrow Error("The selector must be either a string or a component.");\n\t}\n\tif (typeof selector === "string") {\n\t\tvar cached = selectorCache[selector] || compileSelector(selector)\n\t}\n\tif (attrs == null) {\n\t\tattrs = {}\n\t} else if (typeof attrs !== "object" || attrs.tag != null || Array.isArray(attrs)) {\n\t\tattrs = {}\n\t\tstart = 1\n\t}\n\tif (arguments.length === start + 1) {\n\t\tchildren = arguments[start]\n\t\tif (!Array.isArray(children)) children = [children]\n\t} else {\n\t\tchildren = []\n\t\twhile (start < arguments.length) children.push(arguments[start++])\n\t}\n\tvar normalized = Vnode.normalizeChildren(children)\n\tif (typeof selector === "string") {\n\t\treturn execSelector(cached, attrs, normalized)\n\t} else {\n\t\treturn Vnode(selector, attrs.key, attrs, normalized)\n\t}\n}\nhyperscript.trust = function(html) {\n\tif (html == null) html = ""\n\treturn Vnode("<", undefined, undefined, html, undefined, undefined)\n}\nhyperscript.fragment = function(attrs1, children) {\n\treturn Vnode("[", attrs1.key, attrs1, Vnode.normalizeChildren(children), undefined, undefined)\n}\nvar m = hyperscript\n/** @constructor */\nvar PromisePolyfill = function(executor) {\n\tif (!(this instanceof PromisePolyfill)) throw new Error("Promise must be called with `new`")\n\tif (typeof executor !== "function") throw new TypeError("executor must be a function")\n\tvar self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false)\n\tvar instance = self._instance = {resolvers: resolvers, rejectors: rejectors}\n\tvar callAsync = typeof setImmediate === "function" ? setImmediate : setTimeout\n\tfunction handler(list, shouldAbsorb) {\n\t\treturn function execute(value) {\n\t\t\tvar then\n\t\t\ttry {\n\t\t\t\tif (shouldAbsorb && value != null && (typeof value === "object" || typeof value === "function") && typeof (then = value.then) === "function") {\n\t\t\t\t\tif (value === self) throw new TypeError("Promise can\'t be resolved w/ itself")\n\t\t\t\t\texecuteOnce(then.bind(value))\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallAsync(function() {\n\t\t\t\t\t\tif (!shouldAbsorb && list.length === 0) console.error("Possible unhandled promise rejection:", value)\n\t\t\t\t\t\tfor (var i = 0; i < list.length; i++) list[i](value)\n\t\t\t\t\t\tresolvers.length = 0, rejectors.length = 0\n\t\t\t\t\t\tinstance.state = shouldAbsorb\n\t\t\t\t\t\tinstance.retry = function() {execute(value)}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\trejectCurrent(e)\n\t\t\t}\n\t\t}\n\t}\n\tfunction executeOnce(then) {\n\t\tvar runs = 0\n\t\tfunction run(fn) {\n\t\t\treturn function(value) {\n\t\t\t\tif (runs++ > 0) return\n\t\t\t\tfn(value)\n\t\t\t}\n\t\t}\n\t\tvar onerror = run(rejectCurrent)\n\t\ttry {then(run(resolveCurrent), onerror)} catch (e) {onerror(e)}\n\t}\n\texecuteOnce(executor)\n}\nPromisePolyfill.prototype.then = function(onFulfilled, onRejection) {\n\tvar self = this, instance = self._instance\n\tfunction handle(callback, list, next, state) {\n\t\tlist.push(function(value) {\n\t\t\tif (typeof callback !== "function") next(value)\n\t\t\telse try {resolveNext(callback(value))} catch (e) {if (rejectNext) rejectNext(e)}\n\t\t})\n\t\tif (typeof instance.retry === "function" && state === instance.state) instance.retry()\n\t}\n\tvar resolveNext, rejectNext\n\tvar promise = new PromisePolyfill(function(resolve, reject) {resolveNext = resolve, rejectNext = reject})\n\thandle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false)\n\treturn promise\n}\nPromisePolyfill.prototype.catch = function(onRejection) {\n\treturn this.then(null, onRejection)\n}\nPromisePolyfill.resolve = function(value) {\n\tif (value instanceof PromisePolyfill) return value\n\treturn new PromisePolyfill(function(resolve) {resolve(value)})\n}\nPromisePolyfill.reject = function(value) {\n\treturn new PromisePolyfill(function(resolve, reject) {reject(value)})\n}\nPromisePolyfill.all = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tvar total = list.length, count = 0, values = []\n\t\tif (list.length === 0) resolve([])\n\t\telse for (var i = 0; i < list.length; i++) {\n\t\t\t(function(i) {\n\t\t\t\tfunction consume(value) {\n\t\t\t\t\tcount++\n\t\t\t\t\tvalues[i] = value\n\t\t\t\t\tif (count === total) resolve(values)\n\t\t\t\t}\n\t\t\t\tif (list[i] != null && (typeof list[i] === "object" || typeof list[i] === "function") && typeof list[i].then === "function") {\n\t\t\t\t\tlist[i].then(consume, reject)\n\t\t\t\t}\n\t\t\t\telse consume(list[i])\n\t\t\t})(i)\n\t\t}\n\t})\n}\nPromisePolyfill.race = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tlist[i].then(resolve, reject)\n\t\t}\n\t})\n}\nif (typeof window !== "undefined") {\n\tif (typeof window.Promise === "undefined") window.Promise = PromisePolyfill\n\tvar PromisePolyfill = window.Promise\n} else if (typeof global !== "undefined") {\n\tif (typeof global.Promise === "undefined") global.Promise = PromisePolyfill\n\tvar PromisePolyfill = global.Promise\n} else {\n}\nvar buildQueryString = function(object) {\n\tif (Object.prototype.toString.call(object) !== "[object Object]") return ""\n\tvar args = []\n\tfor (var key0 in object) {\n\t\tdestructure(key0, object[key0])\n\t}\n\treturn args.join("&")\n\tfunction destructure(key0, value) {\n\t\tif (Array.isArray(value)) {\n\t\t\tfor (var i = 0; i < value.length; i++) {\n\t\t\t\tdestructure(key0 + "[" + i + "]", value[i])\n\t\t\t}\n\t\t}\n\t\telse if (Object.prototype.toString.call(value) === "[object Object]") {\n\t\t\tfor (var i in value) {\n\t\t\t\tdestructure(key0 + "[" + i + "]", value[i])\n\t\t\t}\n\t\t}\n\t\telse args.push(encodeURIComponent(key0) + (value != null && value !== "" ? "=" + encodeURIComponent(value) : ""))\n\t}\n}\nvar FILE_PROTOCOL_REGEX = new RegExp("^file://", "i")\nvar _8 = function($window, Promise) {\n\tvar callbackCount = 0\n\tvar oncompletion\n\tfunction setCompletionCallback(callback) {oncompletion = callback}\n\tfunction finalizer() {\n\t\tvar count = 0\n\t\tfunction complete() {if (--count === 0 && typeof oncompletion === "function") oncompletion()}\n\t\treturn function finalize(promise0) {\n\t\t\tvar then0 = promise0.then\n\t\t\tpromise0.then = function() {\n\t\t\t\tcount++\n\t\t\t\tvar next = then0.apply(promise0, arguments)\n\t\t\t\tnext.then(complete, function(e) {\n\t\t\t\t\tcomplete()\n\t\t\t\t\tif (count === 0) throw e\n\t\t\t\t})\n\t\t\t\treturn finalize(next)\n\t\t\t}\n\t\t\treturn promise0\n\t\t}\n\t}\n\tfunction normalize(args, extra) {\n\t\tif (typeof args === "string") {\n\t\t\tvar url = args\n\t\t\targs = extra || {}\n\t\t\tif (args.url == null) args.url = url\n\t\t}\n\t\treturn args\n\t}\n\tfunction request(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tif (args.method == null) args.method = "GET"\n\t\t\targs.method = args.method.toUpperCase()\n\t\t\tvar useBody = (args.method === "GET" || args.method === "TRACE") ? false : (typeof args.useBody === "boolean" ? args.useBody : true)\n\t\t\tif (typeof args.serialize !== "function") args.serialize = typeof FormData !== "undefined" && args.data instanceof FormData ? function(value) {return value} : JSON.stringify\n\t\t\tif (typeof args.deserialize !== "function") args.deserialize = deserialize\n\t\t\tif (typeof args.extract !== "function") args.extract = extract\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\tif (useBody) args.data = args.serialize(args.data)\n\t\t\telse args.url = assemble(args.url, args.data)\n\t\t\tvar xhr = new $window.XMLHttpRequest(),\n\t\t\t\taborted = false,\n\t\t\t\t_abort = xhr.abort\n\t\t\txhr.abort = function abort() {\n\t\t\t\taborted = true\n\t\t\t\t_abort.call(xhr)\n\t\t\t}\n\t\t\txhr.open(args.method, args.url, typeof args.async === "boolean" ? args.async : true, typeof args.user === "string" ? args.user : undefined, typeof args.password === "string" ? args.password : undefined)\n\t\t\tif (args.serialize === JSON.stringify && useBody && !(args.headers && args.headers.hasOwnProperty("Content-Type"))) {\n\t\t\t\txhr.setRequestHeader("Content-Type", "application/json; charset=utf-8")\n\t\t\t}\n\t\t\tif (args.deserialize === deserialize && !(args.headers && args.headers.hasOwnProperty("Accept"))) {\n\t\t\t\txhr.setRequestHeader("Accept", "application/json, text/*")\n\t\t\t}\n\t\t\tif (args.withCredentials) xhr.withCredentials = args.withCredentials\n\t\t\tfor (var key in args.headers) if ({}.hasOwnProperty.call(args.headers, key)) {\n\t\t\t\txhr.setRequestHeader(key, args.headers[key])\n\t\t\t}\n\t\t\tif (typeof args.config === "function") xhr = args.config(xhr, args) || xhr\n\t\t\txhr.onreadystatechange = function() {\n\t\t\t\t// Don\'t throw errors on xhr.abort().\n\t\t\t\tif(aborted) return\n\t\t\t\tif (xhr.readyState === 4) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar response = (args.extract !== extract) ? args.extract(xhr, args) : args.deserialize(args.extract(xhr, args))\n\t\t\t\t\t\tif ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304 || FILE_PROTOCOL_REGEX.test(args.url)) {\n\t\t\t\t\t\t\tresolve(cast(args.type, response))\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar error = new Error(xhr.responseText)\n\t\t\t\t\t\t\tfor (var key in response) error[key] = response[key]\n\t\t\t\t\t\t\treject(error)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\treject(e)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (useBody && (args.data != null)) xhr.send(args.data)\n\t\t\telse xhr.send()\n\t\t})\n\t\treturn args.background === true ? promise0 : finalize(promise0)\n\t}\n\tfunction jsonp(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tvar callbackName = args.callbackName || "_mithril_" + Math.round(Math.random() * 1e16) + "_" + callbackCount++\n\t\t\tvar script = $window.document.createElement("script")\n\t\t\t$window[callbackName] = function(data) {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\tresolve(cast(args.type, data))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tscript.onerror = function() {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\treject(new Error("JSONP request failed"))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tif (args.data == null) args.data = {}\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\targs.data[args.callbackKey || "callback"] = callbackName\n\t\t\tscript.src = assemble(args.url, args.data)\n\t\t\t$window.document.documentElement.appendChild(script)\n\t\t})\n\t\treturn args.background === true? promise0 : finalize(promise0)\n\t}\n\tfunction interpolate(url, data) {\n\t\tif (data == null) return url\n\t\tvar tokens = url.match(/:[^\\/]+/gi) || []\n\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\tvar key = tokens[i].slice(1)\n\t\t\tif (data[key] != null) {\n\t\t\t\turl = url.replace(tokens[i], data[key])\n\t\t\t}\n\t\t}\n\t\treturn url\n\t}\n\tfunction assemble(url, data) {\n\t\tvar querystring = buildQueryString(data)\n\t\tif (querystring !== "") {\n\t\t\tvar prefix = url.indexOf("?") < 0 ? "?" : "&"\n\t\t\turl += prefix + querystring\n\t\t}\n\t\treturn url\n\t}\n\tfunction deserialize(data) {\n\t\ttry {return data !== "" ? JSON.parse(data) : null}\n\t\tcatch (e) {throw new Error(data)}\n\t}\n\tfunction extract(xhr) {return xhr.responseText}\n\tfunction cast(type0, data) {\n\t\tif (typeof type0 === "function") {\n\t\t\tif (Array.isArray(data)) {\n\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\tdata[i] = new type0(data[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\telse return new type0(data)\n\t\t}\n\t\treturn data\n\t}\n\treturn {request: request, jsonp: jsonp, setCompletionCallback: setCompletionCallback}\n}\nvar requestService = _8(window, PromisePolyfill)\nvar coreRenderer = function($window) {\n\tvar $doc = $window.document\n\tvar $emptyFragment = $doc.createDocumentFragment()\n\tvar nameSpace = {\n\t\tsvg: "http://www.w3.org/2000/svg",\n\t\tmath: "http://www.w3.org/1998/Math/MathML"\n\t}\n\tvar onevent\n\tfunction setEventCallback(callback) {return onevent = callback}\n\tfunction getNameSpace(vnode) {\n\t\treturn vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag]\n\t}\n\t//create\n\tfunction createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t}\n\tfunction createNode(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tif (typeof tag === "string") {\n\t\t\tvnode.state = {}\n\t\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tswitch (tag) {\n\t\t\t\tcase "#": return createText(parent, vnode, nextSibling)\n\t\t\t\tcase "<": return createHTML(parent, vnode, nextSibling)\n\t\t\t\tcase "[": return createFragment(parent, vnode, hooks, ns, nextSibling)\n\t\t\t\tdefault: return createElement(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t\telse return createComponent(parent, vnode, hooks, ns, nextSibling)\n\t}\n\tfunction createText(parent, vnode, nextSibling) {\n\t\tvnode.dom = $doc.createTextNode(vnode.children)\n\t\tinsertNode(parent, vnode.dom, nextSibling)\n\t\treturn vnode.dom\n\t}\n\tfunction createHTML(parent, vnode, nextSibling) {\n\t\tvar match1 = vnode.children.match(/^\\s*?<(\\w+)/im) || []\n\t\tvar parent1 = {caption: "table", thead: "table", tbody: "table", tfoot: "table", tr: "tbody", th: "tr", td: "tr", colgroup: "table", col: "colgroup"}[match1[1]] || "div"\n\t\tvar temp = $doc.createElement(parent1)\n\t\ttemp.innerHTML = vnode.children\n\t\tvnode.dom = temp.firstChild\n\t\tvnode.domSize = temp.childNodes.length\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tvar child\n\t\twhile (child = temp.firstChild) {\n\t\t\tfragment.appendChild(child)\n\t\t}\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createFragment(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tif (vnode.children != null) {\n\t\t\tvar children = vnode.children\n\t\t\tcreateNodes(fragment, children, 0, children.length, hooks, null, ns)\n\t\t}\n\t\tvnode.dom = fragment.firstChild\n\t\tvnode.domSize = fragment.childNodes.length\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createElement(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tvar attrs2 = vnode.attrs\n\t\tvar is = attrs2 && attrs2.is\n\t\tns = getNameSpace(vnode) || ns\n\t\tvar element = ns ?\n\t\t\tis ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :\n\t\t\tis ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)\n\t\tvnode.dom = element\n\t\tif (attrs2 != null) {\n\t\t\tsetAttrs(vnode, attrs2, ns)\n\t\t}\n\t\tinsertNode(parent, element, nextSibling)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse {\n\t\t\tif (vnode.text != null) {\n\t\t\t\tif (vnode.text !== "") element.textContent = vnode.text\n\t\t\t\telse vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\t}\n\t\t\tif (vnode.children != null) {\n\t\t\t\tvar children = vnode.children\n\t\t\t\tcreateNodes(element, children, 0, children.length, hooks, null, ns)\n\t\t\t\tsetLateAttrs(vnode)\n\t\t\t}\n\t\t}\n\t\treturn element\n\t}\n\tfunction initComponent(vnode, hooks) {\n\t\tvar sentinel\n\t\tif (typeof vnode.tag.view === "function") {\n\t\t\tvnode.state = Object.create(vnode.tag)\n\t\t\tsentinel = vnode.state.view\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t} else {\n\t\t\tvnode.state = void 0\n\t\t\tsentinel = vnode.tag\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t\tvnode.state = (vnode.tag.prototype != null && typeof vnode.tag.prototype.view === "function") ? new vnode.tag(vnode) : vnode.tag(vnode)\n\t\t}\n\t\tvnode._state = vnode.state\n\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\tinitLifecycle(vnode._state, vnode, hooks)\n\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\tif (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")\n\t\tsentinel.$$reentrantLock$$ = null\n\t}\n\tfunction createComponent(parent, vnode, hooks, ns, nextSibling) {\n\t\tinitComponent(vnode, hooks)\n\t\tif (vnode.instance != null) {\n\t\t\tvar element = createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0\n\t\t\tinsertNode(parent, element, nextSibling)\n\t\t\treturn element\n\t\t}\n\t\telse {\n\t\t\tvnode.domSize = 0\n\t\t\treturn $emptyFragment\n\t\t}\n\t}\n\t//update\n\tfunction updateNodes(parent, old, vnodes, recycling, hooks, nextSibling, ns) {\n\t\tif (old === vnodes || old == null && vnodes == null) return\n\t\telse if (old == null) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns)\n\t\telse if (vnodes == null) removeNodes(old, 0, old.length, vnodes)\n\t\telse {\n\t\t\tif (old.length === vnodes.length) {\n\t\t\t\tvar isUnkeyed = false\n\t\t\t\tfor (var i = 0; i < vnodes.length; i++) {\n\t\t\t\t\tif (vnodes[i] != null && old[i] != null) {\n\t\t\t\t\t\tisUnkeyed = vnodes[i].key == null && old[i].key == null\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isUnkeyed) {\n\t\t\t\t\tfor (var i = 0; i < old.length; i++) {\n\t\t\t\t\t\tif (old[i] === vnodes[i]) continue\n\t\t\t\t\t\telse if (old[i] == null && vnodes[i] != null) createNode(parent, vnodes[i], hooks, ns, getNextSibling(old, i + 1, nextSibling))\n\t\t\t\t\t\telse if (vnodes[i] == null) removeNodes(old, i, i + 1, vnodes)\n\t\t\t\t\t\telse updateNode(parent, old[i], vnodes[i], hooks, getNextSibling(old, i + 1, nextSibling), recycling, ns)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\trecycling = recycling || isRecyclable(old, vnodes)\n\t\t\tif (recycling) {\n\t\t\t\tvar pool = old.pool\n\t\t\t\told = old.concat(old.pool)\n\t\t\t}\n\t\t\tvar oldStart = 0, start = 0, oldEnd = old.length - 1, end = vnodes.length - 1, map\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldStart], v = vnodes[start]\n\t\t\t\tif (o === v && !recycling) oldStart++, start++\n\t\t\t\telse if (o == null) oldStart++\n\t\t\t\telse if (v == null) start++\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldStart >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\toldStart++, start++\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar o = old[oldEnd]\n\t\t\t\t\tif (o === v && !recycling) oldEnd--, start++\n\t\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\t\telse if (v == null) start++\n\t\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\t\tif (recycling || start < end) insertNode(parent, toFragment(o), getNextSibling(old, oldStart, nextSibling))\n\t\t\t\t\t\toldEnd--, start++\n\t\t\t\t\t}\n\t\t\t\t\telse break\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldEnd], v = vnodes[end]\n\t\t\t\tif (o === v && !recycling) oldEnd--, end--\n\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\telse if (v == null) end--\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t\tif (o.dom != null) nextSibling = o.dom\n\t\t\t\t\toldEnd--, end--\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!map) map = getKeyMap(old, oldEnd)\n\t\t\t\t\tif (v != null) {\n\t\t\t\t\t\tvar oldIndex = map[v.key]\n\t\t\t\t\t\tif (oldIndex != null) {\n\t\t\t\t\t\t\tvar movable = old[oldIndex]\n\t\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldIndex >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\t\tupdateNode(parent, movable, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)\n\t\t\t\t\t\t\tinsertNode(parent, toFragment(movable), nextSibling)\n\t\t\t\t\t\t\told[oldIndex].skip = true\n\t\t\t\t\t\t\tif (movable.dom != null) nextSibling = movable.dom\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar dom = createNode(parent, v, hooks, ns, nextSibling)\n\t\t\t\t\t\t\tnextSibling = dom\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tend--\n\t\t\t\t}\n\t\t\t\tif (end < start) break\n\t\t\t}\n\t\t\tcreateNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)\n\t\t\tremoveNodes(old, oldStart, oldEnd + 1, vnodes)\n\t\t}\n\t}\n\tfunction updateNode(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tvar oldTag = old.tag, tag = vnode.tag\n\t\tif (oldTag === tag) {\n\t\t\tvnode.state = old.state\n\t\t\tvnode._state = old._state\n\t\t\tvnode.events = old.events\n\t\t\tif (!recycling && shouldNotUpdate(vnode, old)) return\n\t\t\tif (typeof oldTag === "string") {\n\t\t\t\tif (vnode.attrs != null) {\n\t\t\t\t\tif (recycling) {\n\t\t\t\t\t\tvnode.state = {}\n\t\t\t\t\t\tinitLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t\t}\n\t\t\t\t\telse updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t}\n\t\t\t\tswitch (oldTag) {\n\t\t\t\t\tcase "#": updateText(old, vnode); break\n\t\t\t\t\tcase "<": updateHTML(parent, old, vnode, nextSibling); break\n\t\t\t\t\tcase "[": updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns); break\n\t\t\t\t\tdefault: updateElement(old, vnode, recycling, hooks, ns)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns)\n\t\t}\n\t\telse {\n\t\t\tremoveNode(old, null)\n\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t}\n\t}\n\tfunction updateText(old, vnode) {\n\t\tif (old.children.toString() !== vnode.children.toString()) {\n\t\t\told.dom.nodeValue = vnode.children\n\t\t}\n\t\tvnode.dom = old.dom\n\t}\n\tfunction updateHTML(parent, old, vnode, nextSibling) {\n\t\tif (old.children !== vnode.children) {\n\t\t\ttoFragment(old)\n\t\t\tcreateHTML(parent, vnode, nextSibling)\n\t\t}\n\t\telse vnode.dom = old.dom, vnode.domSize = old.domSize\n\t}\n\tfunction updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns) {\n\t\tupdateNodes(parent, old.children, vnode.children, recycling, hooks, nextSibling, ns)\n\t\tvar domSize = 0, children = vnode.children\n\t\tvnode.dom = null\n\t\tif (children != null) {\n\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\tvar child = children[i]\n\t\t\t\tif (child != null && child.dom != null) {\n\t\t\t\t\tif (vnode.dom == null) vnode.dom = child.dom\n\t\t\t\t\tdomSize += child.domSize || 1\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (domSize !== 1) vnode.domSize = domSize\n\t\t}\n\t}\n\tfunction updateElement(old, vnode, recycling, hooks, ns) {\n\t\tvar element = vnode.dom = old.dom\n\t\tns = getNameSpace(vnode) || ns\n\t\tif (vnode.tag === "textarea") {\n\t\t\tif (vnode.attrs == null) vnode.attrs = {}\n\t\t\tif (vnode.text != null) {\n\t\t\t\tvnode.attrs.value = vnode.text //FIXME handle0 multiple children\n\t\t\t\tvnode.text = undefined\n\t\t\t}\n\t\t}\n\t\tupdateAttrs(vnode, old.attrs, vnode.attrs, ns)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse if (old.text != null && vnode.text != null && vnode.text !== "") {\n\t\t\tif (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text\n\t\t}\n\t\telse {\n\t\t\tif (old.text != null) old.children = [Vnode("#", undefined, undefined, old.text, undefined, old.dom.firstChild)]\n\t\t\tif (vnode.text != null) vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\tupdateNodes(element, old.children, vnode.children, recycling, hooks, null, ns)\n\t\t}\n\t}\n\tfunction updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tif (recycling) {\n\t\t\tinitComponent(vnode, hooks)\n\t\t} else {\n\t\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\t\tif (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")\n\t\t\tif (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tupdateLifecycle(vnode._state, vnode, hooks)\n\t\t}\n\t\tif (vnode.instance != null) {\n\t\t\tif (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\telse updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, recycling, ns)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.instance.domSize\n\t\t}\n\t\telse if (old.instance != null) {\n\t\t\tremoveNode(old.instance, null)\n\t\t\tvnode.dom = undefined\n\t\t\tvnode.domSize = 0\n\t\t}\n\t\telse {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t}\n\t}\n\tfunction isRecyclable(old, vnodes) {\n\t\tif (old.pool != null && Math.abs(old.pool.length - vnodes.length) <= Math.abs(old.length - vnodes.length)) {\n\t\t\tvar oldChildrenLength = old[0] && old[0].children && old[0].children.length || 0\n\t\t\tvar poolChildrenLength = old.pool[0] && old.pool[0].children && old.pool[0].children.length || 0\n\t\t\tvar vnodesChildrenLength = vnodes[0] && vnodes[0].children && vnodes[0].children.length || 0\n\t\t\tif (Math.abs(poolChildrenLength - vnodesChildrenLength) <= Math.abs(oldChildrenLength - vnodesChildrenLength)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\tfunction getKeyMap(vnodes, end) {\n\t\tvar map = {}, i = 0\n\t\tfor (var i = 0; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tvar key2 = vnode.key\n\t\t\t\tif (key2 != null) map[key2] = i\n\t\t\t}\n\t\t}\n\t\treturn map\n\t}\n\tfunction toFragment(vnode) {\n\t\tvar count0 = vnode.domSize\n\t\tif (count0 != null || vnode.dom == null) {\n\t\t\tvar fragment = $doc.createDocumentFragment()\n\t\t\tif (count0 > 0) {\n\t\t\t\tvar dom = vnode.dom\n\t\t\t\twhile (--count0) fragment.appendChild(dom.nextSibling)\n\t\t\t\tfragment.insertBefore(dom, fragment.firstChild)\n\t\t\t}\n\t\t\treturn fragment\n\t\t}\n\t\telse return vnode.dom\n\t}\n\tfunction getNextSibling(vnodes, i, nextSibling) {\n\t\tfor (; i < vnodes.length; i++) {\n\t\t\tif (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom\n\t\t}\n\t\treturn nextSibling\n\t}\n\tfunction insertNode(parent, dom, nextSibling) {\n\t\tif (nextSibling && nextSibling.parentNode) parent.insertBefore(dom, nextSibling)\n\t\telse parent.appendChild(dom)\n\t}\n\tfunction setContentEditable(vnode) {\n\t\tvar children = vnode.children\n\t\tif (children != null && children.length === 1 && children[0].tag === "<") {\n\t\t\tvar content = children[0].children\n\t\t\tif (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content\n\t\t}\n\t\telse if (vnode.text != null || children != null && children.length !== 0) throw new Error("Child node of a contenteditable must be trusted")\n\t}\n\t//remove\n\tfunction removeNodes(vnodes, start, end, context) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tif (vnode.skip) vnode.skip = false\n\t\t\t\telse removeNode(vnode, context)\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNode(vnode, context) {\n\t\tvar expected = 1, called = 0\n\t\tif (vnode.attrs && typeof vnode.attrs.onbeforeremove === "function") {\n\t\t\tvar result = vnode.attrs.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === "function") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tif (typeof vnode.tag !== "string" && typeof vnode._state.onbeforeremove === "function") {\n\t\t\tvar result = vnode._state.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === "function") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tcontinuation()\n\t\tfunction continuation() {\n\t\t\tif (++called === expected) {\n\t\t\t\tonremove(vnode)\n\t\t\t\tif (vnode.dom) {\n\t\t\t\t\tvar count0 = vnode.domSize || 1\n\t\t\t\t\tif (count0 > 1) {\n\t\t\t\t\t\tvar dom = vnode.dom\n\t\t\t\t\t\twhile (--count0) {\n\t\t\t\t\t\t\tremoveNodeFromDOM(dom.nextSibling)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tremoveNodeFromDOM(vnode.dom)\n\t\t\t\t\tif (context != null && vnode.domSize == null && !hasIntegrationMethods(vnode.attrs) && typeof vnode.tag === "string") { //TODO test custom elements\n\t\t\t\t\t\tif (!context.pool) context.pool = [vnode]\n\t\t\t\t\t\telse context.pool.push(vnode)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNodeFromDOM(node) {\n\t\tvar parent = node.parentNode\n\t\tif (parent != null) parent.removeChild(node)\n\t}\n\tfunction onremove(vnode) {\n\t\tif (vnode.attrs && typeof vnode.attrs.onremove === "function") vnode.attrs.onremove.call(vnode.state, vnode)\n\t\tif (typeof vnode.tag !== "string") {\n\t\t\tif (typeof vnode._state.onremove === "function") vnode._state.onremove.call(vnode.state, vnode)\n\t\t\tif (vnode.instance != null) onremove(vnode.instance)\n\t\t} else {\n\t\t\tvar children = vnode.children\n\t\t\tif (Array.isArray(children)) {\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tvar child = children[i]\n\t\t\t\t\tif (child != null) onremove(child)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//attrs2\n\tfunction setAttrs(vnode, attrs2, ns) {\n\t\tfor (var key2 in attrs2) {\n\t\t\tsetAttr(vnode, key2, null, attrs2[key2], ns)\n\t\t}\n\t}\n\tfunction setAttr(vnode, key2, old, value, ns) {\n\t\tvar element = vnode.dom\n\t\tif (key2 === "key" || key2 === "is" || (old === value && !isFormAttribute(vnode, key2)) && typeof value !== "object" || typeof value === "undefined" || isLifecycleMethod(key2)) return\n\t\tvar nsLastIndex = key2.indexOf(":")\n\t\tif (nsLastIndex > -1 && key2.substr(0, nsLastIndex) === "xlink") {\n\t\t\telement.setAttributeNS("http://www.w3.org/1999/xlink", key2.slice(nsLastIndex + 1), value)\n\t\t}\n\t\telse if (key2[0] === "o" && key2[1] === "n" && typeof value === "function") updateEvent(vnode, key2, value)\n\t\telse if (key2 === "style") updateStyle(element, old, value)\n\t\telse if (key2 in element && !isAttribute(key2) && ns === undefined && !isCustomElement(vnode)) {\n\t\t\tif (key2 === "value") {\n\t\t\t\tvar normalized0 = "" + value // eslint-disable-line no-implicit-coercion\n\t\t\t\t//setting input[value] to same value by typing on focused element moves cursor to end in Chrome\n\t\t\t\tif ((vnode.tag === "input" || vnode.tag === "textarea") && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return\n\t\t\t\t//setting select[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === "select") {\n\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\tif (vnode.dom.selectedIndex === -1 && vnode.dom === $doc.activeElement) return\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (old !== null && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//setting option[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === "option" && old != null && vnode.dom.value === normalized0) return\n\t\t\t}\n\t\t\t// If you assign an input type1 that is not supported by IE 11 with an assignment expression, an error0 will occur.\n\t\t\tif (vnode.tag === "input" && key2 === "type") {\n\t\t\t\telement.setAttribute(key2, value)\n\t\t\t\treturn\n\t\t\t}\n\t\t\telement[key2] = value\n\t\t}\n\t\telse {\n\t\t\tif (typeof value === "boolean") {\n\t\t\t\tif (value) element.setAttribute(key2, "")\n\t\t\t\telse element.removeAttribute(key2)\n\t\t\t}\n\t\t\telse element.setAttribute(key2 === "className" ? "class" : key2, value)\n\t\t}\n\t}\n\tfunction setLateAttrs(vnode) {\n\t\tvar attrs2 = vnode.attrs\n\t\tif (vnode.tag === "select" && attrs2 != null) {\n\t\t\tif ("value" in attrs2) setAttr(vnode, "value", null, attrs2.value, undefined)\n\t\t\tif ("selectedIndex" in attrs2) setAttr(vnode, "selectedIndex", null, attrs2.selectedIndex, undefined)\n\t\t}\n\t}\n\tfunction updateAttrs(vnode, old, attrs2, ns) {\n\t\tif (attrs2 != null) {\n\t\t\tfor (var key2 in attrs2) {\n\t\t\t\tsetAttr(vnode, key2, old && old[key2], attrs2[key2], ns)\n\t\t\t}\n\t\t}\n\t\tif (old != null) {\n\t\t\tfor (var key2 in old) {\n\t\t\t\tif (attrs2 == null || !(key2 in attrs2)) {\n\t\t\t\t\tif (key2 === "className") key2 = "class"\n\t\t\t\t\tif (key2[0] === "o" && key2[1] === "n" && !isLifecycleMethod(key2)) updateEvent(vnode, key2, undefined)\n\t\t\t\t\telse if (key2 !== "key") vnode.dom.removeAttribute(key2)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction isFormAttribute(vnode, attr) {\n\t\treturn attr === "value" || attr === "checked" || attr === "selectedIndex" || attr === "selected" && vnode.dom === $doc.activeElement\n\t}\n\tfunction isLifecycleMethod(attr) {\n\t\treturn attr === "oninit" || attr === "oncreate" || attr === "onupdate" || attr === "onremove" || attr === "onbeforeremove" || attr === "onbeforeupdate"\n\t}\n\tfunction isAttribute(attr) {\n\t\treturn attr === "href" || attr === "list" || attr === "form" || attr === "width" || attr === "height"// || attr === "type"\n\t}\n\tfunction isCustomElement(vnode){\n\t\treturn vnode.attrs.is || vnode.tag.indexOf("-") > -1\n\t}\n\tfunction hasIntegrationMethods(source) {\n\t\treturn source != null && (source.oncreate || source.onupdate || source.onbeforeremove || source.onremove)\n\t}\n\t//style\n\tfunction updateStyle(element, old, style) {\n\t\tif (old === style) element.style.cssText = "", old = null\n\t\tif (style == null) element.style.cssText = ""\n\t\telse if (typeof style === "string") element.style.cssText = style\n\t\telse {\n\t\t\tif (typeof old === "string") element.style.cssText = ""\n\t\t\tfor (var key2 in style) {\n\t\t\t\telement.style[key2] = style[key2]\n\t\t\t}\n\t\t\tif (old != null && typeof old !== "string") {\n\t\t\t\tfor (var key2 in old) {\n\t\t\t\t\tif (!(key2 in style)) element.style[key2] = ""\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//event\n\tfunction updateEvent(vnode, key2, value) {\n\t\tvar element = vnode.dom\n\t\tvar callback = typeof onevent !== "function" ? value : function(e) {\n\t\t\tvar result = value.call(element, e)\n\t\t\tonevent.call(element, e)\n\t\t\treturn result\n\t\t}\n\t\tif (key2 in element) element[key2] = typeof value === "function" ? callback : null\n\t\telse {\n\t\t\tvar eventName = key2.slice(2)\n\t\t\tif (vnode.events === undefined) vnode.events = {}\n\t\t\tif (vnode.events[key2] === callback) return\n\t\t\tif (vnode.events[key2] != null) element.removeEventListener(eventName, vnode.events[key2], false)\n\t\t\tif (typeof value === "function") {\n\t\t\t\tvnode.events[key2] = callback\n\t\t\t\telement.addEventListener(eventName, vnode.events[key2], false)\n\t\t\t}\n\t\t}\n\t}\n\t//lifecycle\n\tfunction initLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.oninit === "function") source.oninit.call(vnode.state, vnode)\n\t\tif (typeof source.oncreate === "function") hooks.push(source.oncreate.bind(vnode.state, vnode))\n\t}\n\tfunction updateLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.onupdate === "function") hooks.push(source.onupdate.bind(vnode.state, vnode))\n\t}\n\tfunction shouldNotUpdate(vnode, old) {\n\t\tvar forceVnodeUpdate, forceComponentUpdate\n\t\tif (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === "function") forceVnodeUpdate = vnode.attrs.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (typeof vnode.tag !== "string" && typeof vnode._state.onbeforeupdate === "function") forceComponentUpdate = vnode._state.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (!(forceVnodeUpdate === undefined && forceComponentUpdate === undefined) && !forceVnodeUpdate && !forceComponentUpdate) {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t\tvnode.instance = old.instance\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\tfunction render(dom, vnodes) {\n\t\tif (!dom) throw new Error("Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.")\n\t\tvar hooks = []\n\t\tvar active = $doc.activeElement\n\t\tvar namespace = dom.namespaceURI\n\t\t// First time0 rendering into a node clears it out\n\t\tif (dom.vnodes == null) dom.textContent = ""\n\t\tif (!Array.isArray(vnodes)) vnodes = [vnodes]\n\t\tupdateNodes(dom, dom.vnodes, Vnode.normalizeChildren(vnodes), false, hooks, null, namespace === "http://www.w3.org/1999/xhtml" ? undefined : namespace)\n\t\tdom.vnodes = vnodes\n\t\t// document.activeElement can return null in IE https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement\n\t\tif (active != null && $doc.activeElement !== active) active.focus()\n\t\tfor (var i = 0; i < hooks.length; i++) hooks[i]()\n\t}\n\treturn {render: render, setEventCallback: setEventCallback}\n}\nfunction throttle(callback) {\n\t//60fps translates to 16.6ms, round it down since setTimeout requires int\n\tvar time = 16\n\tvar last = 0, pending = null\n\tvar timeout = typeof requestAnimationFrame === "function" ? requestAnimationFrame : setTimeout\n\treturn function() {\n\t\tvar now = Date.now()\n\t\tif (last === 0 || now - last >= time) {\n\t\t\tlast = now\n\t\t\tcallback()\n\t\t}\n\t\telse if (pending === null) {\n\t\t\tpending = timeout(function() {\n\t\t\t\tpending = null\n\t\t\t\tcallback()\n\t\t\t\tlast = Date.now()\n\t\t\t}, time - (now - last))\n\t\t}\n\t}\n}\nvar _11 = function($window) {\n\tvar renderService = coreRenderer($window)\n\trenderService.setEventCallback(function(e) {\n\t\tif (e.redraw === false) e.redraw = undefined\n\t\telse redraw()\n\t})\n\tvar callbacks = []\n\tfunction subscribe(key1, callback) {\n\t\tunsubscribe(key1)\n\t\tcallbacks.push(key1, throttle(callback))\n\t}\n\tfunction unsubscribe(key1) {\n\t\tvar index = callbacks.indexOf(key1)\n\t\tif (index > -1) callbacks.splice(index, 2)\n\t}\n\tfunction redraw() {\n\t\tfor (var i = 1; i < callbacks.length; i += 2) {\n\t\t\tcallbacks[i]()\n\t\t}\n\t}\n\treturn {subscribe: subscribe, unsubscribe: unsubscribe, redraw: redraw, render: renderService.render}\n}\nvar redrawService = _11(window)\nrequestService.setCompletionCallback(redrawService.redraw)\nvar _16 = function(redrawService0) {\n\treturn function(root, component) {\n\t\tif (component === null) {\n\t\t\tredrawService0.render(root, [])\n\t\t\tredrawService0.unsubscribe(root)\n\t\t\treturn\n\t\t}\n\t\t\n\t\tif (component.view == null && typeof component !== "function") throw new Error("m.mount(element, component) expects a component, not a vnode")\n\t\t\n\t\tvar run0 = function() {\n\t\t\tredrawService0.render(root, Vnode(component))\n\t\t}\n\t\tredrawService0.subscribe(root, run0)\n\t\tredrawService0.redraw()\n\t}\n}\nm.mount = _16(redrawService)\nvar Promise = PromisePolyfill\nvar parseQueryString = function(string) {\n\tif (string === "" || string == null) return {}\n\tif (string.charAt(0) === "?") string = string.slice(1)\n\tvar entries = string.split("&"), data0 = {}, counters = {}\n\tfor (var i = 0; i < entries.length; i++) {\n\t\tvar entry = entries[i].split("=")\n\t\tvar key5 = decodeURIComponent(entry[0])\n\t\tvar value = entry.length === 2 ? decodeURIComponent(entry[1]) : ""\n\t\tif (value === "true") value = true\n\t\telse if (value === "false") value = false\n\t\tvar levels = key5.split(/\\]\\[?|\\[/)\n\t\tvar cursor = data0\n\t\tif (key5.indexOf("[") > -1) levels.pop()\n\t\tfor (var j = 0; j < levels.length; j++) {\n\t\t\tvar level = levels[j], nextLevel = levels[j + 1]\n\t\t\tvar isNumber = nextLevel == "" || !isNaN(parseInt(nextLevel, 10))\n\t\t\tvar isValue = j === levels.length - 1\n\t\t\tif (level === "") {\n\t\t\t\tvar key5 = levels.slice(0, j).join()\n\t\t\t\tif (counters[key5] == null) counters[key5] = 0\n\t\t\t\tlevel = counters[key5]++\n\t\t\t}\n\t\t\tif (cursor[level] == null) {\n\t\t\t\tcursor[level] = isValue ? value : isNumber ? [] : {}\n\t\t\t}\n\t\t\tcursor = cursor[level]\n\t\t}\n\t}\n\treturn data0\n}\nvar coreRouter = function($window) {\n\tvar supportsPushState = typeof $window.history.pushState === "function"\n\tvar callAsync0 = typeof setImmediate === "function" ? setImmediate : setTimeout\n\tfunction normalize1(fragment0) {\n\t\tvar data = $window.location[fragment0].replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent)\n\t\tif (fragment0 === "pathname" && data[0] !== "/") data = "/" + data\n\t\treturn data\n\t}\n\tvar asyncId\n\tfunction debounceAsync(callback0) {\n\t\treturn function() {\n\t\t\tif (asyncId != null) return\n\t\t\tasyncId = callAsync0(function() {\n\t\t\t\tasyncId = null\n\t\t\t\tcallback0()\n\t\t\t})\n\t\t}\n\t}\n\tfunction parsePath(path, queryData, hashData) {\n\t\tvar queryIndex = path.indexOf("?")\n\t\tvar hashIndex = path.indexOf("#")\n\t\tvar pathEnd = queryIndex > -1 ? queryIndex : hashIndex > -1 ? hashIndex : path.length\n\t\tif (queryIndex > -1) {\n\t\t\tvar queryEnd = hashIndex > -1 ? hashIndex : path.length\n\t\t\tvar queryParams = parseQueryString(path.slice(queryIndex + 1, queryEnd))\n\t\t\tfor (var key4 in queryParams) queryData[key4] = queryParams[key4]\n\t\t}\n\t\tif (hashIndex > -1) {\n\t\t\tvar hashParams = parseQueryString(path.slice(hashIndex + 1))\n\t\t\tfor (var key4 in hashParams) hashData[key4] = hashParams[key4]\n\t\t}\n\t\treturn path.slice(0, pathEnd)\n\t}\n\tvar router = {prefix: "#!"}\n\trouter.getPath = function() {\n\t\tvar type2 = router.prefix.charAt(0)\n\t\tswitch (type2) {\n\t\t\tcase "#": return normalize1("hash").slice(router.prefix.length)\n\t\t\tcase "?": return normalize1("search").slice(router.prefix.length) + normalize1("hash")\n\t\t\tdefault: return normalize1("pathname").slice(router.prefix.length) + normalize1("search") + normalize1("hash")\n\t\t}\n\t}\n\trouter.setPath = function(path, data, options) {\n\t\tvar queryData = {}, hashData = {}\n\t\tpath = parsePath(path, queryData, hashData)\n\t\tif (data != null) {\n\t\t\tfor (var key4 in data) queryData[key4] = data[key4]\n\t\t\tpath = path.replace(/:([^\\/]+)/g, function(match2, token) {\n\t\t\t\tdelete queryData[token]\n\t\t\t\treturn data[token]\n\t\t\t})\n\t\t}\n\t\tvar query = buildQueryString(queryData)\n\t\tif (query) path += "?" + query\n\t\tvar hash = buildQueryString(hashData)\n\t\tif (hash) path += "#" + hash\n\t\tif (supportsPushState) {\n\t\t\tvar state = options ? options.state : null\n\t\t\tvar title = options ? options.title : null\n\t\t\t$window.onpopstate()\n\t\t\tif (options && options.replace) $window.history.replaceState(state, title, router.prefix + path)\n\t\t\telse $window.history.pushState(state, title, router.prefix + path)\n\t\t}\n\t\telse $window.location.href = router.prefix + path\n\t}\n\trouter.defineRoutes = function(routes, resolve, reject) {\n\t\tfunction resolveRoute() {\n\t\t\tvar path = router.getPath()\n\t\t\tvar params = {}\n\t\t\tvar pathname = parsePath(path, params, params)\n\t\t\tvar state = $window.history.state\n\t\t\tif (state != null) {\n\t\t\t\tfor (var k in state) params[k] = state[k]\n\t\t\t}\n\t\t\tfor (var route0 in routes) {\n\t\t\t\tvar matcher = new RegExp("^" + route0.replace(/:[^\\/]+?\\.{3}/g, "(.*?)").replace(/:[^\\/]+/g, "([^\\\\/]+)") + "\\/?$")\n\t\t\t\tif (matcher.test(pathname)) {\n\t\t\t\t\tpathname.replace(matcher, function() {\n\t\t\t\t\t\tvar keys = route0.match(/:[^\\/]+/g) || []\n\t\t\t\t\t\tvar values = [].slice.call(arguments, 1, -2)\n\t\t\t\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\t\t\t\tparams[keys[i].replace(/:|\\./g, "")] = decodeURIComponent(values[i])\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(routes[route0], params, path, route0)\n\t\t\t\t\t})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\treject(path, params)\n\t\t}\n\t\tif (supportsPushState) $window.onpopstate = debounceAsync(resolveRoute)\n\t\telse if (router.prefix.charAt(0) === "#") $window.onhashchange = resolveRoute\n\t\tresolveRoute()\n\t}\n\treturn router\n}\nvar _20 = function($window, redrawService0) {\n\tvar routeService = coreRouter($window)\n\tvar identity = function(v) {return v}\n\tvar render1, component, attrs3, currentPath, lastUpdate\n\tvar route = function(root, defaultRoute, routes) {\n\t\tif (root == null) throw new Error("Ensure the DOM element that was passed to `m.route` is not undefined")\n\t\tvar run1 = function() {\n\t\t\tif (render1 != null) redrawService0.render(root, render1(Vnode(component, attrs3.key, attrs3)))\n\t\t}\n\t\tvar bail = function(path) {\n\t\t\tif (path !== defaultRoute) routeService.setPath(defaultRoute, null, {replace: true})\n\t\t\telse throw new Error("Could not resolve default route " + defaultRoute)\n\t\t}\n\t\trouteService.defineRoutes(routes, function(payload, params, path) {\n\t\t\tvar update = lastUpdate = function(routeResolver, comp) {\n\t\t\t\tif (update !== lastUpdate) return\n\t\t\t\tcomponent = comp != null && (typeof comp.view === "function" || typeof comp === "function")? comp : "div"\n\t\t\t\tattrs3 = params, currentPath = path, lastUpdate = null\n\t\t\t\trender1 = (routeResolver.render || identity).bind(routeResolver)\n\t\t\t\trun1()\n\t\t\t}\n\t\t\tif (payload.view || typeof payload === "function") update({}, payload)\n\t\t\telse {\n\t\t\t\tif (payload.onmatch) {\n\t\t\t\t\tPromise.resolve(payload.onmatch(params, path)).then(function(resolved) {\n\t\t\t\t\t\tupdate(payload, resolved)\n\t\t\t\t\t}, bail)\n\t\t\t\t}\n\t\t\t\telse update(payload, "div")\n\t\t\t}\n\t\t}, bail)\n\t\tredrawService0.subscribe(root, run1)\n\t}\n\troute.set = function(path, data, options) {\n\t\tif (lastUpdate != null) {\n\t\t\toptions = options || {}\n\t\t\toptions.replace = true\n\t\t}\n\t\tlastUpdate = null\n\t\trouteService.setPath(path, data, options)\n\t}\n\troute.get = function() {return currentPath}\n\troute.prefix = function(prefix0) {routeService.prefix = prefix0}\n\troute.link = function(vnode1) {\n\t\tvnode1.dom.setAttribute("href", routeService.prefix + vnode1.attrs.href)\n\t\tvnode1.dom.onclick = function(e) {\n\t\t\tif (e.ctrlKey || e.metaKey || e.shiftKey || e.which === 2) return\n\t\t\te.preventDefault()\n\t\t\te.redraw = false\n\t\t\tvar href = this.getAttribute("href")\n\t\t\tif (href.indexOf(routeService.prefix) === 0) href = href.slice(routeService.prefix.length)\n\t\t\troute.set(href, undefined, undefined)\n\t\t}\n\t}\n\troute.param = function(key3) {\n\t\tif(typeof attrs3 !== "undefined" && typeof key3 !== "undefined") return attrs3[key3]\n\t\treturn attrs3\n\t}\n\treturn route\n}\nm.route = _20(window, redrawService)\nm.withAttr = function(attrName, callback1, context) {\n\treturn function(e) {\n\t\tcallback1.call(context || this, attrName in e.currentTarget ? e.currentTarget[attrName] : e.currentTarget.getAttribute(attrName))\n\t}\n}\nvar _28 = coreRenderer(window)\nm.render = _28.render\nm.redraw = redrawService.redraw\nm.request = requestService.request\nm.jsonp = requestService.jsonp\nm.parseQueryString = parseQueryString\nm.buildQueryString = buildQueryString\nm.version = "1.1.6"\nm.vnode = Vnode\nif (true) module["exports"] = m\nelse {}\n}());\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(4).setImmediate, __webpack_require__(2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = __webpack_require__(7)\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9zdHJlYW0uanM/NGUwNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBWTs7QUFFWixpQkFBaUIsbUJBQU8sQ0FBQyxDQUFpQiIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCJcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9zdHJlYW0vc3RyZWFtXCIpXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n")},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){eval("/*\n\n  Audio Mixer Demo Page\n\n*/\nvar m = __webpack_require__(0);\n\nvar Stream = __webpack_require__(1);\n\nvar style = __webpack_require__(8);\n\nvar audioMixer = __webpack_require__(9);\n\nvar CreateTrack = __webpack_require__(11);\n\nvar TrackList = __webpack_require__(13);\n\nvar mix = new audioMixer.default.Mixer();\nwindow.mix = mix; // dummyTracks() // <-- uncomment to pre-populate track list with dummy tracks\n\nvar Interface = {\n  view: view\n};\nm.mount(document.querySelector('.container'), Interface); // ********************************************************\n\nvar dummyTrack = function dummyTrack() {\n  return {\n    options: {\n      id: 'test a'\n    },\n    paused: function paused() {\n      return true;\n    },\n    play: function play() {\n      return true;\n    },\n    on: function on() {\n      return true;\n    },\n    volume: function volume() {\n      return 1;\n    }\n  };\n};\n\nfunction dummyTracks() {\n  mix.tracks = function () {\n    return [dummyTrack(), dummyTrack()];\n  };\n} // ********************************************************\n\n\nfunction view(vnode) {\n  var state = this;\n  return [m('h3', ['Audio Mixer Demo']), m('h4', [m('a', {\n    href: 'https://github.com/heliosdesign/helios-audio-mixer'\n  }, ['https://github.com/heliosdesign/helios-audio-mixer'])]), m('section.create', [m('.row', [m('header', 'Create Track')]), m(CreateTrack, {\n    mix: mix\n  })]), m('section.tracks', [m('.row', [m('header', 'Tracks')]), m(TrackList, {\n    mix: mix\n  })])];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2RlbW8vanMvZGVtby5qcz84YzQxIl0sIm5hbWVzIjpbIm0iLCJyZXF1aXJlIiwiU3RyZWFtIiwic3R5bGUiLCJhdWRpb01peGVyIiwiQ3JlYXRlVHJhY2siLCJUcmFja0xpc3QiLCJtaXgiLCJkZWZhdWx0IiwiTWl4ZXIiLCJ3aW5kb3ciLCJJbnRlcmZhY2UiLCJ2aWV3IiwibW91bnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJkdW1teVRyYWNrIiwib3B0aW9ucyIsImlkIiwicGF1c2VkIiwicGxheSIsIm9uIiwidm9sdW1lIiwiZHVtbXlUcmFja3MiLCJ0cmFja3MiLCJ2bm9kZSIsInN0YXRlIiwiaHJlZiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0EsSUFBTUEsQ0FBQyxHQUFHQyxtQkFBTyxDQUFDLENBQUQsQ0FBakI7O0FBQ0EsSUFBTUMsTUFBTSxHQUFHRCxtQkFBTyxDQUFDLENBQUQsQ0FBdEI7O0FBRUEsSUFBTUUsS0FBSyxHQUFHRixtQkFBTyxDQUFDLENBQUQsQ0FBckI7O0FBRUEsSUFBTUcsVUFBVSxHQUFHSCxtQkFBTyxDQUFDLENBQUQsQ0FBMUI7O0FBRUEsSUFBTUksV0FBVyxHQUFHSixtQkFBTyxDQUFDLEVBQUQsQ0FBM0I7O0FBQ0EsSUFBTUssU0FBUyxHQUFHTCxtQkFBTyxDQUFDLEVBQUQsQ0FBekI7O0FBRUEsSUFBSU0sR0FBRyxHQUFHLElBQUlILFVBQVUsQ0FBQ0ksT0FBWCxDQUFtQkMsS0FBdkIsRUFBVjtBQUNBQyxNQUFNLENBQUNILEdBQVAsR0FBYUEsR0FBYixDLENBRUE7O0FBRUEsSUFBSUksU0FBUyxHQUFHO0FBQUVDLE1BQUksRUFBSkE7QUFBRixDQUFoQjtBQUNBWixDQUFDLENBQUNhLEtBQUYsQ0FBUUMsUUFBUSxDQUFDQyxhQUFULENBQXVCLFlBQXZCLENBQVIsRUFBOENKLFNBQTlDLEUsQ0FHQTs7QUFFQSxJQUFJSyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxHQUFVO0FBQ3pCLFNBQU87QUFDTEMsV0FBTyxFQUFFO0FBQUVDLFFBQUUsRUFBRTtBQUFOLEtBREo7QUFFTEMsVUFBTSxFQUFHO0FBQUEsYUFBTSxJQUFOO0FBQUEsS0FGSjtBQUdMQyxRQUFJLEVBQUs7QUFBQSxhQUFNLElBQU47QUFBQSxLQUhKO0FBSUxDLE1BQUUsRUFBTztBQUFBLGFBQU0sSUFBTjtBQUFBLEtBSko7QUFLTEMsVUFBTSxFQUFHO0FBQUEsYUFBTSxDQUFOO0FBQUE7QUFMSixHQUFQO0FBT0QsQ0FSRDs7QUFTQSxTQUFTQyxXQUFULEdBQXNCO0FBQ3BCaEIsS0FBRyxDQUFDaUIsTUFBSixHQUFhLFlBQVU7QUFDckIsV0FBTyxDQUFFUixVQUFVLEVBQVosRUFBZ0JBLFVBQVUsRUFBMUIsQ0FBUDtBQUNELEdBRkQ7QUFHRCxDLENBRUQ7OztBQUVBLFNBQVNKLElBQVQsQ0FBY2EsS0FBZCxFQUFvQjtBQUNsQixNQUFJQyxLQUFLLEdBQUcsSUFBWjtBQUVBLFNBQU8sQ0FFTDFCLENBQUMsQ0FBQyxJQUFELEVBQU8sQ0FBRSxrQkFBRixDQUFQLENBRkksRUFJTEEsQ0FBQyxDQUFDLElBQUQsRUFBTyxDQUNOQSxDQUFDLENBQUMsR0FBRCxFQUFNO0FBQUUyQixRQUFJLEVBQUU7QUFBUixHQUFOLEVBQXNFLENBQ3JFLG9EQURxRSxDQUF0RSxDQURLLENBQVAsQ0FKSSxFQVVMM0IsQ0FBQyxDQUFDLGdCQUFELEVBQW1CLENBQ2xCQSxDQUFDLENBQUMsTUFBRCxFQUFTLENBQ1JBLENBQUMsQ0FBQyxRQUFELEVBQVcsY0FBWCxDQURPLENBQVQsQ0FEaUIsRUFJbEJBLENBQUMsQ0FBQ0ssV0FBRCxFQUFjO0FBQUVFLE9BQUcsRUFBSEE7QUFBRixHQUFkLENBSmlCLENBQW5CLENBVkksRUFpQkxQLENBQUMsQ0FBQyxnQkFBRCxFQUFtQixDQUVsQkEsQ0FBQyxDQUFDLE1BQUQsRUFBUyxDQUNSQSxDQUFDLENBQUMsUUFBRCxFQUFXLFFBQVgsQ0FETyxDQUFULENBRmlCLEVBTWxCQSxDQUFDLENBQUNNLFNBQUQsRUFBWTtBQUFFQyxPQUFHLEVBQUhBO0FBQUYsR0FBWixDQU5pQixDQUFuQixDQWpCSSxDQUFQO0FBNEJEIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXG4gIEF1ZGlvIE1peGVyIERlbW8gUGFnZVxuXG4qL1xuY29uc3QgbSA9IHJlcXVpcmUoJ21pdGhyaWwnKVxuY29uc3QgU3RyZWFtID0gcmVxdWlyZSgnbWl0aHJpbC9zdHJlYW0nKVxuXG5jb25zdCBzdHlsZSA9IHJlcXVpcmUoJy4uL3N0eWxlLnNhc3MnKVxuXG5jb25zdCBhdWRpb01peGVyID0gcmVxdWlyZSgnLi4vLi4vLi4vYXVkaW9NaXhlcicpXG5cbmNvbnN0IENyZWF0ZVRyYWNrID0gcmVxdWlyZSgnbW9kdWxlcy9jcmVhdGVUcmFjaycpXG5jb25zdCBUcmFja0xpc3QgPSByZXF1aXJlKCdtb2R1bGVzL3RyYWNrTGlzdCcpXG5cbnZhciBtaXggPSBuZXcgYXVkaW9NaXhlci5kZWZhdWx0Lk1peGVyKClcbndpbmRvdy5taXggPSBtaXhcblxuLy8gZHVtbXlUcmFja3MoKSAvLyA8LS0gdW5jb21tZW50IHRvIHByZS1wb3B1bGF0ZSB0cmFjayBsaXN0IHdpdGggZHVtbXkgdHJhY2tzXG5cbmxldCBJbnRlcmZhY2UgPSB7IHZpZXcgfVxubS5tb3VudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGFpbmVyJyksIEludGVyZmFjZSlcblxuXG4vLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG5sZXQgZHVtbXlUcmFjayA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB7XG4gICAgb3B0aW9uczogeyBpZDogJ3Rlc3QgYScgfSxcbiAgICBwYXVzZWQ6ICAoKSA9PiB0cnVlLFxuICAgIHBsYXk6ICAgICgpID0+IHRydWUsXG4gICAgb246ICAgICAgKCkgPT4gdHJ1ZSxcbiAgICB2b2x1bWU6ICAoKSA9PiAxLFxuICB9XG59XG5mdW5jdGlvbiBkdW1teVRyYWNrcygpe1xuICBtaXgudHJhY2tzID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gWyBkdW1teVRyYWNrKCksIGR1bW15VHJhY2soKSBdXG4gIH1cbn1cblxuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuZnVuY3Rpb24gdmlldyh2bm9kZSl7XG4gIGxldCBzdGF0ZSA9IHRoaXNcblxuICByZXR1cm4gW1xuXG4gICAgbSgnaDMnLCBbICdBdWRpbyBNaXhlciBEZW1vJyBdKSxcblxuICAgIG0oJ2g0JywgW1xuICAgICAgbSgnYScsIHsgaHJlZjogJ2h0dHBzOi8vZ2l0aHViLmNvbS9oZWxpb3NkZXNpZ24vaGVsaW9zLWF1ZGlvLW1peGVyJyB9LCBbXG4gICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vaGVsaW9zZGVzaWduL2hlbGlvcy1hdWRpby1taXhlcidcbiAgICAgIF0pLFxuICAgIF0pLFxuXG4gICAgbSgnc2VjdGlvbi5jcmVhdGUnLCBbXG4gICAgICBtKCcucm93JywgW1xuICAgICAgICBtKCdoZWFkZXInLCAnQ3JlYXRlIFRyYWNrJyksXG4gICAgICBdKSxcbiAgICAgIG0oQ3JlYXRlVHJhY2ssIHsgbWl4IH0pXG4gICAgXSksXG5cbiAgICBtKCdzZWN0aW9uLnRyYWNrcycsIFtcblxuICAgICAgbSgnLnJvdycsIFtcbiAgICAgICAgbSgnaGVhZGVyJywgJ1RyYWNrcycpLFxuICAgICAgXSksXG5cbiAgICAgIG0oVHJhY2tMaXN0LCB7IG1peCB9KSxcblxuICAgIF0pLFxuICBdXG5cbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||\n            (typeof self !== "undefined" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(5);\n// On some exotic environments, it\'s not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||\n                       (typeof global !== "undefined" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||\n                         (typeof global !== "undefined" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz81MTE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxtQkFBTyxDQUFDLENBQWM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    "use strict";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== "function") {\n        callback = new Function("" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."\n        // So if we\'re currently running a task, we\'ll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // "too much recursion" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can\'t be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage("", "*");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = "setImmediate$" + Math.random() + "$";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === "string" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener("message", onGlobalMessage, false);\n        } else {\n            global.attachEvent("onmessage", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, "*");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it\'s been called.\n            var script = doc.createElement("script");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don\'t get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === "[object process]") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && "onreadystatechange" in doc.createElement("script")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(2), __webpack_require__(6)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){eval('/* eslint-disable */\n;(function() {\n"use strict"\n/* eslint-enable */\n\nvar guid = 0, HALT = {}\nfunction createStream() {\n\tfunction stream() {\n\t\tif (arguments.length > 0 && arguments[0] !== HALT) updateStream(stream, arguments[0])\n\t\treturn stream._state.value\n\t}\n\tinitStream(stream)\n\n\tif (arguments.length > 0 && arguments[0] !== HALT) updateStream(stream, arguments[0])\n\n\treturn stream\n}\nfunction initStream(stream) {\n\tstream.constructor = createStream\n\tstream._state = {id: guid++, value: undefined, state: 0, derive: undefined, recover: undefined, deps: {}, parents: [], endStream: undefined, unregister: undefined}\n\tstream.map = stream["fantasy-land/map"] = map, stream["fantasy-land/ap"] = ap, stream["fantasy-land/of"] = createStream\n\tstream.valueOf = valueOf, stream.toJSON = toJSON, stream.toString = valueOf\n\n\tObject.defineProperties(stream, {\n\t\tend: {get: function() {\n\t\t\tif (!stream._state.endStream) {\n\t\t\t\tvar endStream = createStream()\n\t\t\t\tendStream.map(function(value) {\n\t\t\t\t\tif (value === true) {\n\t\t\t\t\t\tunregisterStream(stream)\n\t\t\t\t\t\tendStream._state.unregister = function(){unregisterStream(endStream)}\n\t\t\t\t\t}\n\t\t\t\t\treturn value\n\t\t\t\t})\n\t\t\t\tstream._state.endStream = endStream\n\t\t\t}\n\t\t\treturn stream._state.endStream\n\t\t}}\n\t})\n}\nfunction updateStream(stream, value) {\n\tupdateState(stream, value)\n\tfor (var id in stream._state.deps) updateDependency(stream._state.deps[id], false)\n\tif (stream._state.unregister != null) stream._state.unregister()\n\tfinalize(stream)\n}\nfunction updateState(stream, value) {\n\tstream._state.value = value\n\tstream._state.changed = true\n\tif (stream._state.state !== 2) stream._state.state = 1\n}\nfunction updateDependency(stream, mustSync) {\n\tvar state = stream._state, parents = state.parents\n\tif (parents.length > 0 && parents.every(active) && (mustSync || parents.some(changed))) {\n\t\tvar value = stream._state.derive()\n\t\tif (value === HALT) return false\n\t\tupdateState(stream, value)\n\t}\n}\nfunction finalize(stream) {\n\tstream._state.changed = false\n\tfor (var id in stream._state.deps) stream._state.deps[id]._state.changed = false\n}\n\nfunction combine(fn, streams) {\n\tif (!streams.every(valid)) throw new Error("Ensure that each item passed to stream.combine/stream.merge is a stream")\n\treturn initDependency(createStream(), streams, function() {\n\t\treturn fn.apply(this, streams.concat([streams.filter(changed)]))\n\t})\n}\n\nfunction initDependency(dep, streams, derive) {\n\tvar state = dep._state\n\tstate.derive = derive\n\tstate.parents = streams.filter(notEnded)\n\n\tregisterDependency(dep, state.parents)\n\tupdateDependency(dep, true)\n\n\treturn dep\n}\nfunction registerDependency(stream, parents) {\n\tfor (var i = 0; i < parents.length; i++) {\n\t\tparents[i]._state.deps[stream._state.id] = stream\n\t\tregisterDependency(stream, parents[i]._state.parents)\n\t}\n}\nfunction unregisterStream(stream) {\n\tfor (var i = 0; i < stream._state.parents.length; i++) {\n\t\tvar parent = stream._state.parents[i]\n\t\tdelete parent._state.deps[stream._state.id]\n\t}\n\tfor (var id in stream._state.deps) {\n\t\tvar dependent = stream._state.deps[id]\n\t\tvar index = dependent._state.parents.indexOf(stream)\n\t\tif (index > -1) dependent._state.parents.splice(index, 1)\n\t}\n\tstream._state.state = 2 //ended\n\tstream._state.deps = {}\n}\n\nfunction map(fn) {return combine(function(stream) {return fn(stream())}, [this])}\nfunction ap(stream) {return combine(function(s1, s2) {return s1()(s2())}, [stream, this])}\nfunction valueOf() {return this._state.value}\nfunction toJSON() {return this._state.value != null && typeof this._state.value.toJSON === "function" ? this._state.value.toJSON() : this._state.value}\n\nfunction valid(stream) {return stream._state }\nfunction active(stream) {return stream._state.state === 1}\nfunction changed(stream) {return stream._state.changed}\nfunction notEnded(stream) {return stream._state.state !== 2}\n\nfunction merge(streams) {\n\treturn combine(function() {\n\t\treturn streams.map(function(s) {return s()})\n\t}, streams)\n}\n\nfunction scan(reducer, seed, stream) {\n\tvar newStream = combine(function (s) {\n\t\treturn seed = reducer(seed, s._state.value)\n\t}, [stream])\n\n\tif (newStream._state.state === 0) newStream(seed)\n\n\treturn newStream\n}\n\nfunction scanMerge(tuples, seed) {\n\tvar streams = tuples.map(function(tuple) {\n\t\tvar stream = tuple[0]\n\t\tif (stream._state.state === 0) stream(undefined)\n\t\treturn stream\n\t})\n\n\tvar newStream = combine(function() {\n\t\tvar changed = arguments[arguments.length - 1]\n\n\t\tstreams.forEach(function(stream, idx) {\n\t\t\tif (changed.indexOf(stream) > -1) {\n\t\t\t\tseed = tuples[idx][1](seed, stream._state.value)\n\t\t\t}\n\t\t})\n\n\t\treturn seed\n\t}, streams)\n\n\treturn newStream\n}\n\ncreateStream["fantasy-land/of"] = createStream\ncreateStream.merge = merge\ncreateStream.combine = combine\ncreateStream.scan = scan\ncreateStream.scanMerge = scanMerge\ncreateStream.HALT = HALT\n\nif (true) module["exports"] = createStream\nelse {}\n\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin\n    if(false) { var cssReload; }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2RlbW8vc3R5bGUuc2Fzcz84MWUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsT0FBTyxLQUFVLEVBQUUsa0JBS2QiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE1NTA3MDI1NzIwMTZcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7O1xuICAgIH1cbiAgIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\n!function (Q, F) {\n  "object" == ( false ? undefined : _typeof(exports)) && "object" == ( false ? undefined : _typeof(module)) ? module.exports = F() :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (F),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\n}(this, function () {\n  return function (Q) {\n    var F = {};\n\n    function B(e) {\n      if (F[e]) return F[e].exports;\n      var t = F[e] = {\n        i: e,\n        l: !1,\n        exports: {}\n      };\n      return Q[e].call(t.exports, t, t.exports, B), t.l = !0, t.exports;\n    }\n\n    return B.m = Q, B.c = F, B.d = function (Q, F, e) {\n      B.o(Q, F) || Object.defineProperty(Q, F, {\n        enumerable: !0,\n        get: e\n      });\n    }, B.r = function (Q) {\n      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(Q, Symbol.toStringTag, {\n        value: "Module"\n      }), Object.defineProperty(Q, "__esModule", {\n        value: !0\n      });\n    }, B.t = function (Q, F) {\n      if (1 & F && (Q = B(Q)), 8 & F) return Q;\n      if (4 & F && "object" == _typeof(Q) && Q && Q.__esModule) return Q;\n      var e = Object.create(null);\n      if (B.r(e), Object.defineProperty(e, "default", {\n        enumerable: !0,\n        value: Q\n      }), 2 & F && "string" != typeof Q) for (var t in Q) {\n        B.d(e, t, function (F) {\n          return Q[F];\n        }.bind(null, t));\n      }\n      return e;\n    }, B.n = function (Q) {\n      var F = Q && Q.__esModule ? function () {\n        return Q.default;\n      } : function () {\n        return Q;\n      };\n      return B.d(F, "a", F), F;\n    }, B.o = function (Q, F) {\n      return Object.prototype.hasOwnProperty.call(Q, F);\n    }, B.p = "", B(B.s = 1);\n  }([function (module, exports) {\n    eval(\'function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/*\\n\\n  Analyser Node (FFT)\\n\\n*/\\nvar AnalyserNode =\\n/*#__PURE__*/\\nfunction () {\\n  function AnalyserNode(params) {\\n    _classCallCheck(this, AnalyserNode);\\n\\n    var ctx = params.context;\\n    this.node = ctx.createAnalyser();\\n    analyserNode.smoothingTimeConstant = 0.2;\\n    analyserNode.fftSize = 32; // create a script processor with bufferSize of 2048\\n\\n    this.processor = ctx.createScriptProcessor(2048, 1, 1);\\n    processorNode.connect(ctx.destination); // processor -> destination\\n\\n    analyserNode.connect(processorNode); // analyser  -> processor\\n\\n    this.bufferLength = analyserNode.frequencyBinCount;\\n    this.analysis = {\\n      raw: new Uint8Array(options.bufferLength),\\n      average: 0,\\n      low: 0,\\n      mid: 0,\\n      high: 0\\n    };\\n  }\\n\\n  _createClass(AnalyserNode, [{\\n    key: "connect",\\n    value: function connect(to) {\\n      this.node.connect(to);\\n    }\\n  }, {\\n    key: "get",\\n    value: function get() {\\n      var third = Math.round(this.bufferLength / 3);\\n      var scratch = 0;\\n      var i = 0;\\n      this.node.getByteFrequencyData(this.analysis.raw); // calculate average, mid, high\\n\\n      scratch = 0;\\n\\n      for (i = 0; i < this.bufferLength; i++) {\\n        scratch += this.analysis.raw[i];\\n      }\\n\\n      this.analysis.average = scratch / this.bufferLength / 256; // lows\\n\\n      scratch = 0;\\n\\n      for (i = 0; i < third; i++) {\\n        scratch += this.analysis.raw[i];\\n      }\\n\\n      this.analysis.low = scratch / third / 256; // mids\\n\\n      scratch = 0;\\n\\n      for (i = third; i < third * 2; i++) {\\n        scratch += this.analysis.raw[i];\\n      }\\n\\n      this.analysis.mid = scratch / third / 256; // highs\\n\\n      scratch = 0;\\n\\n      for (i = third * 2; i < this.bufferLength; i++) {\\n        scratch += this.analysis.raw[i];\\n      }\\n\\n      this.analysis.high = scratch / third / 256;\\n      return this.analysis;\\n    }\\n  }]);\\n\\n  return AnalyserNode;\\n}(); // export default AnalyserNode\\n\\n\\nmodule.exports = AnalyserNode;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvbW9kdWxlcy9ub2Rlcy9BbmFseXNlck5vZGUuanM/MjhhOSJdLCJuYW1lcyI6WyJBbmFseXNlck5vZGUiLCJwYXJhbXMiLCJjdHgiLCJjb250ZXh0Iiwibm9kZSIsImNyZWF0ZUFuYWx5c2VyIiwiYW5hbHlzZXJOb2RlIiwic21vb3RoaW5nVGltZUNvbnN0YW50IiwiZmZ0U2l6ZSIsInByb2Nlc3NvciIsImNyZWF0ZVNjcmlwdFByb2Nlc3NvciIsInByb2Nlc3Nvck5vZGUiLCJjb25uZWN0IiwiZGVzdGluYXRpb24iLCJidWZmZXJMZW5ndGgiLCJmcmVxdWVuY3lCaW5Db3VudCIsImFuYWx5c2lzIiwicmF3IiwiVWludDhBcnJheSIsIm9wdGlvbnMiLCJhdmVyYWdlIiwibG93IiwibWlkIiwiaGlnaCIsInRvIiwidGhpcmQiLCJNYXRoIiwicm91bmQiLCJzY3JhdGNoIiwiaSIsImdldEJ5dGVGcmVxdWVuY3lEYXRhIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7O0lBTU1BLFk7OztBQUNKLHdCQUFZQyxNQUFaLEVBQW1CO0FBQUE7O0FBQ2pCLFFBQUlDLEdBQUcsR0FBR0QsTUFBTSxDQUFDRSxPQUFqQjtBQUVBLFNBQUtDLElBQUwsR0FBWUYsR0FBRyxDQUFDRyxjQUFKLEVBQVo7QUFFQUMsZ0JBQVksQ0FBQ0MscUJBQWIsR0FBcUMsR0FBckM7QUFDQUQsZ0JBQVksQ0FBQ0UsT0FBYixHQUF1QixFQUF2QixDQU5pQixDQVFqQjs7QUFDQSxTQUFLQyxTQUFMLEdBQWlCUCxHQUFHLENBQUNRLHFCQUFKLENBQTBCLElBQTFCLEVBQWdDLENBQWhDLEVBQW1DLENBQW5DLENBQWpCO0FBRUFDLGlCQUFhLENBQUNDLE9BQWQsQ0FBc0JWLEdBQUcsQ0FBQ1csV0FBMUIsRUFYaUIsQ0FXc0I7O0FBQ3ZDUCxnQkFBWSxDQUFDTSxPQUFiLENBQXFCRCxhQUFyQixFQVppQixDQVlzQjs7QUFFdkMsU0FBS0csWUFBTCxHQUFvQlIsWUFBWSxDQUFDUyxpQkFBakM7QUFFQSxTQUFLQyxRQUFMLEdBQWdCO0FBQ2RDLFNBQUcsRUFBRSxJQUFJQyxVQUFKLENBQWVDLE9BQU8sQ0FBQ0wsWUFBdkIsQ0FEUztBQUVkTSxhQUFPLEVBQUUsQ0FGSztBQUdkQyxTQUFHLEVBQU0sQ0FISztBQUlkQyxTQUFHLEVBQU0sQ0FKSztBQUtkQyxVQUFJLEVBQUs7QUFMSyxLQUFoQjtBQVFEOzs7OzRCQUVPQyxFLEVBQUc7QUFDVCxXQUFLcEIsSUFBTCxDQUFVUSxPQUFWLENBQWtCWSxFQUFsQjtBQUNEOzs7MEJBRUk7QUFFSCxVQUFJQyxLQUFLLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXLEtBQUtiLFlBQUwsR0FBb0IsQ0FBL0IsQ0FBWjtBQUNBLFVBQUljLE9BQU8sR0FBRyxDQUFkO0FBQ0EsVUFBSUMsQ0FBQyxHQUFHLENBQVI7QUFFQSxXQUFLekIsSUFBTCxDQUFVMEIsb0JBQVYsQ0FBK0IsS0FBS2QsUUFBTCxDQUFjQyxHQUE3QyxFQU5HLENBUUg7O0FBQ0FXLGFBQU8sR0FBRyxDQUFWOztBQUNBLFdBQUtDLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBRyxLQUFLZixZQUFyQixFQUFtQ2UsQ0FBQyxFQUFwQyxFQUF3QztBQUN0Q0QsZUFBTyxJQUFJLEtBQUtaLFFBQUwsQ0FBY0MsR0FBZCxDQUFrQlksQ0FBbEIsQ0FBWDtBQUNEOztBQUNELFdBQUtiLFFBQUwsQ0FBY0ksT0FBZCxHQUF5QlEsT0FBTyxHQUFHLEtBQUtkLFlBQWhCLEdBQWdDLEdBQXhELENBYkcsQ0FlSDs7QUFDQWMsYUFBTyxHQUFHLENBQVY7O0FBQ0EsV0FBS0MsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHSixLQUFoQixFQUF1QkksQ0FBQyxFQUF4QixFQUE0QjtBQUMxQkQsZUFBTyxJQUFJLEtBQUtaLFFBQUwsQ0FBY0MsR0FBZCxDQUFrQlksQ0FBbEIsQ0FBWDtBQUNEOztBQUNELFdBQUtiLFFBQUwsQ0FBY0ssR0FBZCxHQUFvQk8sT0FBTyxHQUFHSCxLQUFWLEdBQWtCLEdBQXRDLENBcEJHLENBc0JIOztBQUNBRyxhQUFPLEdBQUcsQ0FBVjs7QUFDQSxXQUFLQyxDQUFDLEdBQUdKLEtBQVQsRUFBZ0JJLENBQUMsR0FBSUosS0FBSyxHQUFHLENBQTdCLEVBQWlDSSxDQUFDLEVBQWxDLEVBQXNDO0FBQ3BDRCxlQUFPLElBQUksS0FBS1osUUFBTCxDQUFjQyxHQUFkLENBQWtCWSxDQUFsQixDQUFYO0FBQ0Q7O0FBQ0QsV0FBS2IsUUFBTCxDQUFjTSxHQUFkLEdBQW9CTSxPQUFPLEdBQUdILEtBQVYsR0FBa0IsR0FBdEMsQ0EzQkcsQ0E2Qkg7O0FBQ0FHLGFBQU8sR0FBRyxDQUFWOztBQUNBLFdBQUtDLENBQUMsR0FBSUosS0FBSyxHQUFHLENBQWxCLEVBQXNCSSxDQUFDLEdBQUcsS0FBS2YsWUFBL0IsRUFBNkNlLENBQUMsRUFBOUMsRUFBa0Q7QUFDaERELGVBQU8sSUFBSSxLQUFLWixRQUFMLENBQWNDLEdBQWQsQ0FBa0JZLENBQWxCLENBQVg7QUFDRDs7QUFDRCxXQUFLYixRQUFMLENBQWNPLElBQWQsR0FBcUJLLE9BQU8sR0FBR0gsS0FBVixHQUFrQixHQUF2QztBQUVBLGFBQU8sS0FBS1QsUUFBWjtBQUNEOzs7O0tBR0g7OztBQUNBZSxNQUFNLENBQUNDLE9BQVAsR0FBaUJoQyxZQUFqQiIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblxuICBBbmFseXNlciBOb2RlIChGRlQpXG5cbiovXG5cbmNsYXNzIEFuYWx5c2VyTm9kZSB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtcyl7XG4gICAgbGV0IGN0eCA9IHBhcmFtcy5jb250ZXh0XG5cbiAgICB0aGlzLm5vZGUgPSBjdHguY3JlYXRlQW5hbHlzZXIoKVxuXG4gICAgYW5hbHlzZXJOb2RlLnNtb290aGluZ1RpbWVDb25zdGFudCA9IDAuMlxuICAgIGFuYWx5c2VyTm9kZS5mZnRTaXplID0gMzJcblxuICAgIC8vIGNyZWF0ZSBhIHNjcmlwdCBwcm9jZXNzb3Igd2l0aCBidWZmZXJTaXplIG9mIDIwNDhcbiAgICB0aGlzLnByb2Nlc3NvciA9IGN0eC5jcmVhdGVTY3JpcHRQcm9jZXNzb3IoMjA0OCwgMSwgMSlcblxuICAgIHByb2Nlc3Nvck5vZGUuY29ubmVjdChjdHguZGVzdGluYXRpb24pIC8vIHByb2Nlc3NvciAtPiBkZXN0aW5hdGlvblxuICAgIGFuYWx5c2VyTm9kZS5jb25uZWN0KHByb2Nlc3Nvck5vZGUpICAgIC8vIGFuYWx5c2VyICAtPiBwcm9jZXNzb3JcblxuICAgIHRoaXMuYnVmZmVyTGVuZ3RoID0gYW5hbHlzZXJOb2RlLmZyZXF1ZW5jeUJpbkNvdW50XG5cbiAgICB0aGlzLmFuYWx5c2lzID0ge1xuICAgICAgcmF3OiBuZXcgVWludDhBcnJheShvcHRpb25zLmJ1ZmZlckxlbmd0aCksXG4gICAgICBhdmVyYWdlOiAwLFxuICAgICAgbG93OiAgICAgMCxcbiAgICAgIG1pZDogICAgIDAsXG4gICAgICBoaWdoOiAgICAwLFxuICAgIH1cblxuICB9XG5cbiAgY29ubmVjdCh0byl7XG4gICAgdGhpcy5ub2RlLmNvbm5lY3QodG8pXG4gIH1cblxuICBnZXQoKXtcblxuICAgIGxldCB0aGlyZCA9IE1hdGgucm91bmQodGhpcy5idWZmZXJMZW5ndGggLyAzKVxuICAgIGxldCBzY3JhdGNoID0gMFxuICAgIGxldCBpID0gMFxuXG4gICAgdGhpcy5ub2RlLmdldEJ5dGVGcmVxdWVuY3lEYXRhKHRoaXMuYW5hbHlzaXMucmF3KVxuXG4gICAgLy8gY2FsY3VsYXRlIGF2ZXJhZ2UsIG1pZCwgaGlnaFxuICAgIHNjcmF0Y2ggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuYnVmZmVyTGVuZ3RoOyBpKyspIHtcbiAgICAgIHNjcmF0Y2ggKz0gdGhpcy5hbmFseXNpcy5yYXdbaV1cbiAgICB9XG4gICAgdGhpcy5hbmFseXNpcy5hdmVyYWdlID0gKHNjcmF0Y2ggLyB0aGlzLmJ1ZmZlckxlbmd0aCkgLyAyNTZcblxuICAgIC8vIGxvd3NcbiAgICBzY3JhdGNoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlyZDsgaSsrKSB7XG4gICAgICBzY3JhdGNoICs9IHRoaXMuYW5hbHlzaXMucmF3W2ldXG4gICAgfVxuICAgIHRoaXMuYW5hbHlzaXMubG93ID0gc2NyYXRjaCAvIHRoaXJkIC8gMjU2XG5cbiAgICAvLyBtaWRzXG4gICAgc2NyYXRjaCA9IDBcbiAgICBmb3IgKGkgPSB0aGlyZDsgaSA8ICh0aGlyZCAqIDIpOyBpKyspIHtcbiAgICAgIHNjcmF0Y2ggKz0gdGhpcy5hbmFseXNpcy5yYXdbaV1cbiAgICB9XG4gICAgdGhpcy5hbmFseXNpcy5taWQgPSBzY3JhdGNoIC8gdGhpcmQgLyAyNTZcblxuICAgIC8vIGhpZ2hzXG4gICAgc2NyYXRjaCA9IDBcbiAgICBmb3IgKGkgPSAodGhpcmQgKiAyKTsgaSA8IHRoaXMuYnVmZmVyTGVuZ3RoOyBpKyspIHtcbiAgICAgIHNjcmF0Y2ggKz0gdGhpcy5hbmFseXNpcy5yYXdbaV1cbiAgICB9XG4gICAgdGhpcy5hbmFseXNpcy5oaWdoID0gc2NyYXRjaCAvIHRoaXJkIC8gMjU2XG5cbiAgICByZXR1cm4gdGhpcy5hbmFseXNpc1xuICB9XG59XG5cbi8vIGV4cG9ydCBkZWZhdWx0IEFuYWx5c2VyTm9kZVxubW9kdWxlLmV4cG9ydHMgPSBBbmFseXNlck5vZGVcbiJdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///0\\n\');\n  }, function (module, __webpack_exports__, __webpack_require__) {\n    "use strict";\n\n    eval(\'__webpack_require__.r(__webpack_exports__);\\n\\n// CONCATENATED MODULE: ./src/modules/BaseTrack.js\\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\\n\\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }\\n\\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }\\n\\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/*\\n\\n  base Track class, with event and timeline functionality\\n\\n*/\\nvar BaseTrack =\\n/*#__PURE__*/\\nfunction () {\\n  function BaseTrack(params) {\\n    _classCallCheck(this, BaseTrack);\\n\\n    this.id = params.id;\\n    this.events = {};\\n    this.timelineEvents = params.timelineEvents ? _toConsumableArray(params.timelineEvents) : [];\\n  }\\n\\n  _createClass(BaseTrack, [{\\n    key: "destroy",\\n    value: function destroy() {}\\n    /*\\n       Events\\n     */\\n\\n  }, {\\n    key: "on",\\n    value: function on(eventName, callback) {\\n      var track = this;\\n\\n      if (typeof eventName !== \\\'string\\\') {\\n        throw new Error(\\\'Event name must be a string.\\\');\\n      } else if (!callback) {\\n        throw new Error(\\\'Can’t register an event without a callback.\\\');\\n      } else {\\n        if (track.events[eventName]) {\\n          track.events[eventName].push(callback);\\n        } else {\\n          track.events[eventName] = [callback];\\n        }\\n      }\\n\\n      return track;\\n    }\\n  }, {\\n    key: "off",\\n    value: function off(eventName, callback) {\\n      var track = this;\\n\\n      if (callback) {\\n        // remove specific callback\\n        if (track.events[eventName]) {\\n          var index = track.events[eventName].indexOf(callback);\\n          track.events[eventName].splice(index, 1);\\n        }\\n      } else {\\n        // remove all callbacks for a given event name\\n        if (track.events[eventName]) {\\n          track.events[eventName] = [];\\n        }\\n      }\\n\\n      return track;\\n    }\\n  }, {\\n    key: "one",\\n    value: function one(eventName, callback) {\\n      var track = this;\\n\\n      var wrappedCallback = function wrappedCallback() {\\n        track.off(eventName, wrappedCallback);\\n        callback();\\n      };\\n\\n      track.on(eventName, wrappedCallback);\\n      return track;\\n    }\\n  }, {\\n    key: "trigger",\\n    value: function trigger(eventName) {\\n      var track = this;\\n\\n      if (track.events[eventName]) {\\n        var args = Array.prototype.slice.call(arguments, 1);\\n        track.events[eventName].forEach(function (fn) {\\n          return fn.apply(track, args);\\n        });\\n      }\\n\\n      return track;\\n    }\\n    /*\\n       Timeline\\n         check if any events need to be triggered\\n         this is called by the mixer using requestAnimationFrame\\n     */\\n\\n  }, {\\n    key: "updateTimelineEvents",\\n    value: function updateTimelineEvents(time) {\\n      var track = this;\\n      var e;\\n\\n      for (var i = 0; i < track.timelineEvents.length; i++) {\\n        e = track.timelineEvents[i];\\n\\n        if (time >= e.time && !e.triggered) {\\n          e.triggered = true;\\n          if (e.callback) e.callback.call(track);\\n        }\\n      }\\n    }\\n  }]);\\n\\n  return BaseTrack;\\n}();\\n\\n/* harmony default export */ var modules_BaseTrack = (BaseTrack);\\n// CONCATENATED MODULE: ./src/modules/utils.js\\nfunction normalize(value) {\\n  if (value > 1) return 1;\\n  if (value < 0) return 0;\\n  return value;\\n}\\n\\nfunction timeFormat(seconds) {\\n  var m = Math.floor(seconds / 60) < 10 ? \\\'0\\\' + Math.floor(seconds / 60) : Math.floor(seconds / 60);\\n  var s = Math.floor(seconds - m * 60) < 10 ? \\\'0\\\' + Math.floor(seconds - m * 60) : Math.floor(seconds - m * 60);\\n  return m + \\\':\\\' + s;\\n}\\n\\nfunction lerp(start, end, now) {\\n  return (1 - now) * start + now * end;\\n}\\n\\nfunction timeoutPromise(duration) {\\n  return new Promise(function (resolve) {\\n    setTimeout(function () {\\n      return resolve();\\n    }, duration);\\n  });\\n}\\n\\n/* harmony default export */ var utils = ({\\n  normalize: normalize,\\n  timeFormat: timeFormat,\\n  lerp: lerp,\\n  timeoutPromise: timeoutPromise\\n});\\n// CONCATENATED MODULE: ./src/modules/Html5Track.js\\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\\n\\nfunction Html5Track_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction Html5Track_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction Html5Track_createClass(Constructor, protoProps, staticProps) { if (protoProps) Html5Track_defineProperties(Constructor.prototype, protoProps); if (staticProps) Html5Track_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\nfunction _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\\n\\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\n/*\\n\\n  HTML5 <audio> element track\\n\\n*/\\n\\n\\n\\nvar Html5Track_Html5Track =\\n/*#__PURE__*/\\nfunction (_BaseTrack) {\\n  _inherits(Html5Track, _BaseTrack);\\n\\n  function Html5Track(params) {\\n    var _this;\\n\\n    Html5Track_classCallCheck(this, Html5Track);\\n\\n    // call the parent class’s constructor\\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Html5Track).call(this, params));\\n\\n    var track = _assertThisInitialized(_this);\\n\\n    var defaults = {\\n      id: \\\'\\\',\\n      src: \\\'\\\',\\n      volume: 1,\\n      muted: false,\\n      start: 0,\\n      loop: false,\\n      autoplay: false\\n    };\\n    track.options = Object.assign(defaults, params); // set up our HTML5 <audio> element\\n\\n    if (!track.options.src) {\\n      throw new Error(\\\'Can’t create an Html5Track without a src parameter\\\');\\n    }\\n\\n    track.el = document.createElement(\\\'audio\\\');\\n    track.el.volume = track.options.volume;\\n    track.el.muted = track.options.muted;\\n    track.el.loop = track.options.loop;\\n    track.el.autoplay = track.options.autoplay;\\n    track.el.src = track.options.src;\\n    var eventNames = [\\\'loadstart\\\', \\\'loadedmetadata\\\', \\\'canplay\\\', \\\'canplaythrough\\\', \\\'play\\\', \\\'pause\\\', \\\'ended\\\', \\\'timeupdate\\\', \\\'seeking\\\', \\\'seeked\\\', \\\'error\\\'];\\n    eventNames.forEach(function (eventName) {\\n      track.el.addEventListener(eventName, _get(_getPrototypeOf(Html5Track.prototype), "trigger", _assertThisInitialized(_this)).bind(track, eventName, false));\\n    });\\n    return _this;\\n  } // ********************************************************\\n\\n\\n  Html5Track_createClass(Html5Track, [{\\n    key: "play",\\n    value: function play() {\\n      this.el.play();\\n      return this;\\n    }\\n  }, {\\n    key: "pause",\\n    value: function pause() {\\n      this.el.pause();\\n      return this;\\n    }\\n  }, {\\n    key: "stop",\\n    value: function stop() {\\n      this.el.pause();\\n      this.el.currentTime = 0;\\n      return this;\\n    }\\n  }, {\\n    key: "currentTime",\\n    value: function currentTime(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === \\\'number\\\') {\\n        track.el.currentTime = setTo;\\n        return track;\\n      } else {\\n        return track.el.currentTime;\\n      }\\n    }\\n  }, {\\n    key: "duration",\\n    value: function duration() {\\n      var track = this;\\n      return track.el.duration;\\n    }\\n  }, {\\n    key: "formattedTime",\\n    value: function formattedTime(includeDuration) {\\n      var track = this;\\n      if (includeDuration) return utils.timeFormat(track.currentTime()) + \\\'/\\\' + utils.timeFormat(track.duration());else return utils.timeFormat(track.currentTime());\\n    }\\n  }, {\\n    key: "volume",\\n    value: function volume(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === \\\'number\\\') {\\n        track.el.volume = utils.normalize(setTo);\\n        return track;\\n      } else {\\n        return track.el.volume;\\n      }\\n    }\\n  }, {\\n    key: "tweenVolume",\\n    value: function tweenVolume(setTo, duration) {\\n      var track = this; // replace existing volume tween\\n\\n      if (track.volumeTween) {\\n        window.cancelAnimationFrame(track.volumeTween);\\n      }\\n\\n      return new Promise(function (resolve, reject) {\\n        var fps = 60; // requestAnimationFrame\\n\\n        var durationInFrames = Math.round(duration * fps);\\n        var frameCount = Math.round(duration * fps);\\n        var startVolume = track.volume();\\n        var endVolume = utils.normalize(setTo);\\n        tick();\\n\\n        function tick() {\\n          if (frameCount <= 0) {\\n            track.volume(endVolume);\\n            resolve(track);\\n          } else {\\n            track.volumeTween = window.requestAnimationFrame(tick);\\n          }\\n\\n          frameCount -= 1;\\n          var progress = 1 - frameCount / durationInFrames;\\n          var v = utils.lerp(startVolume, endVolume, progress);\\n          track.volume(v);\\n        }\\n      });\\n    }\\n  }, {\\n    key: "muted",\\n    value: function muted(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === \\\'boolean\\\') {\\n        track.el.muted = setTo;\\n      }\\n\\n      return track.el.muted;\\n    }\\n  }, {\\n    key: "paused",\\n    value: function paused() {\\n      var track = this;\\n      return track.el.paused;\\n    }\\n  }, {\\n    key: "destroy",\\n    value: function destroy() {\\n      var track = this;\\n      track.pause();\\n    }\\n  }]);\\n\\n  return Html5Track;\\n}(modules_BaseTrack);\\n\\n/* harmony default export */ var modules_Html5Track = (Html5Track_Html5Track);\\n// CONCATENATED MODULE: ./src/modules/nodes/GainNode.js\\nfunction GainNode_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction GainNode_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction GainNode_createClass(Constructor, protoProps, staticProps) { if (protoProps) GainNode_defineProperties(Constructor.prototype, protoProps); if (staticProps) GainNode_defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/*\\n\\n  Gain Node\\n\\n  let g = new GainNode({\\n    context: context,\\n    gain:    1,\\n  })\\n\\n  g.node -> the web audio node object\\n\\n  g.gain(setTo) -> getter/setter\\n  g.muted(setTo) -> getter/setter\\n\\n  g.tweenGain(setTo, duration)\\n\\n*/\\n\\n\\nvar GainNode_GainNode =\\n/*#__PURE__*/\\nfunction () {\\n  function GainNode(params) {\\n    GainNode_classCallCheck(this, GainNode);\\n\\n    this.ctx = params.context;\\n    this.node = this.ctx.createGainNode ? this.ctx.createGainNode() : this.ctx.createGain();\\n    this.gain(typeof params.gain === \\\'number\\\' ? params.gain : 1);\\n  }\\n\\n  GainNode_createClass(GainNode, [{\\n    key: "gain",\\n    value: function gain(setTo) {\\n      if (typeof setTo === \\\'number\\\') {\\n        /*\\n           \\\'AudioParam value setter will become equivalent to AudioParam.setValueAtTime() in (Chrome) M65\\\'\\n           Apparently, it\\\'s bad form to set gain.value directly now, ie\\n          \\\'this.node.gain.value = u.normalize(setTo, 0, 1)\\\'\\n           Recommended behaviour now is to use setTargetAtTime.\\n           - https://www.chromestatus.com/features/5287995770929152\\n          - https://github.com/mrdoob/three.js/pull/11133\\n         */\\n        // setTargetAtTime( value, start time (clamped to current time), time constant )\\n        this.node.gain.setTargetAtTime(utils.normalize(setTo), this.ctx.currentTime, 0);\\n      }\\n\\n      return this.node.gain.value;\\n    } // tweenGain(0, 1, \\\'linear\\\')\\n\\n  }, {\\n    key: "tweenGain",\\n    value: function tweenGain(setTo, duration) {\\n      // using an exponential ramp (not linear) for a more even crossfade\\n      // (linear creates a volume dip in the middle)\\n      if (typeof this.node.gain.exponentialRampToValueAtTime === \\\'function\\\') {\\n        setTo = utils.normalize(setTo);\\n        if (setTo === 0) setTo = 0.000001; // can\\\'t use zero for ramps\\n\\n        this.node.gain.exponentialRampToValueAtTime(setTo, this.ctx.currentTime + duration);\\n      }\\n    }\\n  }, {\\n    key: "muted",\\n    value: function muted(setTo) {}\\n  }]);\\n\\n  return GainNode;\\n}();\\n\\n/* harmony default export */ var nodes_GainNode = (GainNode_GainNode);\\n// CONCATENATED MODULE: ./src/modules/nodes/PannerNode2D.js\\nfunction PannerNode2D_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction PannerNode2D_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction PannerNode2D_createClass(Constructor, protoProps, staticProps) { if (protoProps) PannerNode2D_defineProperties(Constructor.prototype, protoProps); if (staticProps) PannerNode2D_defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/*\\n\\n  Pan Node (2D - left/right)\\n\\n*/\\nvar PannerNode2D =\\n/*#__PURE__*/\\nfunction () {\\n  function PannerNode2D(params) {\\n    PannerNode2D_classCallCheck(this, PannerNode2D);\\n\\n    var ctx = params.context; // the name of this function is the same for\\n    // both prefixed and unprefixed audio contexts\\n\\n    this.node = ctx.createPanner();\\n    this.values = {\\n      pan: 0,\\n      panX: 0,\\n      panY: 0,\\n      panZ: 0 // additional setup here\\n\\n    };\\n  }\\n\\n  PannerNode2D_createClass(PannerNode2D, [{\\n    key: "pan",\\n    value: function pan(angle) {\\n      if (typeof angle === \\\'string\\\') {\\n        if (angle === \\\'front\\\') angle = 0;else if (angle === \\\'back\\\') angle = 180;else if (angle === \\\'left\\\') angle = 270;else if (angle === \\\'right\\\') angle = 90;\\n      }\\n\\n      if (typeof angle === \\\'number\\\') {\\n        this.values.pan = angle % 360;\\n        var angleRad = (-angle + 90) * 0.017453292519943295; // * PI/180\\n\\n        var x = this.values.panX = Math.cos(angleRad);\\n        var y = this.values.panY = Math.sin(angleRad);\\n        var z = this.values.panZ = -0.5;\\n        this.node.setPosition(x, y, z);\\n      }\\n\\n      return this.values.pan;\\n    }\\n  }, {\\n    key: "tweenPan",\\n    value: function tweenPan(angle, duration) {}\\n  }]);\\n\\n  return PannerNode2D;\\n}();\\n\\n/* harmony default export */ var nodes_PannerNode2D = (PannerNode2D);\\n// CONCATENATED MODULE: ./src/modules/nodes/PannerNode.js\\nfunction PannerNode_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\n/*\\n\\n  Pan Node (3D)\\n\\n*/\\nvar PanNode3D = function PanNode3D(params) {\\n  PannerNode_classCallCheck(this, PanNode3D);\\n\\n  var ctx = params.context; // the name of this function is the same for\\n  // both prefixed and unprefixed audio contexts\\n\\n  this.node = ctx.createPanner(); // additional setup here\\n};\\n\\n/* harmony default export */ var PannerNode = (PanNode3D);\\n// EXTERNAL MODULE: ./src/modules/nodes/AnalyserNode.js\\nvar AnalyserNode = __webpack_require__(0);\\nvar AnalyserNode_default = /*#__PURE__*/__webpack_require__.n(AnalyserNode);\\n\\n// CONCATENATED MODULE: ./src/modules/nodes/allNodes.js\\n/*\\n\\n  Gather all nodes in a single export.\\n\\n  All nodes must implement this API:\\n\\n    let n = new Node({\\n      lastNode: Node,\\n      context:  WebAudioContext,\\n    })\\n    n.connect(lastNode)\\n\\n\\n  ie\\n\\n  class MyNode {\\n    constructor(params){\\n      let ctx = params.context\\n      this.myNode = ctx.createNodeType ? ctx.createNodeType() : ctx.createType()\\n\\n      // additional setup here\\n    }\\n\\n    connect(previousNode){\\n      previousNode.connect(this.myNode)\\n      return this.myNode\\n    }\\n  }\\n\\n*/\\n\\n\\n\\n\\n/* harmony default export */ var allNodes = ({\\n  GainNode: nodes_GainNode,\\n  PannerNode2D: nodes_PannerNode2D,\\n  PannerNode: PannerNode,\\n  AnalyserNode: AnalyserNode_default.a\\n});\\n// CONCATENATED MODULE: ./src/modules/WebAudioTrack.js\\nfunction WebAudioTrack_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { WebAudioTrack_typeof = function _typeof(obj) { return typeof obj; }; } else { WebAudioTrack_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return WebAudioTrack_typeof(obj); }\\n\\nfunction WebAudioTrack_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction WebAudioTrack_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction WebAudioTrack_createClass(Constructor, protoProps, staticProps) { if (protoProps) WebAudioTrack_defineProperties(Constructor.prototype, protoProps); if (staticProps) WebAudioTrack_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction WebAudioTrack_possibleConstructorReturn(self, call) { if (call && (WebAudioTrack_typeof(call) === "object" || typeof call === "function")) { return call; } return WebAudioTrack_assertThisInitialized(self); }\\n\\nfunction WebAudioTrack_getPrototypeOf(o) { WebAudioTrack_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return WebAudioTrack_getPrototypeOf(o); }\\n\\nfunction WebAudioTrack_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction WebAudioTrack_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) WebAudioTrack_setPrototypeOf(subClass, superClass); }\\n\\nfunction WebAudioTrack_setPrototypeOf(o, p) { WebAudioTrack_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return WebAudioTrack_setPrototypeOf(o, p); }\\n\\n/*\\n\\n  Web Audio API track - to be extended\\n\\n    adds node functionality to base track\\n\\n*/\\n\\n\\n\\n\\nvar WebAudioTrack_WebAudioTrack =\\n/*#__PURE__*/\\nfunction (_BaseTrack) {\\n  WebAudioTrack_inherits(WebAudioTrack, _BaseTrack);\\n\\n  function WebAudioTrack(params) {\\n    var _this;\\n\\n    WebAudioTrack_classCallCheck(this, WebAudioTrack);\\n\\n    _this = WebAudioTrack_possibleConstructorReturn(this, WebAudioTrack_getPrototypeOf(WebAudioTrack).call(this, params));\\n\\n    var track = WebAudioTrack_assertThisInitialized(_this);\\n\\n    var defaults = {\\n      src: \\\'\\\',\\n      context: false,\\n      nodes: []\\n    };\\n    track.options = Object.assign(defaults, params);\\n    track.data = {}; // reference nodes by ???\\n\\n    track.allNodes = [];\\n    track.nodeLookup = {};\\n    return _this;\\n  }\\n  /*\\n     input is an array\\n   */\\n\\n\\n  WebAudioTrack_createClass(WebAudioTrack, [{\\n    key: "createNodes",\\n    value: function createNodes(nodes, source) {\\n      var track = this;\\n\\n      if (!source) {\\n        throw new Error(\\\'Can’t create nodes without a valid source.\\\');\\n      } else if (!source.connect) {\\n        throw new Error(\\\'Can’t create nodes without a valid source.\\\');\\n      } // clear previous set of nodes (we recreate nodes every time we play)\\n\\n\\n      track.allNodes = [];\\n      var previousNode = source;\\n      nodes.forEach(function (n) {\\n        var baseParams = {\\n          context: track.options.context // determine node type by duck typing\\n\\n        };\\n\\n        if (typeof n === \\\'string\\\') {\\n          // predefined node with all defaults, no options\\n          if (allNodes[n]) {\\n            var newNode = new allNodes[n](baseParams);\\n            track.allNodes.push(newNode);\\n            track.nodeLookup[n] = newNode;\\n            previousNode.connect(newNode.node);\\n            previousNode = newNode.node;\\n          } else {\\n            throw new Error("Node type ".concat(n, " does not exist."));\\n          }\\n        } else if (WebAudioTrack_typeof(n) === \\\'object\\\') {\\n          if (n.type) {\\n            // create predefined node with options\\n            var nodeType = allNodes[n.type];\\n\\n            if (nodeType) {\\n              var _newNode = new nodeType(Object.assign(baseParams, n.options));\\n\\n              track.allNodes.push(_newNode);\\n              track.nodeLookup[n.type] = _newNode;\\n              previousNode.connect(_newNode.node);\\n              previousNode = _newNode.node;\\n            } else {\\n              throw new Error("Node type ".concat(n.type, " does not exist."));\\n            }\\n          } else if (n.node) {\\n            // create custom node, this is a raw node object\\n            track.allNodes.push(n);\\n            previousNode.connect(n.node);\\n            previousNode = n.node;\\n          }\\n        }\\n      });\\n      previousNode.connect(track.options.context.destination);\\n    }\\n  }, {\\n    key: "nodes",\\n    value: function nodes() {\\n      return this.allNodes;\\n    }\\n  }, {\\n    key: "node",\\n    value: function node(id) {\\n      return this.nodeLookup[id] || false;\\n    }\\n  }]);\\n\\n  return WebAudioTrack;\\n}(modules_BaseTrack);\\n\\n/* harmony default export */ var modules_WebAudioTrack = (WebAudioTrack_WebAudioTrack);\\n// CONCATENATED MODULE: ./src/modules/BufferSourceTrack.js\\nfunction BufferSourceTrack_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { BufferSourceTrack_typeof = function _typeof(obj) { return typeof obj; }; } else { BufferSourceTrack_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return BufferSourceTrack_typeof(obj); }\\n\\nfunction BufferSourceTrack_toConsumableArray(arr) { return BufferSourceTrack_arrayWithoutHoles(arr) || BufferSourceTrack_iterableToArray(arr) || BufferSourceTrack_nonIterableSpread(); }\\n\\nfunction BufferSourceTrack_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }\\n\\nfunction BufferSourceTrack_iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }\\n\\nfunction BufferSourceTrack_arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\\n\\nfunction BufferSourceTrack_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction BufferSourceTrack_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction BufferSourceTrack_createClass(Constructor, protoProps, staticProps) { if (protoProps) BufferSourceTrack_defineProperties(Constructor.prototype, protoProps); if (staticProps) BufferSourceTrack_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction BufferSourceTrack_possibleConstructorReturn(self, call) { if (call && (BufferSourceTrack_typeof(call) === "object" || typeof call === "function")) { return call; } return BufferSourceTrack_assertThisInitialized(self); }\\n\\nfunction BufferSourceTrack_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction BufferSourceTrack_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { BufferSourceTrack_get = Reflect.get; } else { BufferSourceTrack_get = function _get(target, property, receiver) { var base = BufferSourceTrack_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return BufferSourceTrack_get(target, property, receiver || target); }\\n\\nfunction BufferSourceTrack_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = BufferSourceTrack_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction BufferSourceTrack_getPrototypeOf(o) { BufferSourceTrack_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return BufferSourceTrack_getPrototypeOf(o); }\\n\\nfunction BufferSourceTrack_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) BufferSourceTrack_setPrototypeOf(subClass, superClass); }\\n\\nfunction BufferSourceTrack_setPrototypeOf(o, p) { BufferSourceTrack_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return BufferSourceTrack_setPrototypeOf(o, p); }\\n\\n/*\\n\\n  Web Audio API: Buffer Source track\\n\\n*/\\n\\n\\n\\n\\nvar BufferSourceTrack_BufferSourceTrack =\\n/*#__PURE__*/\\nfunction (_WebAudioTrack) {\\n  BufferSourceTrack_inherits(BufferSourceTrack, _WebAudioTrack);\\n\\n  function BufferSourceTrack(params) {\\n    var _this;\\n\\n    BufferSourceTrack_classCallCheck(this, BufferSourceTrack);\\n\\n    _this = BufferSourceTrack_possibleConstructorReturn(this, BufferSourceTrack_getPrototypeOf(BufferSourceTrack).call(this, params));\\n\\n    var track = BufferSourceTrack_assertThisInitialized(_this);\\n\\n    var defaults = {\\n      id: \\\'\\\',\\n      src: \\\'\\\',\\n      volume: 1,\\n      start: 0,\\n      loop: false,\\n      autoplay: false,\\n      autoload: true,\\n      context: false,\\n      mix: false,\\n      nodes: []\\n    };\\n    track.options = Object.assign(defaults, params);\\n    track.status = {\\n      ready: false,\\n      shouldPlayOnLoad: false,\\n      playing: false,\\n      muted: track.options.muted || false // internal flags and data\\n\\n    };\\n    track.data = {\\n      gain: track.options.volume,\\n      // manual time tracking\\n      cachedTime: 0,\\n      startTime: 0\\n    };\\n\\n    if (!track.options.context) {\\n      throw new Error(\\\'Can’t create a WebAudioTrack without Web Audio API support\\\');\\n    }\\n\\n    if (!track.options.src) {\\n      throw new Error(\\\'Can’t create a WebAudioTrack without a src parameter\\\');\\n    } // limited subset of events available because they\\\'re all simulated\\n\\n\\n    var eventNames = [\\\'loadstart\\\', \\\'loadedmetadata\\\', \\\'canplay\\\', \\\'canplaythrough\\\', \\\'play\\\', \\\'pause\\\', \\\'ended\\\', \\\'error\\\']; // load the source right away, even if autoplay isn\\\'t set.\\n\\n    if (track.options.autoload || track.options.autoplay) {\\n      track.load();\\n    }\\n\\n    return _this;\\n  }\\n  /*\\n     Playback needs to wait for the track to be loaded.\\n    After this, it\\\'s a synchronous function.\\n     You can listen for the \\\'canplaythrough\\\' event to ensure\\n    synchronous playback of multiple buffer tracks.\\n   */\\n\\n\\n  BufferSourceTrack_createClass(BufferSourceTrack, [{\\n    key: "play",\\n    value: function play() {\\n      var track = this; // this logic accomodates calling play() multiple times\\n      // while waiting for the track to be set up\\n\\n      if (track.status.playing) {\\n        return track;\\n      }\\n\\n      if (!track.status.ready) {\\n        if (!track.options.autoload && !track.status.shouldPlayOnLoad) {\\n          track.load();\\n        }\\n\\n        track.status.shouldPlayOnLoad = true;\\n        return track;\\n      }\\n      /*\\n         if we got this far we\\\'re actually ready to play, let\\\'s go!\\n       */\\n\\n\\n      var ctx = track.options.context; // the buffer needs to be re-created every time we play()\\n\\n      track.data.source = ctx.createBufferSource();\\n      track.data.source.buffer = track.data.decodedBuffer;\\n      track.data.source.loop = track.options.loop ? true : false; // as do the nodes\\n\\n      var gainNode = {\\n        type: \\\'GainNode\\\',\\n        options: {\\n          gain: track.data.gain\\n        }\\n      };\\n\\n      BufferSourceTrack_get(BufferSourceTrack_getPrototypeOf(BufferSourceTrack.prototype), "createNodes", this).call(this, [gainNode].concat(BufferSourceTrack_toConsumableArray(track.options.nodes)), track.data.source);\\n\\n      track.data.startTime = track.data.source.context.currentTime - track.data.cachedTime;\\n      var startFrom = track.data.cachedTime || 0; // prefer start() but fall back to older, deprecated noteOn()\\n\\n      if (typeof track.data.source.start === \\\'function\\\') {\\n        track.data.source.start(0, startFrom);\\n      } else {\\n        track.data.source.noteOn(startFrom);\\n      }\\n\\n      track.setEndTimer();\\n      track.status.playing = true;\\n\\n      BufferSourceTrack_get(BufferSourceTrack_getPrototypeOf(BufferSourceTrack.prototype), "trigger", this).call(this, \\\'play\\\', track);\\n\\n      return track;\\n    }\\n    /*\\n       Buffer source mode requires the source file to be fully loaded\\n      and decoded before it can be play, so here we fetch it as an\\n      array buffer (because it needs to be in raw binary format to be\\n      decoded).\\n       Web Audio API has the same browser support as fetch (no IE,\\n      not even 11), so we can use this delightful method.\\n     */\\n\\n  }, {\\n    key: "load",\\n    value: function load() {\\n      var _this2 = this;\\n\\n      var track = this;\\n      var ctx = track.options.context;\\n\\n      BufferSourceTrack_get(BufferSourceTrack_getPrototypeOf(BufferSourceTrack.prototype), "trigger", this).call(this, \\\'loadstart\\\');\\n\\n      return window.fetch(track.options.src).then(function (res) {\\n        return res.arrayBuffer();\\n      }).then(function (audioData) {\\n        track.data.audioData = audioData; // Decode audio data\\n\\n        if (typeof ctx.createGain === \\\'function\\\') {\\n          // W3C standard implementation - async (Firefox, recent Chrome)\\n          return new Promise(function (resolve, reject) {\\n            ctx.decodeAudioData(audioData, function (decodedBuffer) {\\n              track.data.decodedBuffer = decodedBuffer;\\n              resolve();\\n            });\\n          });\\n        } else if (typeof ctx.createGainNode === \\\'function\\\') {\\n          // Non-standard Webkit implementation (Safari, old Chrome)\\n          // not async but we fake it for consistency\\n          var decodedBuffer = ctx.createBuffer(audioData, true);\\n          track.data.decodedBuffer = decodedBuffer;\\n          return Promise.resolve();\\n        }\\n      }).then(function () {\\n        track.status.ready = true; // now that the source is decoded, we know its duration\\n\\n        BufferSourceTrack_get(BufferSourceTrack_getPrototypeOf(BufferSourceTrack.prototype), "trigger", _this2).call(_this2, \\\'loadedmetadata\\\');\\n\\n        BufferSourceTrack_get(BufferSourceTrack_getPrototypeOf(BufferSourceTrack.prototype), "trigger", _this2).call(_this2, \\\'canplay\\\');\\n\\n        BufferSourceTrack_get(BufferSourceTrack_getPrototypeOf(BufferSourceTrack.prototype), "trigger", _this2).call(_this2, \\\'canplaythrough\\\');\\n\\n        if (track.options.autoplay || track.status.shouldPlayOnLoad) {\\n          track.play();\\n        }\\n      });\\n    }\\n    /*\\n       Buffer tracks don\\\'t have an ended event so we simulate it using setTimeout\\n     */\\n\\n  }, {\\n    key: "setEndTimer",\\n    value: function setEndTimer() {\\n      var track = this;\\n      var startFrom = track.data.cachedTime || 0;\\n      track.data.timerDuration = track.data.source.buffer.duration - startFrom;\\n\\n      if (track.data.onendtimer) {\\n        window.clearTimeout(track.data.onendtimer);\\n      }\\n\\n      track.data.onendtimer = window.setTimeout(track.ended.bind(track), track.data.timerDuration * 1000);\\n    }\\n  }, {\\n    key: "ended",\\n    value: function ended() {\\n      var track = this;\\n\\n      if (track.options.loop) {\\n        BufferSourceTrack_get(BufferSourceTrack_getPrototypeOf(BufferSourceTrack.prototype), "trigger", this).call(this, \\\'ended\\\', track);\\n\\n        BufferSourceTrack_get(BufferSourceTrack_getPrototypeOf(BufferSourceTrack.prototype), "trigger", this).call(this, \\\'loop\\\', track);\\n\\n        track.pause(0);\\n        track.play();\\n      } else {\\n        track.status.playing = false;\\n\\n        BufferSourceTrack_get(BufferSourceTrack_getPrototypeOf(BufferSourceTrack.prototype), "trigger", this).call(this, \\\'ended\\\', track);\\n      }\\n    } // end of play functions\\n    // ********************************************************\\n\\n  }, {\\n    key: "pause",\\n    value: function pause(pauseAtTime) {\\n      var track = this; // disable autoplay, if we\\\'ve paused the track before it\\\'s had a chance to load\\n\\n      if (!track.status.playing && track.status.shouldPlayOnLoad) {\\n        track.status.shouldPlayOnLoad = false;\\n        track.options.autoplay = false;\\n        return track;\\n      }\\n\\n      track.data.cachedTime = typeof pauseAtTime === \\\'number\\\' ? pauseAtTime : track.currentTime();\\n      track.status.playing = false;\\n\\n      if (track.data.onendtimer) {\\n        window.clearTimeout(track.data.onendtimer);\\n      } // prefer stop(), fallback to deprecated noteOff()\\n\\n\\n      if (typeof track.data.source.stop === \\\'function\\\') {\\n        track.data.source.stop(0);\\n      } else if (typeof track.data.source.noteOff === \\\'function\\\') {\\n        track.data.source.noteOff(0);\\n      }\\n\\n      BufferSourceTrack_get(BufferSourceTrack_getPrototypeOf(BufferSourceTrack.prototype), "trigger", this).call(this, \\\'pause\\\', track);\\n\\n      return track;\\n    }\\n  }, {\\n    key: "currentTime",\\n    value: function currentTime(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === \\\'number\\\') {\\n        if (track.status.playing) {\\n          // to seek a buffer track, we need to pause and play\\n          track.pause(setTo).play();\\n        } else {\\n          // if we\\\'re paused or not loaded yet, cache the time\\n          track.data.cachedTime = setTo;\\n        }\\n\\n        return track;\\n      }\\n\\n      if (!track.status.ready || !track.status.playing) {\\n        return track.data.cachedTime || 0;\\n      }\\n\\n      return track.data.source.context.currentTime - track.data.startTime || 0;\\n    }\\n  }, {\\n    key: "formattedTime",\\n    value: function formattedTime(includeDuration) {\\n      var track = this;\\n      var t = utils.timeFormat(track.currentTime());\\n      var d = utils.timeFormat(track.duration());\\n\\n      if (includeDuration) {\\n        return "".concat(t, "/").concat(d);\\n      } else {\\n        return t;\\n      }\\n    }\\n  }, {\\n    key: "duration",\\n    value: function duration() {\\n      var track = this;\\n\\n      if (!track.status.ready || !track.data.source) {\\n        return 0;\\n      }\\n\\n      return track.data.source.buffer.duration || 0;\\n    } // for a buffer track, volume() is basically an alias for the gain node\\n\\n  }, {\\n    key: "volume",\\n    value: function volume(setTo) {\\n      var track = this;\\n      var gainNode = track.node(\\\'GainNode\\\');\\n\\n      if (typeof setTo === \\\'number\\\') {\\n        setTo = utils.normalize(setTo);\\n\\n        if (track.status.muted) {\\n          track.data.gainCache = setTo; // cache the value for when we unmute\\n\\n          track.data.gain = 0;\\n        } else {\\n          track.data.gain = setTo;\\n        }\\n\\n        if (track.status.playing) {\\n          if (gainNode) {\\n            gainNode.gain(track.options.mix ? track.data.gain * track.options.mix.volume() : track.data.gain);\\n          }\\n        }\\n\\n        return track;\\n      } else {\\n        // accurately report gain while we’re tweening it\\n        if (track.status.playing) {\\n          if (gainNode) {\\n            track.data.gain = gainNode.gain();\\n          }\\n        }\\n\\n        return track.data.gain;\\n      }\\n    }\\n  }, {\\n    key: "tweenVolume",\\n    value: function tweenVolume(setTo, duration) {\\n      var track = this; // remove existing volume tween\\n\\n      if (track.volumeTween) {\\n        window.cancelAnimationFrame(track.volumeTween);\\n      } // if we\\\'re playing, we can use the gain node\\\'s native value ramp method\\n\\n\\n      var gainNode = track.node(\\\'GainNode\\\');\\n\\n      if (gainNode) {\\n        gainNode.tweenGain(setTo, duration);\\n        return u.timeoutPromise(duration * 1000);\\n      } // if we\\\'re not playing or haven\\\'t loaded yet,\\n      // fall back to requestAnimationFrame\\n\\n\\n      return new Promise(function (resolve, reject) {\\n        var fps = 60; // requestAnimationFrame\\n\\n        var durationInFrames = Math.round(duration * fps);\\n        var frameCount = Math.round(duration * fps);\\n        var startVolume = track.volume();\\n        var endVolume = utils.normalize(setTo);\\n        tick();\\n\\n        function tick() {\\n          if (frameCount <= 0) {\\n            track.volume(endVolume);\\n            resolve(track);\\n          } else {\\n            track.volumeTween = window.requestAnimationFrame(tick);\\n          }\\n\\n          frameCount -= 1;\\n          var progress = 1 - frameCount / durationInFrames;\\n          var v = utils.lerp(startVolume, endVolume, progress);\\n          track.volume(v);\\n        }\\n      });\\n    }\\n  }, {\\n    key: "muted",\\n    value: function muted(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === \\\'boolean\\\') {\\n        if (setTo === true) {\\n          // mute: cache current gain, then set to 0\\n          track.data.gainCache = track.data.gain;\\n          track.volume(0);\\n          track.status.muted = true;\\n        } else {\\n          // unmute\\n          track.status.muted = false;\\n          track.volume(track.data.gainCache);\\n        }\\n\\n        return track;\\n      }\\n\\n      return track.status.muted;\\n    }\\n  }, {\\n    key: "paused",\\n    value: function paused() {\\n      var track = this;\\n      return !track.status.playing;\\n    }\\n  }, {\\n    key: "destroy",\\n    value: function destroy() {\\n      var track = this;\\n      track.pause();\\n    }\\n  }]);\\n\\n  return BufferSourceTrack;\\n}(modules_WebAudioTrack);\\n\\n/* harmony default export */ var modules_BufferSourceTrack = (BufferSourceTrack_BufferSourceTrack);\\n// CONCATENATED MODULE: ./src/modules/ElementSourceTrack.js\\nfunction ElementSourceTrack_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { ElementSourceTrack_typeof = function _typeof(obj) { return typeof obj; }; } else { ElementSourceTrack_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return ElementSourceTrack_typeof(obj); }\\n\\nfunction ElementSourceTrack_toConsumableArray(arr) { return ElementSourceTrack_arrayWithoutHoles(arr) || ElementSourceTrack_iterableToArray(arr) || ElementSourceTrack_nonIterableSpread(); }\\n\\nfunction ElementSourceTrack_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }\\n\\nfunction ElementSourceTrack_iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }\\n\\nfunction ElementSourceTrack_arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\\n\\nfunction ElementSourceTrack_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction ElementSourceTrack_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction ElementSourceTrack_createClass(Constructor, protoProps, staticProps) { if (protoProps) ElementSourceTrack_defineProperties(Constructor.prototype, protoProps); if (staticProps) ElementSourceTrack_defineProperties(Constructor, staticProps); return Constructor; }\\n\\nfunction ElementSourceTrack_possibleConstructorReturn(self, call) { if (call && (ElementSourceTrack_typeof(call) === "object" || typeof call === "function")) { return call; } return ElementSourceTrack_assertThisInitialized(self); }\\n\\nfunction ElementSourceTrack_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\\\'t been initialised - super() hasn\\\'t been called"); } return self; }\\n\\nfunction ElementSourceTrack_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) ElementSourceTrack_setPrototypeOf(subClass, superClass); }\\n\\nfunction ElementSourceTrack_setPrototypeOf(o, p) { ElementSourceTrack_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ElementSourceTrack_setPrototypeOf(o, p); }\\n\\nfunction ElementSourceTrack_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { ElementSourceTrack_get = Reflect.get; } else { ElementSourceTrack_get = function _get(target, property, receiver) { var base = ElementSourceTrack_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return ElementSourceTrack_get(target, property, receiver || target); }\\n\\nfunction ElementSourceTrack_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = ElementSourceTrack_getPrototypeOf(object); if (object === null) break; } return object; }\\n\\nfunction ElementSourceTrack_getPrototypeOf(o) { ElementSourceTrack_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return ElementSourceTrack_getPrototypeOf(o); }\\n\\n/*\\n\\n  Web Audio API: Element Source track\\n\\n*/\\n\\n\\n\\n\\nvar ElementSourceTrack_ElementSourceTrack =\\n/*#__PURE__*/\\nfunction (_WebAudioTrack) {\\n  ElementSourceTrack_inherits(ElementSourceTrack, _WebAudioTrack);\\n\\n  function ElementSourceTrack(params) {\\n    var _this;\\n\\n    ElementSourceTrack_classCallCheck(this, ElementSourceTrack);\\n\\n    _this = ElementSourceTrack_possibleConstructorReturn(this, ElementSourceTrack_getPrototypeOf(ElementSourceTrack).call(this, params));\\n\\n    var track = ElementSourceTrack_assertThisInitialized(_this);\\n\\n    var defaults = {\\n      id: \\\'\\\',\\n      src: \\\'\\\',\\n      volume: 1,\\n      start: 0,\\n      loop: false,\\n      autoplay: false,\\n      context: false,\\n      mix: false,\\n      nodes: []\\n    };\\n    track.options = Object.assign(defaults, params);\\n\\n    if (!track.options.context) {\\n      throw new Error(\\\'Can’t create an ElementSourceTrack without Web Audio API support\\\');\\n    } // set up our HTML5 <audio> element\\n\\n\\n    if (!track.options.src) {\\n      throw new Error(\\\'Can’t create an ElementSourceTrack without a src parameter\\\');\\n    }\\n\\n    track.el = document.createElement(\\\'audio\\\');\\n    track.el.volume = track.options.volume;\\n    track.el.muted = track.options.muted;\\n    track.el.loop = track.options.loop;\\n    track.el.autoplay = track.options.autoplay;\\n    track.el.src = track.options.src;\\n    var eventNames = [\\\'loadstart\\\', \\\'loadedmetadata\\\', \\\'canplay\\\', \\\'canplaythrough\\\', \\\'play\\\', \\\'pause\\\', \\\'ended\\\', \\\'timeupdate\\\', \\\'seeking\\\', \\\'seeked\\\', \\\'error\\\'];\\n    eventNames.forEach(function (eventName) {\\n      track.el.addEventListener(eventName, ElementSourceTrack_get(ElementSourceTrack_getPrototypeOf(ElementSourceTrack.prototype), "trigger", ElementSourceTrack_assertThisInitialized(_this)).bind(track, eventName, false));\\n    }); // web audio API setup (only needs to happen once)\\n\\n    track.data.source = track.options.context.createMediaElementSource(track.el);\\n    var gainNode = {\\n      type: \\\'GainNode\\\',\\n      options: {\\n        gain: track.data.gain\\n      }\\n    };\\n\\n    ElementSourceTrack_get(ElementSourceTrack_getPrototypeOf(ElementSourceTrack.prototype), "createNodes", ElementSourceTrack_assertThisInitialized(_this)).call(ElementSourceTrack_assertThisInitialized(_this), [gainNode].concat(ElementSourceTrack_toConsumableArray(track.options.nodes)), track.data.source);\\n\\n    return _this;\\n  }\\n\\n  ElementSourceTrack_createClass(ElementSourceTrack, [{\\n    key: "play",\\n    value: function play() {\\n      var track = this;\\n      track.el.play();\\n      return track;\\n    }\\n  }, {\\n    key: "pause",\\n    value: function pause() {\\n      var track = this;\\n      track.el.pause();\\n      return track;\\n    }\\n  }, {\\n    key: "stop",\\n    value: function stop() {\\n      var track = this;\\n      track.el.pause();\\n      track.el.currentTime = 0;\\n      return track;\\n    }\\n  }, {\\n    key: "currentTime",\\n    value: function currentTime(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === \\\'number\\\') {\\n        track.el.currentTime = setTo;\\n        return track;\\n      } else {\\n        return track.el.currentTime;\\n      }\\n    }\\n  }, {\\n    key: "duration",\\n    value: function duration() {\\n      var track = this;\\n      return track.el.duration;\\n    }\\n  }, {\\n    key: "formattedTime",\\n    value: function formattedTime(includeDuration) {\\n      var track = this;\\n      var t = utils.timeFormat(track.currentTime());\\n      var d = utils.timeFormat(track.duration());\\n\\n      if (includeDuration) {\\n        return "".concat(t, "/").concat(d);\\n      } else {\\n        return t;\\n      }\\n    }\\n  }, {\\n    key: "volume",\\n    value: function volume(setTo) {\\n      var track = this;\\n      var gainNode = track.node(\\\'GainNode\\\');\\n\\n      if (typeof setTo === \\\'number\\\') {\\n        setTo = utils.normalize(setTo);\\n        setTo = track.options.mix ? setTo * track.options.mix.volume() : setTo; // we don\\\'t need to set both the gain node and element volume,\\n        // just the gain node will work, but element volume is a useful place\\n        // to store the current volume value\\n\\n        if (gainNode) {\\n          gainNode.gain(setTo);\\n        }\\n\\n        track.el.volume = setTo;\\n        return track;\\n      } else {\\n        return track.el.volume;\\n      }\\n    }\\n  }, {\\n    key: "tweenVolume",\\n    value: function tweenVolume(setTo, duration) {\\n      var track = this; // replace existing volume tween\\n\\n      if (track.volumeTween) {\\n        window.cancelAnimationFrame(track.volumeTween);\\n      }\\n\\n      return new Promise(function (resolve, reject) {\\n        var fps = 60; // requestAnimationFrame\\n\\n        var durationInFrames = Math.round(duration * fps);\\n        var frameCount = Math.round(duration * fps);\\n        var startVolume = track.volume();\\n        var endVolume = utils.normalize(setTo);\\n        tick();\\n\\n        function tick() {\\n          if (frameCount <= 0) {\\n            track.volume(endVolume);\\n            resolve(track);\\n          } else {\\n            track.volumeTween = window.requestAnimationFrame(tick);\\n          }\\n\\n          frameCount -= 1;\\n          var progress = 1 - frameCount / durationInFrames;\\n          var v = utils.lerp(startVolume, endVolume, progress);\\n          track.volume(v);\\n        }\\n      });\\n    }\\n  }, {\\n    key: "muted",\\n    value: function muted(setTo) {\\n      var track = this;\\n\\n      if (typeof setTo === \\\'boolean\\\') {\\n        track.el.muted = setTo;\\n      }\\n\\n      return track.el.muted;\\n    }\\n  }, {\\n    key: "destroy",\\n    value: function destroy() {\\n      var track = this;\\n      track.pause();\\n    }\\n  }, {\\n    key: "paused",\\n    value: function paused() {\\n      var track = this;\\n      return track.el.paused;\\n    }\\n  }]);\\n\\n  return ElementSourceTrack;\\n}(modules_WebAudioTrack);\\n\\n/* harmony default export */ var modules_ElementSourceTrack = (ElementSourceTrack_ElementSourceTrack);\\n// CONCATENATED MODULE: ./src/modules/trackTypes.js\\n/*\\n\\n  Track Types\\n\\n*/\\n\\n\\n\\n/* harmony default export */ var trackTypes = ({\\n  Html5Track: modules_Html5Track,\\n  BufferSourceTrack: modules_BufferSourceTrack,\\n  ElementSourceTrack: modules_ElementSourceTrack\\n});\\n// CONCATENATED MODULE: ./src/modules/Mixer.js\\nfunction Mixer_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Mixer_typeof = function _typeof(obj) { return typeof obj; }; } else { Mixer_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Mixer_typeof(obj); }\\n\\nfunction Mixer_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\\n\\nfunction Mixer_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction Mixer_createClass(Constructor, protoProps, staticProps) { if (protoProps) Mixer_defineProperties(Constructor.prototype, protoProps); if (staticProps) Mixer_defineProperties(Constructor, staticProps); return Constructor; }\\n\\n/*\\n\\n  Audio Mixer\\n\\n*/\\n\\n\\n\\nvar Mixer_Mixer =\\n/*#__PURE__*/\\nfunction () {\\n  function Mixer() {\\n    Mixer_classCallCheck(this, Mixer);\\n\\n    var mix = this;\\n    mix.allTracks = []; // tracks as numbered array\\n\\n    mix.lookup = {}; // tracks as lookup table: mix.lookup[\\\'trackname\\\']\\n\\n    mix.currentVolume = 1; // create a web audio context:\\n    // FF, Chrome, Edge unprefixed\\n    // Safari prefixed\\n\\n    if (window.AudioContext || window.webkitAudioContext) {\\n      this.context = typeof window.AudioContext === \\\'function\\\' ? new window.AudioContext() : new window.webkitAudioContext();\\n    }\\n  }\\n  /*\\n     Create a new track, or return an existing track\\n   */\\n\\n\\n  Mixer_createClass(Mixer, [{\\n    key: "track",\\n    value: function track(id, params) {\\n      var mix = this;\\n\\n      if (!id) {\\n        throw new Error(\\\'Can’t create a track without a name\\\');\\n        return;\\n      } // track already exists, return it\\n\\n\\n      if (mix.lookup[id]) {\\n        return mix.lookup[id];\\n      } else if (params) {\\n        // if params are passed, create a track\\n        var defaults = {\\n          id: id,\\n          timeline: [],\\n          mix: mix,\\n          context: mix.context,\\n          type: trackTypes.Html5Track // default to standard track type\\n\\n        };\\n        var options = Object.assign(defaults, params); // should be able to pass track type as string\\n\\n        if (typeof options.type === \\\'string\\\') {\\n          if (trackTypes[options.type]) options.type = trackTypes[options.type];\\n        }\\n\\n        var track = new options.type(options);\\n        mix.allTracks.push(track);\\n        mix.lookup[id] = track;\\n        return track;\\n      } else {\\n        // this track doesn\\\'t exist, no params received\\n        return false;\\n      }\\n    }\\n  }, {\\n    key: "tracks",\\n    value: function tracks() {\\n      var mix = this;\\n      return mix.allTracks;\\n    }\\n    /*\\n       Remove an existing track. Can receive an ID or a track object.\\n     */\\n\\n  }, {\\n    key: "remove",\\n    value: function remove(input) {\\n      var mix = this; // input can be either a string or a track object,\\n      // but the track object needs to have an id property\\n\\n      var trackId;\\n      if (typeof input === \\\'string\\\') trackId = input;else if (Mixer_typeof(input) === \\\'object\\\' && input.id) trackId = input.id;\\n      var track = mix.lookup[trackId];\\n\\n      for (var i = mix.allTracks.length - 1; i >= 0; i--) {\\n        if (mix.allTracks[i] === track) {\\n          mix.allTracks.splice(i, 1);\\n        }\\n      }\\n\\n      if (track.destroy) track.destroy();\\n      track = null;\\n      delete mix.lookup[trackId];\\n    }\\n    /*\\n       Set the master volume for the entire audio mixer.\\n     */\\n\\n  }, {\\n    key: "volume",\\n    value: function volume(setTo) {\\n      var mix = this;\\n\\n      if (typeof setTo === \\\'number\\\') {\\n        mix.currentVolume = utils.normalize(setTo); // tracks multiply their volume by the mix’s volume, so\\n        // whenever we change the master volume we need to call\\n        // track.volume() once to get the intended result\\n\\n        mix.allTracks.forEach(function (track) {\\n          return track.volume ? track.volume(track.volume()) : \\\'\\\';\\n        });\\n      }\\n\\n      return mix.currentVolume;\\n    }\\n  }]);\\n\\n  return Mixer;\\n}();\\n\\n/* harmony default export */ var modules_Mixer = (Mixer_Mixer);\\n// CONCATENATED MODULE: ./src/index.js\\n/*\\n\\n  Audio Mixer\\n\\n*/\\n\\n\\n/* harmony default export */ var src = __webpack_exports__["default"] = ({\\n  Mixer: modules_Mixer,\\n  Html5Track: modules_Html5Track\\n});//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///1\\n\');\n  }]);\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(10)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n')},function(module,exports){eval('module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, "loaded", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, "id", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n')},function(module,exports,__webpack_require__){eval("var m = __webpack_require__(0);\n\nvar Stream = __webpack_require__(1);\n\nvar Dropzone = __webpack_require__(12);\n\nmodule.exports = {\n  oninit: function oninit(vnode) {\n    var state = this;\n    var mix = vnode.attrs.mix;\n    var defaults = {\n      id: '',\n      src: '',\n      type: 'Html5Track',\n      loop: false,\n      autoplay: false,\n      muted: false // timeline: [],\n\n    };\n    state.options = Stream({});\n    state.create = create;\n    state.reset = reset;\n    state.set = set;\n    state.get = get;\n    state.remove = remove;\n    state.node = node;\n    setup(); // ********************************************************\n\n    function setup() {\n      reset();\n    }\n\n    function create() {\n      var options = state.options();\n      console.log(options);\n      mix.track(options.id, options);\n      reset();\n    }\n\n    function reset() {\n      state.options(Object.assign({}, defaults));\n      m.redraw();\n    }\n\n    function set(prop, val) {\n      var info = state.options();\n      info[prop] = val;\n      state.options(info);\n      m.redraw();\n    }\n\n    function remove(prop) {\n      var info = state.options();\n      delete info[prop];\n      state.options(info);\n      m.redraw();\n    }\n\n    function get(prop) {\n      var info = state.options();\n      return info[prop];\n    }\n\n    function node(type, setTo) {\n      var options = state.options();\n      if (!options.nodes) return false;\n\n      if (type) {\n        if (typeof setTo === 'boolean') {\n          if (options.nodes.indexOf(type) === -1) {\n            options.nodes.push(type);\n          } else {\n            options.nodes.splice(options.nodes.indexOf(type), 1);\n          }\n\n          state.options(options);\n        } else {\n          return options.nodes.indexOf(type) !== -1;\n        }\n      }\n    }\n  },\n  view: function view(vnode) {\n    var state = this;\n    return [m('.row', [// ********************************************************\n    m('.col', [m('header', '1. Source file'), m(Dropzone, {\n      hook: state.set.bind(null, 'src')\n    })]), // ********************************************************\n    m('.col', [m('header', '2. Options'), m('.input', [m('label', {\n      for: 'input-name'\n    }, 'Id'), m('input', {\n      id: 'input-name',\n      value: state.get('id'),\n      oninput: m.withAttr('value', state.set.bind(null, 'id'))\n    })]), m('.input', [m('label', {\n      for: 'input-type'\n    }, 'Type'), m('select', {\n      id: 'input-type',\n      oninput: function oninput() {\n        var value = this.value;\n        console.log(value);\n        state.set('type', value);\n        if (value === 'Html5Track') state.remove('nodes');else if (!state.get('nodes')) state.set('nodes', []);\n      },\n      value: state.get('type')\n    }, [m('option', {\n      value: 'Html5Track'\n    }, m.trust('&nbsp;&nbsp;HTML5')), m('optgroup', {\n      label: 'Web Audio:'\n    }), m('option', {\n      value: 'BufferSourceTrack'\n    }, m.trust('&nbsp;&nbsp;Buffer Source')), m('option', {\n      value: 'ElementSourceTrack'\n    }, m.trust('&nbsp;&nbsp;Element Source')), m('option', {\n      value: 'StreamSourceTrack',\n      disabled: true\n    }, m.trust('&nbsp;&nbsp;Stream Source'))])]), checkbox.call(state, 'loop'), checkbox.call(state, 'autoplay'), checkbox.call(state, 'muted'), m('div', {\n      style: {\n        display: state.get('type') === 'Html5Track' ? 'none' : 'block'\n      }\n    }, [m('h4', 'nodes'), m('.input', [m('label', {\n      for: 'input-node-GainNode'\n    }, 'GainNode'), m('input', {\n      id: 'input-node-GainNode',\n      type: 'checkbox',\n      checked: true,\n      disabled: true // onclick: m.withAttr('checked', state.node.bind(null, 'GainNode')),\n      // checked: state.get(id),\n\n    })]), nodeCheckbox.call(state, 'PannerNode2D')])]), // ********************************************************\n    m('.col.is-grow', [m('pre.options', [JSON.stringify(state.options(), ' ', 2)])]), // ********************************************************\n    m('.col', [m('header', '3. Create!'), m('button.mod-red', {\n      onclick: state.reset\n    }, 'Reset Options'), m('button.mod-green', {\n      onclick: state.create\n    }, 'Create Track')])])];\n  }\n};\n\nfunction checkbox(id) {\n  var state = this;\n  return m('.input', [m('label', {\n    for: 'input-' + id\n  }, id), m('input', {\n    id: 'input-' + id,\n    type: 'checkbox',\n    onclick: m.withAttr('checked', state.set.bind(null, id)),\n    checked: state.get(id)\n  })]);\n}\n\nfunction nodeCheckbox(id) {\n  var state = this;\n  return m('.input', [m('label', {\n    for: 'input-node-' + id\n  }, id), m('input', {\n    id: 'input-node-' + id,\n    type: 'checkbox',\n    onclick: m.withAttr('checked', state.node.bind(null, id)),\n    checked: state.node(id)\n  })]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n")},function(module,exports,__webpack_require__){eval("/*\n\n  file drop or getusermedia\n\n*/\nvar m = __webpack_require__(0);\n\nvar Stream = __webpack_require__(1);\n\nmodule.exports = {\n  oncreate: function oncreate(vnode) {\n    var state = this;\n    vnode.dom.addEventListener('drop', drop);\n    vnode.dom.addEventListener('dragover', dragover);\n    vnode.dom.addEventListener('dragend', dragend);\n\n    function dragover(e) {\n      e.preventDefault();\n      this.classList.add('is-over');\n    }\n\n    function dragend(e) {\n      e.preventDefault();\n      this.classList.remove('is-over');\n    }\n\n    function drop(e) {\n      e.preventDefault();\n      this.classList.remove('is-over');\n\n      if (e.dataTransfer.items) {\n        for (var i = 0; i < e.dataTransfer.items.length; i++) {\n          var item = e.dataTransfer.items[i];\n\n          if (item.kind == \"file\") {\n            processFile(item.getAsFile());\n          }\n        }\n      } else {\n        for (var i = 0; i < e.dataTransfer.files.length; i++) {\n          processFile(e.dataTransfer.files[i]);\n        }\n      }\n    }\n\n    function processFile(file) {\n      vnode.attrs.hook(URL.createObjectURL(file));\n    }\n  },\n  view: function view(vnode) {\n    var state = this;\n    return m('.dropzone', [m('.dropzone-inner', ['Drop an audio file here'])]);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2RlbW8vanMvbW9kdWxlcy9kcm9wem9uZS5qcz84NWUxIl0sIm5hbWVzIjpbIm0iLCJyZXF1aXJlIiwiU3RyZWFtIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9uY3JlYXRlIiwidm5vZGUiLCJzdGF0ZSIsImRvbSIsImFkZEV2ZW50TGlzdGVuZXIiLCJkcm9wIiwiZHJhZ292ZXIiLCJkcmFnZW5kIiwiZSIsInByZXZlbnREZWZhdWx0IiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwiZGF0YVRyYW5zZmVyIiwiaXRlbXMiLCJpIiwibGVuZ3RoIiwiaXRlbSIsImtpbmQiLCJwcm9jZXNzRmlsZSIsImdldEFzRmlsZSIsImZpbGVzIiwiZmlsZSIsImF0dHJzIiwiaG9vayIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInZpZXciXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUtBLElBQU1BLENBQUMsR0FBR0MsbUJBQU8sQ0FBQyxDQUFELENBQWpCOztBQUNBLElBQU1DLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQyxDQUFELENBQXRCOztBQUVBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFFZkMsVUFBUSxFQUFFLGtCQUFTQyxLQUFULEVBQWU7QUFDdkIsUUFBSUMsS0FBSyxHQUFHLElBQVo7QUFFQUQsU0FBSyxDQUFDRSxHQUFOLENBQVVDLGdCQUFWLENBQTJCLE1BQTNCLEVBQW1DQyxJQUFuQztBQUNBSixTQUFLLENBQUNFLEdBQU4sQ0FBVUMsZ0JBQVYsQ0FBMkIsVUFBM0IsRUFBdUNFLFFBQXZDO0FBQ0FMLFNBQUssQ0FBQ0UsR0FBTixDQUFVQyxnQkFBVixDQUEyQixTQUEzQixFQUFzQ0csT0FBdEM7O0FBRUEsYUFBU0QsUUFBVCxDQUFrQkUsQ0FBbEIsRUFBb0I7QUFDbEJBLE9BQUMsQ0FBQ0MsY0FBRjtBQUNBLFdBQUtDLFNBQUwsQ0FBZUMsR0FBZixDQUFtQixTQUFuQjtBQUNEOztBQUNELGFBQVNKLE9BQVQsQ0FBaUJDLENBQWpCLEVBQW1CO0FBQ2pCQSxPQUFDLENBQUNDLGNBQUY7QUFDQSxXQUFLQyxTQUFMLENBQWVFLE1BQWYsQ0FBc0IsU0FBdEI7QUFDRDs7QUFFRCxhQUFTUCxJQUFULENBQWNHLENBQWQsRUFBZ0I7QUFDZEEsT0FBQyxDQUFDQyxjQUFGO0FBQ0EsV0FBS0MsU0FBTCxDQUFlRSxNQUFmLENBQXNCLFNBQXRCOztBQUNBLFVBQUdKLENBQUMsQ0FBQ0ssWUFBRixDQUFlQyxLQUFsQixFQUF3QjtBQUV0QixhQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdQLENBQUMsQ0FBQ0ssWUFBRixDQUFlQyxLQUFmLENBQXFCRSxNQUF6QyxFQUFpREQsQ0FBQyxFQUFsRCxFQUFzRDtBQUNwRCxjQUFJRSxJQUFJLEdBQUdULENBQUMsQ0FBQ0ssWUFBRixDQUFlQyxLQUFmLENBQXFCQyxDQUFyQixDQUFYOztBQUNBLGNBQUlFLElBQUksQ0FBQ0MsSUFBTCxJQUFhLE1BQWpCLEVBQXlCO0FBQ3ZCQyx1QkFBVyxDQUFDRixJQUFJLENBQUNHLFNBQUwsRUFBRCxDQUFYO0FBQ0Q7QUFDRjtBQUVGLE9BVEQsTUFTTztBQUNMLGFBQUssSUFBSUwsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR1AsQ0FBQyxDQUFDSyxZQUFGLENBQWVRLEtBQWYsQ0FBcUJMLE1BQXpDLEVBQWlERCxDQUFDLEVBQWxELEVBQXNEO0FBQ3BESSxxQkFBVyxDQUFFWCxDQUFDLENBQUNLLFlBQUYsQ0FBZVEsS0FBZixDQUFxQk4sQ0FBckIsQ0FBRixDQUFYO0FBQ0Q7QUFFRjtBQUNGOztBQUVELGFBQVNJLFdBQVQsQ0FBcUJHLElBQXJCLEVBQTBCO0FBQ3hCckIsV0FBSyxDQUFDc0IsS0FBTixDQUFZQyxJQUFaLENBQWtCQyxHQUFHLENBQUNDLGVBQUosQ0FBb0JKLElBQXBCLENBQWxCO0FBQ0Q7QUFDRixHQXpDYztBQTJDZkssTUFBSSxFQUFFLGNBQVMxQixLQUFULEVBQWU7QUFDbkIsUUFBSUMsS0FBSyxHQUFHLElBQVo7QUFDQSxXQUFPUCxDQUFDLENBQUMsV0FBRCxFQUFjLENBQ3BCQSxDQUFDLENBQUMsaUJBQUQsRUFBb0IsQ0FDbkIseUJBRG1CLENBQXBCLENBRG1CLENBQWQsQ0FBUjtBQUtEO0FBbERjLENBQWpCIiwiZmlsZSI6IjEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblxuICBmaWxlIGRyb3Agb3IgZ2V0dXNlcm1lZGlhXG5cbiovXG5jb25zdCBtID0gcmVxdWlyZSgnbWl0aHJpbCcpXG5jb25zdCBTdHJlYW0gPSByZXF1aXJlKCdtaXRocmlsL3N0cmVhbScpXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIG9uY3JlYXRlOiBmdW5jdGlvbih2bm9kZSl7XG4gICAgbGV0IHN0YXRlID0gdGhpc1xuXG4gICAgdm5vZGUuZG9tLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBkcm9wKVxuICAgIHZub2RlLmRvbS5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGRyYWdvdmVyKVxuICAgIHZub2RlLmRvbS5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgZHJhZ2VuZClcblxuICAgIGZ1bmN0aW9uIGRyYWdvdmVyKGUpe1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2lzLW92ZXInKVxuICAgIH1cbiAgICBmdW5jdGlvbiBkcmFnZW5kKGUpe1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLW92ZXInKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRyb3AoZSl7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZSgnaXMtb3ZlcicpXG4gICAgICBpZihlLmRhdGFUcmFuc2Zlci5pdGVtcyl7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlLmRhdGFUcmFuc2Zlci5pdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBpdGVtID0gZS5kYXRhVHJhbnNmZXIuaXRlbXNbaV1cbiAgICAgICAgICBpZiAoaXRlbS5raW5kID09IFwiZmlsZVwiKSB7XG4gICAgICAgICAgICBwcm9jZXNzRmlsZShpdGVtLmdldEFzRmlsZSgpKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGUuZGF0YVRyYW5zZmVyLmZpbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgcHJvY2Vzc0ZpbGUoIGUuZGF0YVRyYW5zZmVyLmZpbGVzW2ldIClcbiAgICAgICAgfVxuXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0ZpbGUoZmlsZSl7XG4gICAgICB2bm9kZS5hdHRycy5ob29rKCBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpIClcbiAgICB9XG4gIH0sXG5cbiAgdmlldzogZnVuY3Rpb24odm5vZGUpe1xuICAgIGxldCBzdGF0ZSA9IHRoaXNcbiAgICByZXR1cm4gbSgnLmRyb3B6b25lJywgW1xuICAgICAgbSgnLmRyb3B6b25lLWlubmVyJywgW1xuICAgICAgICAnRHJvcCBhbiBhdWRpbyBmaWxlIGhlcmUnXG4gICAgICBdKSxcbiAgICBdKVxuICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n")},function(module,exports,__webpack_require__){eval("var m = __webpack_require__(0);\n\nvar Stream = __webpack_require__(1);\n\nvar frameRunner = __webpack_require__(14);\n/*\n\n  Formatted Time (00:00)\n\n*/\n\n\nvar formattedTime = {\n  oncreate: function oncreate(vnode) {\n    var state = this;\n    var track = vnode.attrs.track;\n    track.on('play', function () {\n      return updateTime();\n    });\n    track.on('ended', function () {\n      return m.redraw();\n    });\n    state.hook = frameRunner.add(track.options.id + '-formatted-time', updateTime);\n\n    function updateTime() {\n      vnode.dom.innerText = track.formattedTime();\n    }\n  },\n  onremove: function onremove(vnode) {\n    var state = this;\n    state.hook();\n  },\n  view: function view(vnode) {\n    return m('.tracks-track-time', '00:00');\n  }\n  /*\n  \n    Volume Slider\n  \n  */\n\n};\nvar volumeControl = {\n  oninit: function oninit(vnode) {\n    var state = this;\n    state.track = vnode.attrs.track;\n  },\n  oncreate: function oncreate(vnode) {\n    var state = this;\n    var isMouseDown;\n    var input = vnode.dom.querySelector('input');\n    var label = vnode.dom.querySelector('.mod-currentvolume');\n    state.onmousedown = onmousedown;\n    state.onmouseup = onmouseup;\n    state.hook = frameRunner.add(state.track.options.id + '-update-volume', updateVolume);\n\n    function updateVolume() {\n      if (isMouseDown) return;\n      input.value = state.track.volume() * 100;\n      label.innerText = input.value + '%';\n    }\n\n    function onmousedown() {\n      isMouseDown = true;\n    }\n\n    function onmouseup(e) {\n      isMouseDown = false;\n      state.track.volume(e.target.value / 100);\n    }\n  },\n  onremove: function onremove(vnode) {\n    var state = this;\n    state.hook();\n  },\n  view: function view(vnode) {\n    var state = this;\n    return [m('.tracks-track-col', [m('.tracks-track-col-label', 'volume'), m('.volumecontrol', [m('input[type=\"range\"].volumecontrol-input', {\n      min: 0,\n      max: 100,\n      onmousedown: state.onmousedown,\n      onmouseup: state.onmouseup\n    }), m('.volumecontrol-label.mod-currentvolume', Math.round(state.track.volume() * 100) + '%')])]), m('.tracks-track-col', [m('button', {\n      onclick: function onclick() {\n        return state.track.tweenVolume(0, 1);\n      }\n    }, 'To 0'), m('button', {\n      onclick: function onclick() {\n        return state.track.tweenVolume(1, 1);\n      }\n    }, 'To 100')])];\n  }\n  /*\n  \n    Time Scrubber\n  \n  */\n\n};\nvar scrubber = {\n  oncreate: function oncreate(vnode) {\n    var state = this;\n    var track = vnode.attrs.track;\n    var percentage, isMouseDown;\n    var input = vnode.dom.querySelector('input');\n    state.max = 1000;\n    state.onmousedown = onmousedown;\n    state.onmouseup = onmouseup;\n    state.hook = frameRunner.add(track.options.id + '-update-time', updateTime);\n\n    function updateTime() {\n      if (isMouseDown) return;\n      percentage = track.currentTime() / track.duration();\n      input.value = percentage * state.max;\n    }\n\n    function onmousedown() {\n      isMouseDown = true;\n    }\n\n    function onmouseup(e) {\n      isMouseDown = false;\n      percentage = e.target.value / state.max;\n      track.currentTime(percentage * track.duration());\n    }\n  },\n  onremove: function onremove(vnode) {\n    var state = this;\n    state.hook();\n  },\n  view: function view(vnode) {\n    var state = this;\n    return m('.scrubber', [m('input[type=\"range\"].scrubber-input', {\n      min: 0,\n      max: state.max,\n      onmousedown: state.onmousedown,\n      onmouseup: state.onmouseup\n    })]);\n  }\n  /*\n  \n    PannerNode2D\n  \n  */\n\n};\nvar pan2d = {\n  oncreate: function oncreate(vnode) {\n    var state = this;\n    var track = vnode.attrs.track;\n    var angle, isMouseDown;\n    var input = vnode.dom.querySelector('input');\n    state.min = -90;\n    state.max = 90; // get a reference to the panner node (re-created every time we play)\n\n    track.on('play', function () {\n      if (track.node) {\n        state.panNode = track.node('PannerNode2D');\n        m.redraw();\n      }\n    });\n    state.onmousedown = onmousedown;\n    state.onmouseup = onmouseup;\n    state.hook = frameRunner.add(track.options.id + '-update-time', updateTime);\n\n    function updateTime() {\n      if (isMouseDown) return;\n      if (!state.panNode) return;\n      var angle = state.panNode.pan();\n      if (angle > 90) angle = 360 - angle;\n      if (!input) input = vnode.dom.querySelector('input');\n      if (input) input.value = angle;\n    }\n\n    function onmousedown() {\n      isMouseDown = true;\n    }\n\n    function onmouseup(e) {\n      isMouseDown = false;\n      angle = parseInt(e.target.value);\n      var panNode = track.node('PannerNode2D');\n      panNode.pan(angle);\n    }\n  },\n  onremove: function onremove(vnode) {\n    var state = this;\n    state.hook();\n  },\n  view: function view(vnode) {\n    var state = this;\n\n    if (state.panNode) {\n      return m('.tracks-track-col', [m('.tracks-track-col-label', 'pan (2d)'), m('.pan', [m('.pan-label', 'left'), m('input[type=\"range\"].scrubber-input', {\n        min: state.min,\n        max: state.max,\n        onmousedown: state.onmousedown,\n        onmouseup: state.onmouseup\n      }), m('.pan-label', 'right')])]);\n    } else {\n      return m('');\n    }\n  } // ********************************************************\n  // TO DO\n  // ********************************************************\n\n};\n\nfunction analysis() {\n  var track = this;\n  return m('.tracks-track-col', ['analysis']);\n}\n/*\n\n  ##  ## #### ###### ##    ##\n  ##  ##  ##  ##     ##    ##\n  ##  ##  ##  #####  ## ## ##\n   ####   ##  ##     ## ## ##\n    ##   #### ######  ##  ##\n\n*/\n\n\nmodule.exports = {\n  oninit: function oninit(vnode) {\n    var state = this;\n    var mix = vnode.attrs.mix;\n  },\n  view: function view(vnode) {\n    var state = this;\n    var mix = vnode.attrs.mix;\n    return m('.tracks', [mix.tracks().length ? TrackListTracks.call(state, vnode) : TrackListEmpty()]);\n  }\n};\n\nfunction TrackListTracks(vnode) {\n  var state = this;\n  return vnode.attrs.mix.tracks().map(function (track) {\n    return m('.tracks-track', [m('.tracks-track-col.mod-id', track.options.id), m('.tracks-track-col', [m('.tracks-track-col-label', 'time'), m(scrubber, {\n      track: track\n    })]), m('.tracks-track-col', [m(formattedTime, {\n      track: track\n    })]), // track controls\n    m('.tracks-track-col', [m('button', {\n      style: {\n        display: track.paused() ? 'none' : 'block'\n      },\n      onclick: function onclick() {\n        return track.pause();\n      }\n    }, '| |'), m('button', {\n      style: {\n        display: track.paused() ? 'block' : 'none'\n      },\n      onclick: function onclick() {\n        return track.play();\n      }\n    }, m.trust('&#9655;'))]), m('.tracks-track-col', [m('button', {\n      onclick: function onclick() {\n        return vnode.attrs.mix.remove(track);\n      }\n    }, m.trust('&#10005;'))]), m(volumeControl, {\n      track: track\n    }), m(pan2d, {\n      track: track\n    })]);\n  });\n}\n\nfunction TrackListEmpty() {\n  return m('.tracks-track', ['no tracks']);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n")},function(module,exports,__webpack_require__){eval("var FrameRunner = __webpack_require__(15);\n\nvar frameRunner = new FrameRunner();\nmodule.exports = frameRunner;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2RlbW8vanMvZnJhbWUtcnVubmVyLmpzPzBhNzAiXSwibmFtZXMiOlsiRnJhbWVSdW5uZXIiLCJyZXF1aXJlIiwiZnJhbWVSdW5uZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsRUFBRCxDQUEzQjs7QUFDQSxJQUFJQyxXQUFXLEdBQUcsSUFBSUYsV0FBSixFQUFsQjtBQUNBRyxNQUFNLENBQUNDLE9BQVAsR0FBaUJGLFdBQWpCIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRnJhbWVSdW5uZXIgPSByZXF1aXJlKCdoZWxpb3MtZnJhbWUtcnVubmVyJylcbnZhciBmcmFtZVJ1bm5lciA9IG5ldyBGcmFtZVJ1bm5lcigpXG5tb2R1bGUuZXhwb3J0cyA9IGZyYW1lUnVubmVyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14\n")},function(module,exports,__webpack_require__){eval("(function (global, factory) {\n\t true ? module.exports = factory() :\n\tundefined;\n}(this, (function () { 'use strict';\n\nclass FrameRunner {\n\n  constructor(params) {\n    let defaults = {\n      debug: false\n    };\n    this.options = Object.assign(defaults, params);\n\n    this.counter = 0;\n    this.i = 0;\n\n    this.functionLookup = { everyFrame: {}, everySecond: {} };\n    this.functionArray = { everyFrame: [], everySecond: [] };\n\n    this.polyfill();\n\n    this.start();\n  }\n\n  start() {\n    let context = this;\n\n    this.rafID = window.requestAnimationFrame(rafFunction);\n    this.log('[frameRunner] start RAF Loop');\n\n    function rafFunction() {\n      context.rafID = window.requestAnimationFrame(rafFunction);\n\n      for (context.i = context.functionArray.everyFrame.length - 1; context.i >= 0; context.i--) context.functionArray.everyFrame[context.i]();\n\n      context.counter++;\n      if (context.counter > 60) context.counter = 0;\n\n      if (context.counter === 0) {\n        for (context.i = context.functionArray.everySecond.length - 1; context.i >= 0; context.i--) context.functionArray.everySecond[context.i]();\n      }\n    }\n  }\n\n  stop() {\n    window.cancelAnimationFrame(this.rafID);\n    this.log('[frameRunner] stop RAF Loop');\n  }\n\n  add(params) {\n    let options = {};\n\n    // allow both types of function signature\n    if (arguments.length > 1) {\n      options.id = arguments[0];\n      options.f = arguments[1];\n      options.type = arguments[2] || 'everyFrame';\n    } else {\n      let defaults = { id: null, f: null, type: 'everyFrame' };\n      options = Object.assign(defaults, params);\n    }\n\n    if (!options.id || !options.f) {\n      this.error(`can’t add \"${options.id}\"; missing argument`);return;\n    }\n    if (typeof options.f !== 'function') {\n      this.error(`\"${options.id}\" is not a valid function`);return;\n    }\n\n    if (!this.functionLookup[options.type][options.id]) {\n      this.log(`[frameRunner] adding \"${options.id}\" to ${options.type}`);\n\n      this.functionLookup[options.type][options.id] = options.f;\n      this.functionArray[options.type].push(options.f);\n\n      return this.remove.bind(null, options.id, options.type); // return destroyer\n    } else {\n      this.error('[frameRunner] function exists');\n    }\n  }\n\n  remove(params) {\n    let options = {};\n\n    if (typeof arguments[0] === 'object') {\n      let defaults = { id: undefined, type: 'everyFrame' };\n      options = Object.assign(defaults, params);\n    } else {\n      options.id = arguments[0];\n      options.type = arguments[1] || 'everyFrame';\n    }\n\n    var theFunction = this.functionLookup[options.type][options.id];\n\n    if (theFunction) {\n      this.log(`[frameRunner] removing \"${options.id}\" from ${options.type}`);\n\n      for (var i = this.functionArray[options.type].length - 1; i >= 0; i--) {\n        if (this.functionArray[options.type][i] === theFunction) {\n          this.functionArray[options.type].splice(i, 1);\n        }\n      }\n\n      delete this.functionLookup[options.type][options.id];\n      return true;\n    } else {\n      this.error(`function \"${name}\" doesn’t exist`);\n      return false;\n    }\n  }\n\n  check(params) {\n    let options = {};\n\n    if (typeof params === 'object') {\n      let defaults = { id: undefined, type: 'everyFrame' };\n      options = Object.assign(defaults, params);\n    } else {\n      options.id = arguments[0];\n      options.type = arguments[1] || 'everyFrame';\n    }\n\n    return !!this.functionLookup[options.type][options.id];\n  }\n\n  getFrameCount() {\n    return this.rafID;\n  }\n\n  log() {\n    if (this.debug) console.log.call(null, arguments);\n  }\n  error() {\n    if (this.debug) console.error.call(null, arguments);\n  }\n\n  // requestAnimationFrame() Polyfill\n  // https://gist.github.com/paulirish/1579671\n  polyfill() {\n    var lastTime = 0;\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n      window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n      window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = window.setTimeout(function () {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n\n    if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n      clearTimeout(id);\n    };\n  }\n\n}\n\nreturn FrameRunner;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n")}]);